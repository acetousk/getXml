<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- getXml & Related Services -->
    <service verb="refresh" noun="AllDataTypeFiles">
        <actions>
            <service-call name="XmlServices.get#AllEntityList" in-map="[outputFile:true]" out-map="context"/>
            <service-call name="XmlServices.get#AllServiceList" in-map="[outputFile:true]" out-map="context"/>
            <service-call name="XmlServices.get#AllScreenList" in-map="[outputFile:true]" out-map="context"/>
        </actions>
    </service>
    <!-- Entities -->
    <service verb="get" noun="AllEntityList">
        <in-parameters>
            <parameter name="orderByField" default-value="fullEntityName" required="true"/>
            <parameter name="filterRegexp"/>
            <parameter name="masterEntitiesOnly" type="Boolean" required="true" default="false"/>
            <parameter name="excludeViewEntities" type="Boolean" required="true" default="true"/>

            <parameter name="outputFile" type="Boolean" required="true" default="false"/>
            <parameter name="outputFilesToFolder" type="Boolean" required="true" default="false"/>
            <parameter name="outputFolder" default-value="component://getXml/dataset/entity"/>
        </in-parameters>
        <out-parameters>
<!--            <parameter name="entityXml"/>-->
<!--            <parameter name="entityList" type="List"/>-->
        </out-parameters>
        <actions>
            <set field="inEntityList" from="ec.entity.getAllEntitiesInfo(orderByField?:'fullEntityName', filterRegexp, masterEntitiesOnly, excludeViewEntities)"/>
            <if condition="outputFile">
            <script><![CDATA[entityXml="""<?xml version="1.0" encoding="UTF-8"?><entities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/entity-definition-3.xsd">"""]]></script>
            </if>
            <set field="entityList" from="[]"/>

            <if condition="outputFilesToFolder">
                <set field="outputFolder" from="ec.resource.getLocationReference(outputFolder)"/>
            </if>
            <iterate list="inEntityList" entry="inEntity">
<!--                <log level="warn" message="entity: ${entity}"/>-->
                <set field="entityDefinition" from="ec.entity.getEntityDefinition(inEntity.fullEntityName)"/>
                <set field="entityInfo" from="entityDefinition.entityInfo"/>
                <set field="entityNode" from="entityDefinition.getEntityNode()"/>
                <set field="fieldInfos" from="entityInfo.allFieldInfoArray"/>
                <set field="relationshipInfoList" from="entityDefinition.getRelationshipsInfo(false)"/>
                <set field="dependents" from="entityDefinition.getDependentsTree()"/>
                <script><![CDATA[
                    eecas = ec.entity.eecaRulesByEntityName.get(entityDefinition.fullEntityName)
                    secas = []
                    for (verb in org.moqui.impl.service.runner.EntityAutoServiceRunner.verbSet) {
                        serviceName = verb + entityDefinition.fullEntityName
                        rules = ec.service.secaRulesByServiceName.get(serviceName)
                        if (rules) secas.addAll(rules)
                    }
                    ]]></script>
                <log level="warn" message="Entity ${inEntity.fullEntityName} has ${eecas?.size()} EECAs and ${secas?.size()} SECAs"/>
                <log level="warn" message="eecas: ${eecas} secas: ${secas}"/>
<!--                <set field="entityDescription" from="entityNode.first('description')?.text"/>-->
<!--                <script><![CDATA[-->
<!--                    entityNode.remove('seed-data')-->
<!--                ]]></script>-->
                <set field="xml" value=""/>
                <script><![CDATA[xml="\n<!-- Entity Name: ${inEntity.fullEntityName} sql table: ${inEntity.tableName} -->"+entityNode.toString()]]></script>

                <set field="xml" from="xml-'&lt;/entity&gt;'"/>
<!--                <log level="warn" message="xml before: ${xml}"/>-->
                <iterate list="secas" entry="seca">
                    <set field="xml" from="xml+'\n&lt;!-- seca '+seca+'--&gt;'"/>
                </iterate>
                <iterate list="eecas" entry="eeca">
                    <set field="xml" from="xml+'\n&lt;!-- eeca '+eeca+'--&gt;'"/>
                </iterate>
                <set field="xml" from="xml+'\n&lt;/entity&gt;'"/>
<!--                <log level="warn" message="xml after: ${xml}"/>-->
                <if condition="outputFile">
                    <set field="entityXml" from="entityXml+xml"/>
                </if>
                <if condition="outputFilesToFolder">
                    <script><![CDATA[
                        outputFolder.makeFile(inEntity.fullEntityName + '.xml').putText(xml)
                    ]]></script>
                </if>
<!--                <log level="warn" message="name ${inEntity.fullEntityName} prettyName ${entityDefinition.getPrettyName(null, null)} sqlTableName ${inEntity.tableName}"/>-->
                <set field="entityList" from="entityList+[name:inEntity.fullEntityName,prettyName:entityDefinition.getPrettyName(null, null),tableName:inEntity.tableName,xml:xml]"/>
<!--                <log level="warn" message="entityDefinition: ${entityDefinition} entityInfo ${entityInfo} entityNode ${entityNode} fieldInfos ${fieldInfos} relationshipInfoList ${relationshipInfoList} dependents ${dependents} eecas ${eecas} secas ${secas} entityDescription ${entityDescription}"/>-->
            </iterate>

            <if condition="outputFile">
                <script><![CDATA[entityXml+="</entities>"]]></script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allEntities.xml').putText(entityXml)</script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allEntities.txt').putText(entityXml)</script>
            </if>
        </actions>
    </service>
    <!-- Services -->
    <service verb="get" noun="AllServiceList">
        <in-parameters>
            <parameter name="filterServiceName"/>

            <parameter name="outputFile" type="Boolean" required="true" default="false"/>
            <parameter name="outputFilesToFolder" type="Boolean" required="true" default="false"/>
            <parameter name="outputFolder" default-value="component://getXml/dataset/service"/>
        </in-parameters>
        <out-parameters>
<!--            <parameter name="serviceXml"/>-->
<!--            <parameter name="serviceList" type="List"/>-->
        </out-parameters>
        <actions>
            <set field="serviceXml" value=""/>
            <if condition="outputFile">
                <script><![CDATA[serviceXml+="""<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">"""]]></script>
            </if>

            <set field="knownServiceNames" from="ec.service.knownServiceNames"/>
            <!-- Create auto-services for all entities -->
            <set field="autoServiceNames" from="[]"/>
            <set field="entityNames" from="ec.entity.getAllEntityNames()"/>
            
            <!-- Standard CRUD verbs to generate auto-services for -->
            <iterate list="entityNames" entry="entityName">
                <iterate list="org.moqui.impl.service.runner.EntityAutoServiceRunner.verbSet" entry="verb">

                    <set field="autoServiceName" value="${verb}#${entityName}"/>
                    <script>autoServiceNames.add(autoServiceName)</script>
                </iterate>
            </iterate>
            
            <!-- Add all auto-services to the known service names -->
            <script>knownServiceNames.addAll(autoServiceNames)</script>
            <script>
                if (filterServiceName) {
                    Iterator theIterator = knownServiceNames.iterator()
                    while (theIterator.hasNext()) {
                        String curSn = (String) theIterator.next()
                        if (!curSn.toUpperCase().contains(filterServiceName.toUpperCase())) theIterator.remove()
                    }
                }
            </script>

            <set field="serviceList" from="[]"/>

            <if condition="outputFilesToFolder">
                <set field="outputFolder" from="ec.resource.getLocationReference(outputFolder)"/>
            </if>
<!--            <log level="warn" message="knownServiceNames: ${knownServiceNames}"/>-->
            <iterate list="knownServiceNames" entry="inService">
                <set field="inParameters" from="null"/>
                <set field="outParameters" from="null"/>
                <set field="actions" from="null"/>
                <set field="sd" from="null"/>
                <set field="serviceVerb" from="null"/>
                <set field="serviceNoun" from="null"/>
                <set field="entityName" from="null"/>
                <set field="entityDefinition" from="null"/>
                <set field="entityInfo" from="null"/>
                <set field="fieldInfos" from="null"/>
                <set field="relationshipInfoList" from="null"/>
                <set field="dependents" from="null"/>
                <set field="xml" from="null"/>
                <set field="serviceNode" from="null"/>
                <set field="serviceDescriptionNode" from="null"/>
                <set field="inParameterNode" from="null"/>
                <set field="inParameterNodes" from="null"/>
                <set field="inParameterDescriptionNodes" from="null"/>
                <set field="outParameterNode" from="null"/>
                <set field="outParameterNodes" from="null"/>
                <set field="outParameterDescriptionNodes" from="null"/>
                <set field="actionsNode" from="null"/>
                <set field="secas" from="null"/>
                <set field="eecas" from="null"/>
                
                <set field="sd" from="ec.service.getServiceDefinition(inService)"/>
                <if condition="sd == null &amp;&amp; !inService.contains('${')">
                    <set field="serviceVerb" from="inService.split('#')[0]"/>
                    <set field="serviceNoun" from="inService.split('#')[1]"/>
                    <set field="entityName" from="serviceNoun"/>
                    <set field="entityDefinition" from="ec.entity.getEntityDefinition(entityName)"/>
                    <set field="entityInfo" from="entityDefinition.entityInfo"/>
                    <set field="pkFieldInfos" from="entityInfo.pkFieldInfoArray"/>
                    <set field="nonPkFieldInfos" from="entityInfo.nonPkFieldInfoArray"/>
                    <set field="allFieldInfos" from="entityInfo.allFieldInfoArray"/>
                    <set field="fieldList" from="[]"/>
                    <set field="pkFieldList" from="[]"/>
                    <iterate list="allFieldInfos" entry="fieldInfo">
                        <if condition="!fieldInfo.isLastUpdatedStamp">
                            <if condition="serviceVerb == 'delete'">
                                <if condition="fieldInfo.isPk">
                                    <set field="fieldList" from="fieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/>
                                    <set field="pkFieldList" from="pkFieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/>
                                </if>
                            <else>
                                <set field="fieldList" from="fieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/>
                                <if condition="fieldInfo.isPk">
                                    <set field="pkFieldList" from="pkFieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/>
                                </if>
                            </else>
                            </if>
                        </if>
                    </iterate>
                    <set field="fieldInfos" from="entityInfo.allFieldInfoArray"/>
                    <set field="relationshipInfoList" from="entityDefinition.getRelationshipsInfo(false)"/>
                    <set field="dependents" from="entityDefinition.getDependentsTree()"/>

                    <log level="warn" message="serviceVerb: ${serviceVerb} serviceNoun: ${serviceNoun} entityName: ${entityName} entityDefinition: ${entityDefinition} entityInfo: ${entityInfo} pkFieldInfos: ${pkFieldInfos} nonPkFieldInfos: ${nonPkFieldInfos} allFieldInfos: ${allFieldInfos} fieldInfos: ${fieldInfos} relationshipInfoList: ${relationshipInfoList} dependents: ${dependents}"/>
                    <log level="warn" message="fieldList: ${fieldList}"/>

                    <set field="xml" from="ec.resource.template('component://getXml/template/autoServiceRender.xml.ftl', '.ftl')"/>
                    <log level="warn" message="xml: ${xml}"/>
    
                    <set field="xml" from="xml.replaceAll('&gt;\\s+&lt;', '&gt;&lt;').trim()"/>
                    <if condition="outputFile">
                        <set field="serviceXml" from="serviceXml+'\n'+xml"/>
                    </if>
                    <if condition="outputFilesToFolder">
                        <script><![CDATA[
                            outputFolder.makeFile(inService + '.xml').putText(xml)
                            ]]></script>
                    </if>
    <!--                <log level="warn" message="inService: ${inService}"/>-->
                    <set field="serviceList" from="serviceList+[name:inService,xml:xml]"/>
                    <continue/>
                </if>
                <set field="serviceNode" from="sd.serviceNode"/>
                <set field="serviceDescriptionNode" from="serviceNode.first('description')"/>
                <set field="inParameterNode" from="serviceNode.first('in-parameters')"/>
                <set field="inParameterNodes" from="inParameterNode?.children('parameter')"/>
                <set field="inParameterDescriptionNodes" from="[]"/>
                <iterate list="inParameterNodes" entry="inParameter">
                    <set field="inParameterDescriptionNode" from="inParameter.first('description')"/>
                    <if condition="inParameterDescriptionNode">
                        <set field="inParameterDescriptionNodes" from="inParameterDescriptionNodes+[inParameter]"/>
                    </if>
                </iterate>
                <set field="outParameterNode" from="serviceNode.first('out-parameters')"/>
                <set field="outParameterNodes" from="outParameterNode?.children('parameter')"/>
                <set field="outParameterDescriptionNodes" from="[]"/>
                <iterate list="outParameterNodes" entry="outParameter">
                    <set field="outParameterDescriptionNode" from="outParameter.first('description')"/>
                    <if condition="outParameterDescriptionNode">
                        <set field="outParameterDescriptionNodes" from="outParameterDescriptionNodes+[outParameter]"/>
                    </if>
                </iterate>
                <set field="actionsNode" from="serviceNode.first('actions')"/>
<!--                <set field="inParameterNodes" from="serviceNode.first('in-parameters')?.children('parameter')"/>-->
<!--                <set field="outParameterNodes" from="serviceNode.first('out-parameters')?.children('parameter')"/>-->
                <set field="secas" from="ec.service.secaRulesByServiceName.get(sd.serviceNameNoHash)"/>
<!--                <log level="info" message="inService ${inService}"/>-->

                <if condition="secas">
<!--                    <log level="warn" message="secas: ${secas}"/>-->
                </if>

<!--                <log level="warn" message="context.toString(): ${context.toString()}"/>-->
                <set field="serviceVerb" from="serviceNode.attribute('verb')"/>
                <set field="serviceNoun" from="serviceNode.attribute('noun')"/>
                <if condition="!serviceNoun">
<!--                    <log level="warn" message="inService ${inService} serviceVerb ${serviceVerb} serviceNoun ${serviceNoun}"/>-->
                </if>
                <set field="serviceAttributes" from="serviceNode.attributes"/>
                <iterate list="serviceAttributes" entry="attribute">
                    <if condition="!attribute.key || !attribute.value">
<!--                        <log level="warn" message="inService ${inService} attribute ${attribute}"/>-->
                    </if>
                </iterate>
<!--                <log level="warn" message="inService ${inService} serviceAttributes ${serviceAttributes}"/>-->
                <set field="serviceDescription" from="serviceNode.attribute('description')"/>
                <set field="inParameters" from="inParameterNode.toString()"/>
                <set field="outParameters" from="outParameterNode.toString()"/>
                <set field="actions" from="actionsNode.toString()"/>
                <if condition="actionsNode">
                    <service-call name="XmlServices.fillIn#ServiceDefinitionXmlVariables" in-map="[actionsNode:actionsNode,sd:sd]" out-map="context"/>
                </if>
<!--                <iterate list="actionsNode.descendants('service-call')" entry="action">-->
<!--                    <log level="warn" message="action: ${action}"/>-->
<!--                </iterate>-->

                <set field="xml" from="ec.resource.template('component://getXml/template/serviceRender.xml.ftl', '.ftl')"/>
<!--                <log level="warn" message="xml: ${xml}"/>-->

                <set field="xml" from="xml.replaceAll('&gt;\\s+&lt;', '&gt;&lt;').trim()"/>
                <if condition="outputFile">
                    <set field="serviceXml" from="serviceXml+'\n'+xml"/>
                </if>
                <if condition="outputFilesToFolder">
                    <script><![CDATA[
                        outputFolder.makeFile(inService + '.xml').putText(xml)
                        ]]></script>
                </if>
<!--                <log level="warn" message="inService: ${inService}"/>-->
                <set field="serviceList" from="serviceList+[name:inService,xml:xml,description:serviceDescriptionNode?.first('description')?.text,inParameterDescriptionNodes:inParameterDescriptionNodes,outParameterDescriptionNodes:outParameterDescriptionNodes]"/>
            </iterate>
            <if condition="outputFile">
                <script><![CDATA[serviceXml=serviceXml+"</services>"]]></script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allServices.xml').putText(serviceXml)</script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allServices.txt').putText(serviceXml)</script>
            </if>
        </actions>
    </service>
    <!-- Screens -->
    <!-- TODO: Use ScreenInfo instead of ScreenDefinition here -->
    <service verb="walk" noun="ScreenTree">
        <in-parameters>
            <parameter name="screenNameList" type="List"/>
            <parameter name="rootScreenLocation"/>
        </in-parameters>
        <out-parameters>
            <parameter name="screenNameList" type="List"/>
        </out-parameters>
        <actions>
            <set field="rootScreenDefinition" from="ec.screen.getScreenDefinition(rootScreenLocation)"/>
            <!--            <log level="warn" message="rootScreenDefinition.location: ${rootScreenDefinition.location}"/>-->
            <set field="subscreenList" from="rootScreenDefinition?.getSubscreensItemsSorted()"/>
            <iterate list="subscreenList" entry="subscreen">
                <if condition="subscreen.location == null">
                    <continue/></if>
                <service-call name="XmlServices.walk#ScreenTree" in-map="[rootScreenLocation:subscreen.location,screenNameList:screenNameList]" out-map="context"/>
            </iterate>
            <set field="screenNameList" from="screenNameList+[rootScreenLocation]"/>
        </actions>
    </service>
    <service verb="get" noun="AllScreenList">
        <in-parameters>
            <parameter name="filterScreenName"/>

            <parameter name="outputFile" type="Boolean" required="true" default="false"/>
            <parameter name="outputFilesToFolder" type="Boolean" required="true" default="false"/>
            <parameter name="outputFolder" default-value="component://getXml/dataset/screen"/>
        </in-parameters>
        <out-parameters>
<!--            <parameter name="outScreenXml"/>-->
<!--            <parameter name="screenList" type="List"/>-->
        </out-parameters>
        <actions>
            <script><![CDATA[
                import org.jsoup.Jsoup;
                import org.jsoup.nodes.Document;
                import org.jsoup.nodes.Element;
                import org.jsoup.select.Elements;
                ]]></script>
            <set field="rootScreenLocationList" from="ec.screen.getAllRootScreenLocations()"/>

            <if condition="rootScreenLocationList.size() &gt; 0">
                <service-call name="XmlServices.walk#ScreenTree" in-map="[screenNameList:[], rootScreenLocation:rootScreenLocationList[0]]" out-map="context"/>
            </if>

<!--            <log level="warn" message="screenNameList: ${screenNameList.size()}"/>-->
            <set field="screenNameList" from="screenNameList.unique()"/>
            <log level="warn" message="screenNameList after: ${screenNameList.size()}"/>

            <set field="screenList" from="[]"/>
            <script>
                if (filterScreenName) {
                    Iterator theIterator = screenNameList.iterator()
                    while (theIterator.hasNext()) {
                        String curSn = (String) theIterator.next()
                        if (!curSn.toUpperCase().contains(filterScreenName.toUpperCase())) theIterator.remove()
                    }
                }
            </script>
<!--            <log level="warn" message="screenNameList: ${screenNameList.size()}"/>-->

<!--            <set field="screenNameList" from="screenNameList?.subList(0, 1)"/>-->
            <if condition="outputFilesToFolder">
                <set field="outputFolder" from="ec.resource.getLocationReference(outputFolder)"/>
            </if>

            <set field="outScreenXml" value=""/>
            <iterate list="screenNameList" entry="inScreen">
                <set field="sd" from="ec.screen.getScreenDefinition(inScreen)"/>
                <set field="screenNode" from="sd.screenNode"/>
                <!-- TODO: Remove placeholder screens -->
<!--                <set field="screenInfo" from="new org.moqui.impl.screen.ScreenFacadeImpl.ScreenInfo(sd, null, null, 0)"/>-->
<!--                <log level="warn" message="inScreen ${inScreen} screenInfo.isNonPlaceholder ${screenInfo.isNonPlaceholder}"/>-->


<!--                <log level="warn" message="screenNode: ${screenNode.toString()}"/>-->

                <!--                <log level="warn" message="context.toString(): ${context.toString()}"/>-->

                <set field="xml" from="screenNode.toString()"/>
                <script><![CDATA[
                    xml = "<!-- Screen Location ${inScreen} -->" + xml
                    xml = xml
                            .replaceAll(">\\s+<", "><")
                            .trim();
                    ]]></script>

                <if condition="outputFile">
                    <script><![CDATA[xml+="\n<!-- Screen Location ${inScreen}  -->"]]></script>
                    <set field="outScreenXml" from="outScreenXml+xml"/>
                </if>

                <if condition="outputFilesToFolder">
                    <script><![CDATA[
                        outputFolder.makeFile(inScreen.replaceAll('/', '-')).putText(xml)
                        ]]></script>
                </if>

                <set field="screenList" from="screenList+[name:inScreen,prettyName:sd.defaultMenuName,xml:minified]"/>
            </iterate>
            <if condition="outputFile">
                <script>ec.resource.getLocationReference('component://getXml/dataset/allScreens.xml').putText(outScreenXml)</script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allScreens.txt').putText(outScreenXml)</script>
            </if>
        </actions>
    </service>
    <service verb="find" noun="ParentScreenInfo">
        <in-parameters>
            <parameter name="screenInfoParentList" type="List" default="[]"/>
            <parameter name="screenInfo" type="org.moqui.impl.screen.ScreenFacadeImpl.ScreenInfo" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="screenInfoParentList" type="List"/>
        </out-parameters>
        <actions>
            <set field="screenInfoParentList" from="screenInfoParentList+[screenInfo]"/>
            <service-call name="XmlServices.find#ParentScreenInfo" in-map="[screenInfoParentList:screenInfoParentList, screenInfo:screenInfo.parentScreenInfo]" out-map="context"/>
        </actions>
    </service>
    <service verb="get" noun="AllTransitionList">
        <in-parameters>
            <parameter name="filterScreenName"/>

            <parameter name="outputFile" type="Boolean" required="true" default="false"/>
            <parameter name="outputFilesToFolder" type="Boolean" required="true" default="false"/>
            <parameter name="outputFolder" default-value="component://getXml/dataset/transition"/>
        </in-parameters>
        <out-parameters>
            <!--            <parameter name="outScreenXml"/>-->
            <!--            <parameter name="screenList" type="List"/>-->
        </out-parameters>
        <actions>
            <script><![CDATA[
                import org.jsoup.Jsoup;
                import org.jsoup.nodes.Document;
                import org.jsoup.nodes.Element;
                import org.jsoup.select.Elements;
                ]]></script>
            <set field="rootScreenLocationList" from="ec.screen.getAllRootScreenLocations()"/>

            <if condition="rootScreenLocationList.size() &gt; 0">
                <set field="screenInfoList" from="ec.screen.getScreenInfoList(rootScreenLocationList[0], 100)"/>
            </if>

            <script>
                if (filterScreenName) {
                    Iterator theIterator = screenInfoList.iterator()
                    while (theIterator.hasNext()) {
                        String curSn = (String) theIterator.next().sd.location
                        if (!curSn.toUpperCase().contains(filterScreenName.toUpperCase())) theIterator.remove()
                    }
                }
            </script>

            <!--            <log level="warn" message="screenNameList: ${screenNameList.size()}"/>-->
<!--            <log level="warn" message="screenInfoList after: ${screenInfoList*.name}"/>-->

            <if condition="outputFilesToFolder">
                <set field="outputFolder" from="ec.resource.getLocationReference(outputFolder)"/>
            </if>

            <set field="outTransitionXml" value=""/>
            <iterate list="screenInfoList" entry="screenInfo">
                <set field="sd" from="screenInfo.sd"/>
                <set field="inScreen" from="sd.location"/>
                <set field="screenNode" from="sd.screenNode"/>

                <set field="parameterList" from="screenNode.children('parameter')*.toString()"/>
                <set field="screenActionList" from="[]"/>

<!--                <service-call name="XmlServices.find#ParentScreenInfo" in-map="[screenInfo:screenInfo]" out-map="context"/>-->
                <log level="warn" message="screenInfoParentList: ${screenInfoParentList}"/>


                <set field="screenLevel" from="screenInfo.level"/>
                <set field="usedScreenInfo" from="screenInfo"/>
<!--                <log level="warn" message="usedScreenInfo: ${usedScreenInfo.level}"/>-->
                <while condition="screenLevel &gt;= -1">
<!--                    <log level="warn" message="screenLevel start: ${screenLevel} ${usedScreenInfo.name}"/>-->
                    <set field="alwaysActionsNodeList" from="usedScreenInfo.sd.screenNode.children('always-actions')"/>
                    <if condition="!alwaysActionsNodeList">
<!--                        <log level="warn" message="No alwaysscreenActionList for screenInfo: ${usedScreenInfo.name}"/>-->
                        <set field="beforeLevel" from="usedScreenInfo.level"/>
                        <set field="usedScreenInfo" from="usedScreenInfo.parentInfo?:usedScreenInfo.rootInfo"/>
<!--                        <log level="warn" message="usedScreenInfo: ${usedScreenInfo?.level} ${usedScreenInfo?.name}"/>-->
<!--                        <log level="warn" message="new in: ${usedScreenInfo?.level} ${usedScreenInfo.name}"/>-->
                        <if condition="!beforeLevel == usedScreenInfo?.level">
                            <log level="warn" message="break"/>
                            <break/></if>
<!--                        <log -->
                        <set field="screenLevel" from="usedScreenInfo.level"/>
                        <continue/></if>
                    <set field="alwaysscreenActionList" from="alwaysActionsNodeList.get(0).children*.toString().reverse()"/>
                    <if condition="alwaysscreenActionList"><then>
                        <script><![CDATA[screenActionList +=alwaysscreenActionList+["""<!--always-actions at ${usedScreenInfo.sd.location}-->"""]]]></script>
                    </then><else>
                    </else></if>
                    <set field="usedScreenInfo" from="usedScreenInfo?.parentInfo"/>
                    <set field="screenLevel" from="usedScreenInfo?.level"/>
                </while>
                <script><![CDATA[screenActionList = screenActionList.reverse()]]></script>

<!--                <iterate list ="screenInfoParentList" entry="screenInfoParent">-->
<!--                    -->
<!--                </iterate>-->

<!--                <log level="warn" message="screenActionList: ${screenActionList}"/>-->

                <!--                &lt;!&ndash; TODO: Remove placeholder screens &ndash;&gt;-->
<!--                <log level="warn" message="${inScreen} screenInfo.transitionInfoByName.keySet() ${screenInfo.transitionInfoByName.keySet()}"/>-->

                <set field="transitionInfoNameList" from="screenInfo.transitionInfoByName.keySet()"/>
                <set field="transitionNameExcludeList" from="['formSelectColumns','screenDoc','formSaveFind']"/>
                <iterate list="sd.getAllTransitions()" entry="transitionItem">
                    <set field="transitionName" from="transitionItem.name"/>
                    <if condition="transitionNameExcludeList.contains(transitionName)"><continue/></if>

                    <!--                    <set field="transitionInfo" from="screenInfo.transitionInfoByName[transitionName]"/>-->
                    <set field="transitionNode" from="transitionItem.transitionNode"/>

                    <if condition="transitionNode == null">
<!--                        <log level="warn" message="transitionItem.location ${transitionItem.location} transitionName ${transitionName}"/>-->
                    <else>
<!--                        <log level="warn" message="transitionNode.toString(): ${transitionNode.toString()}"/>-->
                    </else></if>

                    <set field="actionList" from="screenActionList"/>

<!--                    <log level="warn" message="parameterList: ${parameterList}"/>-->

                    <if condition="!transitionNode &amp;&amp; transitionItem.name == 'actions'">
                        <log level="warn" message="transitionItem.location ${transitionItem.location} transitionName ${transitionName}"/>
                        <set field="preActionList" from="screenNode.children('pre-actions')"/>
                        <if condition="preActionList.size() &gt; 0">
                            <script><![CDATA[actionList += ["""<!--pre-actions-->"""]+preActionList.get(0).children*.toString()]]></script>
                        </if>

                        <set field="actionsList" from="screenNode.children('actions')"/>
                        <if condition="actionsList.size() &gt; 0">
                            <script><![CDATA[actionList += ["""<!--actions-->"""]+actionsList.get(0).children*.toString()]]></script>
                        </if>
                    </if>
                    <if condition="transitionNode &amp;&amp; transitionItem.name != 'actions'">
                        <set field="parameterList" from="parameterList+transitionNode.children('parameter')*.toString()"/>
                        <set field="parameterList" from="parameterList+transitionNode.children('path-parameter')*.toString()"/>

                        <set field="transitionServiceCallList" from="transitionNode.children('service-call')"/>
                        <if condition="transitionServiceCallList.size() &gt; 0">
                            <script><![CDATA[actionList += ["""<!--transition service-call-->"""]+transitionServiceCallList.get(0).toString()]]></script>
                        </if>

                        <set field="actionsList" from="transitionNode.children('actions')"/>
                        <set field="actionsList" from="transitionNode.children('actions')"/>
                        <if condition="actionsList.size() &gt; 0">
                            <script><![CDATA[actionList += ["""<!--transition actions-->"""]+actionsList.get(0).children*.toString()]]></script>
                        </if>
                    </if>

                    <set field="xml" from="ec.resource.template('component://getXml/template/transitionRender.xml.ftl', '.ftl')"/>
<!--                    <if condition="transitionItem.name == 'actions'">-->
                        <log level="warn" message="xml: ${xml}"/>
                    <set field="xml" from="xml.replaceAll('&gt;\\s+&lt;', '&gt;&lt;').trim()"/>

                    <if condition="outputFile">
                        <set field="outTransitionXml" from="outTransitionXml+'\n'+xml"/>
                    </if>

                    <if condition="outputFilesToFolder">
                        <script><![CDATA[
                            outputFolder.makeFile((inScreen-'.xml'+'$'+transitionName+'.xml').replaceAll('/', '-')).putText(xml)
                            ]]></script>
                    </if>

                    <!--                    </if>-->
                </iterate>

                <!--                <log level="warn" message="inScreen ${inScreen} screenInfo.isNonPlaceholder ${screenInfo.isNonPlaceholder}"/>-->


                <!--                <log level="warn" message="screenNode: ${screenNode.toString()}"/>-->

                <!--                <log level="warn" message="context.toString(): ${context.toString()}"/>-->

<!--                <set field="xml" from="screenNode.toString()"/>-->
<!--                <script><![CDATA[-->
<!--                    xml = "&lt;!&ndash; Screen Location ${inScreen} &ndash;&gt;" + xml-->
<!--                    xml = xml-->
<!--                            .replaceAll(">\\s+<", "><")-->
<!--                            .trim();-->
<!--                    ]]></script>-->

<!--                <set field="screenList" from="screenList+[name:inScreen,prettyName:sd.defaultMenuName,xml:minified]"/>-->
            </iterate>
            <if condition="outputFile">
                <script>ec.resource.getLocationReference('component://getXml/dataset/allTransitions.xml').putText(outScreenXml)</script>
                <script>ec.resource.getLocationReference('component://getXml/dataset/allTransitions.txt').putText(outScreenXml)</script>
            </if>
        </actions>
    </service>

    <service verb="call" noun="OpenAi" transaction-timeout="86400">
        <in-parameters>
            <parameter name="screen" type="Map">
                <parameter name="name"/>
                <parameter name="prettyName"/>
                <parameter name="xml" allow-html="any"/>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="content"/>
            <parameter name="finishReason"/>
            <parameter name="modelString" default="model.value()"/>
            <parameter name="systemMessage" type="Map"/>
            <parameter name="userMessage" type="Map"/>
            <parameter name="assistantMessage" type="Map"/>
        </out-parameters>
        <actions>
            <script><![CDATA[
                import com.openai.models.ChatCompletion;
                import com.openai.models.ChatCompletionCreateParams;
                import com.openai.models.ChatModel;
                import com.openai.client.OpenAIClient;
                import com.openai.client.okhttp.OpenAIOkHttpClient;
                import com.openai.models.ChatCompletion.Choice;
                import com.openai.models.ChatCompletionMessage;

                OpenAIClient client = OpenAIOkHttpClient.builder()
                        .apiKey("sk-proj-")
                        .build();
                ]]></script>

            <set field="model" from="ChatModel.GPT_4O_MINI_2024_07_18"/>
            <entity-find entity-name="ai.Model" list="modelList">
                <econdition field-name="fullName" from="model.value()"/>
            </entity-find>
            <entity-find entity-name="ai.ModelChat" list="modelChatList">
                <econdition field-name="chatTypeName" from="screen.name"/>
                <econdition field-name="chatTypeEnumId" value="MCT_Screen"/>
            </entity-find>
            <if condition="modelChatList.size() &gt; 0">
                <log level="warn" message="Already have a model chat for screen ${screen.name}"/>
                <return/></if>

            <service-call name="create#ai.ModelChat" in-map="[modelId:modelList?.getFirst()?.modelId,chatTypeEnumId:'MCT_Screen', chatTypeName:screen.name]" out-map="context" transaction="force-new"/>
            <set field="systemMessageContent" value="Given the Moqui screen xml included, answer the question: What does ${screen.prettyName} do through an expert summary"/>
            <set field="userMessageContent" value="Screen Name ${screen.name} xml ${screen.xml}"/>
            <service-call name="create#ai.ModelChatMessage" in-map="[modelChatId:modelChatId, roleTypeEnumId:'MCMR_System', content:systemMessageContent,time:ec.user.nowTimestamp]" out-map="systemMessage" transaction="force-new"/>
            <service-call name="create#ai.ModelChatMessage" in-map="[modelChatId:modelChatId, roleTypeEnumId:'MCMR_User', content:userMessageContent,time:ec.user.nowTimestamp]" out-map="userMessage" transaction="force-new"/>
            <script><![CDATA[
                ChatCompletionCreateParams params = ChatCompletionCreateParams.builder()
                        .addSystemMessage(systemMessageContent)
                        .addUserMessage(userMessageContent)
                        .model(model)
                        .build();
                ChatCompletion chatCompletion = client.chat().completions().create(params);

                // Just get the response from chatCompletion
                ChatCompletion.Choice choice = chatCompletion.choices().get(0)
                ChatCompletionMessage message = choice.message();
                context.content = message.content().get();
                ec.logger.warn("--- content: " + content);
                String finishReason = choice.finishReason();
                ec.logger.warn("--- finishReason: " + finishReason);
                ]]></script>
            <service-call name="create#ai.ModelChatMessage" in-map="[modelChatId:modelChatId, roleTypeEnumId:'MCMR_Assistant',content:content,time:ec.user.nowTimestamp]" out-map="assistantMessage" transaction="force-new"/>
        </actions>
    </service>

    <service verb="get" noun="OpenAiTokenLength">
        <in-parameters>
            <parameter name="text" allow-html="any" required="true"/>
            <parameter name="encoding" default-value="cl100k_base" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="tokenCount" type="Integer"/>
        </out-parameters>
        <actions>
            <script>import com.knuddels.jtokkit.Encodings</script>
            <set field="registry" from="Encodings.newLazyEncodingRegistry()"/>
            <set field="encodingOptional" from="registry?.getEncoding(encoding)"/>

            <set field="tokenCount" from="encodingOptional?.get()?.countTokens(text)"/>
        </actions>
    </service>
    <service verb="get" noun="EstimatedTrainingCost">
        <in-parameters>
            <parameter name="modelToTrain" default-value="gpt-4o-mini-2024-07-18"/>

        </in-parameters>
        <out-parameters>

        </out-parameters>
        <actions>

        </actions>
    </service>
    <service verb="train" noun="OpenAiMessages">
        <in-parameters>
            <parameter name="modelToTrain" default-value="gpt-4o-mini-2024-07-18"/>
        </in-parameters>
        <out-parameters>

        </out-parameters>
        <actions>
            <set field="trainingList" from="[]"/>
            <entity-find-one entity-name="Enumeration" value-field="systemRoleEnum" auto-field-map="[enumId:'MCMR_System']"/>
            <if condition="!systemRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for systemRoleEnum ${systemRoleEnum?.enumId}"/></if>
            <entity-find-one entity-name="Enumeration" value-field="userRoleEnum" auto-field-map="[enumId:'MCMR_User']"/>
            <if condition="!userRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for userRoleEnum ${userRoleEnum?.enumId}"/></if>
            <entity-find-one entity-name="Enumeration" value-field="assistantRoleEnum" auto-field-map="[enumId:'MCMR_Assistant']"/>
            <if condition="!assistantRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for assistantRoleEnum ${assistantRoleEnum?.enumId}"/></if>

            <entity-find entity-name="ai.ModelChat" list="modelChatList">
                <econdition field-name="chatTypeEnumId" value="MCT_Entity"/>
            </entity-find>
            <iterate list="modelChatList" entry="modelChat">
                <entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList">
                    <econdition field-name="modelChatId" from="modelChat.modelChatId"/>
                </entity-find>
                <set field="messages" from="[]"/>
                <set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/>
                <set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/>
                <set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/>
                <if condition="!messageSystem || !messageUser || !messageAssistant">
                    <log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/>
                    <continue/></if>
                <set field="contentFirst" from="messageSystem.content.find(/What is (.+?)\?/, { match, term -> term })"/>
                <set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' entity?']"/>
                <set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant?.content+' '+messageUser?.content]"/>
                <set field="trainingList" from="trainingList+[messages:messages]"/>
            </iterate>

            <entity-find entity-name="ai.ModelChat" list="modelChatList">
                <econdition field-name="chatTypeEnumId" value="MCT_Service"/>
            </entity-find>
            <iterate list="modelChatList" entry="modelChat">
                <entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList">
                    <econdition field-name="modelChatId" from="modelChat.modelChatId"/>
                </entity-find>
                <set field="messages" from="[]"/>
                <set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/>
                <set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/>
                <set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/>
                <if condition="!messageSystem || !messageUser || !messageAssistant">
                    <log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/>
                    <continue/></if>
                <set field="contentFirst" from="messageSystem.content.find(/How can (.+?) be used\?/, { match, term -> term.replaceAll(' be used$', '') })"/>
                <set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' service?']"/>
                <set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant.content+' '+messageUser.content]"/>
                <set field="trainingList" from="trainingList+[messages:messages]"/>
            </iterate>

            <entity-find entity-name="ai.ModelChat" list="modelChatList">
                <econdition field-name="chatTypeEnumId" value="MCT_Screen"/>
            </entity-find>
            <iterate list="modelChatList" entry="modelChat">
                <entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList">
                    <econdition field-name="modelChatId" from="modelChat.modelChatId"/>
                </entity-find>
                <set field="messages" from="[]"/>
                <set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/>
                <set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/>
                <set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/>
                <if condition="!messageSystem || !messageUser || !messageAssistant">
                    <log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/>
                    <log level="warn" message="messageSystem ${messageSystem} messageUser ${messageUser} messageAssistant ${messageAssistant}"/>
                    <continue/></if>
                <set field="contentFirst" from="messageSystem.content.minus('Given the Moqui screen xml included, answer the question: What does ').minus(' do through an expert summary')"/>
                <set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' screen?']"/>
                <set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant.content+' '+messageUser.content+' '+modelChat.chatTypeName]"/>
                <set field="trainingList" from="trainingList+[messages:messages]"/>
            </iterate>

            <set field="json" from="ec.elastic.objectToJsonl(trainingList)"/>
<!--            <log level="warn" message="trainingList: ${json}"/>-->

            <service-call name="XmlServices.get#OpenAiTokenLength" in-map="[text:json]" out-map="context"/>
            <log level="warn" message="tokenCount: ${tokenCount}"/>

            <script>ec.resource.getLocationReference('component://getXml/dataset/output.jsonl').putText(json)</script>
        </actions>
    </service>

    <service verb="render" noun="ServiceJsonToXml">
        <in-parameters>
            <parameter name="json" required="true" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="xml"/>
        </out-parameters>
        <actions>
            <iterate entry="service" list="json.services">
                <iterate list="in_parameters" entry="parameter">
                    <if condition="parameter.default_value == null"><set field="parameter.default_value" value=""/></if>
                    <if condition="parameter.default == null"><set field="parameter.default" value=""/></if>
                </iterate>
                <iterate list="out_parameters" entry="parameter">
                    <if condition="parameter.default == null"><set field="parameter.default" value=""/></if>
                </iterate>
            </iterate>

            <set field="inputOutputList" from="[]"/>

            <log level="warn" message="json: ${json}"/>

            <set field="serviceList" from="json.services"/>

            <!-- Call ftl renderer for component://getXml/template/serviceDeinition.xml.ftl -->
            <set field="xml" from="ec.resource.template('component://getXml/template/serviceDefinition.xml.ftl', '.ftl')"/>
            <log level="warn" message="xml: ${xml}"/>
        </actions>
    </service>

    <service verb="render" noun="ServiceCallJsonToXml">
        <in-parameters>
            <parameter name="json" required="true" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="xml"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="json: ${json}"/>-->
            <set field="inputOutputList" from="[]"/>
            <set field="isActions" from="false"/>
            <set field="nodeList" from="json.services"/>
            <if condition="!nodeList"><set field="isActions" from="true"/><set field="nodeList" from="json.actions"/></if>

            <iterate entry="node" list="nodeList">
                <!-- Find the service call name -->
                <!-- <log level="warn" message="node: ${node}"/> -->
                <set field="inputOutputList" from="inputOutputList+[type:'service-call',name:isActions?node.service_name:node.name,inMapList:node.in_map,outMapList:node.out_map]"/>
            </iterate>
            <service-call name="XmlServices.evaluate#InputOutputList" in-map="[inputOutputList:inputOutputList]" out-map="context"/>

<!--            <log level="warn" message="inputOutputList: ${inputOutputList}"/>-->

            <set field="nodeList" from="inputOutputList"/>

            <!-- Call ftl renderer for component://getXml/template/serviceDeinition.xml.ftl -->
            <set field="xml" from="ec.resource.template('component://getXml/template/nodeList.xml.ftl', '.ftl')"/>
            <log level="warn" message="xml: ${xml}"/>
        </actions>
    </service>

    <service verb="render" noun="OneServiceCallJsonToXml">
        <in-parameters>
            <parameter name="json" required="true" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="xml"/>
        </out-parameters>
        <actions>
<!--            <log level="warn" message="json: ${json}"/>-->
            <set field="inputOutputList" from="[]"/>
            <set field="isActions" from="false"/>
            <set field="node" from="json.services"/>
            <if condition="!node"><set field="isActions" from="true"/><set field="node" from="json.actions"/></if>

            <log level="warn" message="node: ${node}"/>
            <!-- Find the service call name -->
            <set field="inputOutputList" from="inputOutputList+[type:'service-call',name:node.name,inMapList:node.in_map,outMapList:node.out_map]"/>
            <service-call name="XmlServices.evaluate#InputOutputList" in-map="[inputOutputList:inputOutputList]" out-map="context"/>

<!--            <log level="warn" message="inputOutputList: ${inputOutputList}"/>-->

            <set field="nodeList" from="inputOutputList"/>

            <!-- Call ftl renderer for component://getXml/template/serviceDeinition.xml.ftl -->
            <set field="xml" from="ec.resource.template('component://getXml/template/nodeList.xml.ftl', '.ftl')"/>
            <log level="warn" message="xml: ${xml}"/>
        </actions>
    </service>

    <service verb="fillIn" noun="ServiceDefinitionXmlVariables">
        <description>Ensure that no context is never used and for each service call the in and out parameters are fully defined. Ideally use the auto-parameters from the entity with the parameters fully defined.</description>
        <in-parameters>
            <parameter name="actionsNode" type="MNode" required="true"/>
<!--            <parameter name="sd" type="org.moqui.impl.service.ServiceDefinition" required="true"/>-->
        </in-parameters>
        <out-parameters>
            <parameter name="actionsNode" type="MNode"/>
            <parameter name="actions"/>
        </out-parameters>
        <actions>
            <iterate list="actionsNode.descendants('service-call')" entry="action">
                <!-- if action.attribute('out-map') has a , or [ print it -->
                <if condition="action.attribute('out-map')?.contains(',') || action.attribute('out-map')?.contains('[')">
<!--                    <log level="warn" message="action: ${action}"/>-->
                </if>
                <if condition="action.attribute('out-map')">
                    <set field="outMap" value="["/>
                    <!-- TODO: Support enumerating a list type of out-map values -->
                    <set field="sd" from="ec.service.getServiceDefinition(action.attribute('name'))"/>
                    <if condition="!sd"><then>
                        <!-- if ! action.attribute('name') starts with any of org.moqui.impl.service.runner.EntityAutoServiceRunner.verbSet continue with warning -->
                        <if condition="!action.attribute('name').contains('#') &amp;&amp; !org.moqui.impl.service.runner.EntityAutoServiceRunner.verbSet.any { action.attribute('name').startsWith(it) }">
                            <log level="warn" message="No service or entity definition found for name ${action.attribute('name')}"/>
                            <continue/>
                        </if>
                        <set field="entityName" from="action.attribute('name').split('#')[1]"/>
                        <set field="entityDefinition" from="ec.entity.getEntityDefinition(entityName)"/>
                        <if condition="!entityDefinition">
                            <log level="warn" message="No entity definition found for name ${action.attribute('name')}"/> <continue/>
                        </if>

                        <iterate list="entityDefinition.allFieldNames" entry="fieldName">
                            <if condition="!entityDefinition.isField(fieldName)">
                                <log level="warn" message="Field ${fieldName} is not a field of entity ${entityDefinition.entityName}"/>
                                <continue/>
                            </if>
                            <set field="fieldInfo" from="entityDefinition.getFieldInfo(fieldName)"/>
                            <set field="outMap" from="outMap+fieldInfo.name+':'+action.attribute('out-map')+'.'+fieldInfo.name"/>
                            <if condition="_fieldNameIterator.hasNext()"><set field="outMap" from="outMap+','"/></if>
                        </iterate>
<!--                        <log level="warn" message="outMap: ${outMap}"/>-->
                    </then><else>
                        <iterate list="sd.outParameterInfoMap" entry="outParameterInfoMap">
                            <set field="outMap" from="outMap+outParameterInfoMap.key+':'+action.attribute('out-map')+'.'+outParameterInfoMap.value.name"/>
                            <if condition="_outParameterInfoMapIterator.hasNext()"><set field="outMap" from="outMap+','"/></if>
                        </iterate>
                    </else></if>

                    <set field="outMap" value="${outMap}]"/>
                    <script>action.getAttributes().put("out-map", outMap as String);</script>
                </if>
            </iterate>
            <set field="actions" from="actionsNode.toString()"/>
<!--            <log level="warn" message="actions: ${actions}"/>-->
        </actions>
    </service>

    <service verb="evaluate" noun="InputOutputList">
        <in-parameters>
            <parameter name="inputOutputList" type="List">
                <parameter name="type" required="true"/>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="inputOutputList" type="List"/>
        </out-parameters>
        <actions>
            <set field="knownServiceNames" from="ec.service.knownServiceNames"/>
            <iterate list="inputOutputList" entry="inputOutput">
<!--                <log level="warn" message="inputOutput.toString(): ${inputOutput.toString()}"/>-->
                <set field="type" from="inputOutput.type"/>
                <if condition="type == 'service-call'"><then>
                    <set field="filterServiceName" from="inputOutput.name"/>
                    <set field="knownServiceNamesCopy" from="knownServiceNames.collect()"/>
                    <script>
                        if (filterServiceName) {
                            Iterator theIterator = knownServiceNamesCopy.iterator()
                            while (theIterator.hasNext()) {
                                String curSn = (String) theIterator.next()
                                if (!curSn.toUpperCase().contains(filterServiceName.toUpperCase())) theIterator.remove()
                            }
                        }
                    </script>
                    <set field="inService" from="knownServiceNamesCopy[0]"/>
                    <!-- TODO: Do better validation on services and try to find it even if the text is fucked up -->
                    <if condition="!inService">
                        <log level="warn" message="No service found for name ${inputOutput.name}"/>
                        <continue/>
                    </if>
                    <set field="sd" from="ec.service.getServiceDefinition(inService)"/>
                    <if condition="!sd">
                        <log level="warn" message="No service definition found for name ${inService}"/>
                        <continue/>
                    </if>

<!--                    <log level="warn" message="inputOutput.inMapList: ${inputOutput.inMapList}"/>-->
                    <set field="validatePreviousOutMap" from="inputOutput_index != 0"/>
                    <iterate list="inputOutput.inMapList" entry="inMap">
                        <if condition="!sd.inParameterNames.contains(inMap.key)"><then>
                            <set field="inMap.error" value="in_map ${inMap.key} does not exist for service ${inputOutput.name}!"/>
                            <log level="warn" message="${inMap.error}"/>
                        </then><else-if condition="validatePreviousOutMap">
                            <set field="previousInputOutput" from="inputOutputList[inputOutput_index-1]"/>
                            <set field="previousOutMapList" from="previousInputOutput.outMapList"/>

                        </else-if></if>
                    </iterate>

<!--                    <log level="warn" message="inParameterIntersectionList: ${inParameterIntersectionList} sd.inParameterNames: ${sd.inParameterNames} inputOutput.inMapList: ${inputOutput.inMapList}"/>-->

<!--                    <log level="warn" message="inputOutput.outMapList: ${inputOutput.outMapList}"/>-->
                    <!-- If typeof inputOutput.outMapList is a string convert it to a list -->
<!--                    <log level="warn" message="typeof inputOutput.outMapList: ${inputOutput.outMapList.getClass().getName()}"/>-->
<!--                    <log level="warn" message="inputOutput.outMapList.getClass().getName() == 'java.lang.String' ? true : false ${inputOutput.outMapList.getClass().getName() == 'java.lang.String' ? true : false}"/>-->
<!--                    <log level="warn" message="inputOutput.outMapList.getClass().getName() == 'java.lang.String' ? [inputOutput.outMapList] : inputOutput.outMapList*.key ${inputOutput.outMapList.getClass().getName() == 'java.lang.String' ? [inputOutput.outMapList] : inputOutput.outMapList}"/>-->

                    <if condition="inputOutput.outMapList.size() == 0 &amp;&amp; _inputOutputIterator.hasNext()">
                        <log level="warn" message="Must have an out_map for service ${inputOutput.name} when there is another node!"/>
                    </if>
                    <iterate list="inputOutput.outMapList" entry="outMap">
<!--                        <log level="warn" message="outMap: ${outMap}"/>-->
                        <if condition="outMap.getClass().getName() == 'java.lang.String'">
                            <set field="outMapKey" from="outMap"/>
                            <set field="outMap" from="[key:outMapKey,value:outMapKey]"/>
                        </if>
                        <if condition="!sd.outParameterNames.contains(outMap.key)">
                            <set field="outMap.error" value="out_map ${outMap.key} does not exist for service ${inputOutput.name}!"/>
                            <log level="warn" message="${outMap.error}"/>
                        </if>
                    </iterate>
<!--                    <log level="warn" message="outParameterIntersectionList: ${outParameterIntersectionList} sd.outParameterNames: ${sd.outParameterNames} inputOutput.outMapList: ${inputOutput.outMapList}"/>-->
                </then><else-if condition="type == 'entity-find'">

                </else-if><else-if condition="type == 'service'">

                </else-if></if>
            </iterate>
        </actions>
    </service>
</services>
