
<!-- Entity Name: moqui.entity.document.DataDocument sql table: DATA_DOCUMENT --><entity entity-name="DataDocument" package="moqui.entity.document" use="configuration" short-alias="dataDocuments" has-dependents="true">
    <field name="dataDocumentId" type="id" is-pk="true">
        <description><![CDATA[For ElasticSearch compatibility, and as a general good
            practice for use as a dynamic view-entity, must follow entity name convention of camel case and starting with a capital letter.]]></description></field>
    <field name="documentName" type="text-medium">
        <description><![CDATA[The name of the document for display in search
            results and such. Is generally expanded on display and may use any field in the DataDocument.]]></description></field>
    <field name="documentTitle" type="text-medium">
        <description><![CDATA[A title for each document instance for display in
            search results or other places. Meant to be string expanded using a "flattened" version of the document
            (see the CollectionUtilities.flattenNestedMap() method).]]></description></field>
    <field name="indexName" type="text-medium">
        <description><![CDATA[This should be specified for documents that will be indexed by
            ElasticSearch and must be lower-case (ElasticSearch requires all lower-case). Because of changes in ElasticSearch 5
            this is no longer the actual index name and is instead an alias for each index from a DataDocument.]]></description></field>
    <field name="primaryEntityName" type="text-medium"/>
    <field name="manualDataServiceName" type="text-medium">
        <description><![CDATA[Name of a service to call to get additional
            data to include in the document. This service should implement the
            org.moqui.EntityServices.add#ManualDocumentData interface.]]></description></field>
    <field name="manualMappingServiceName" type="text-medium">
        <description><![CDATA[Name of a service to call to alter the generated
            elasticsearch mapping for the data document. This service should implement the
            org.moqui.EntityServices.transform#DocumentMapping interface.]]></description></field>
    <relationship type="many" related="moqui.entity.document.DataDocumentField" short-alias="fields">
        <key-map field-name="dataDocumentId"/></relationship>
    <relationship type="many" related="moqui.entity.document.DataDocumentRelAlias" short-alias="relAliases">
        <key-map field-name="dataDocumentId"/></relationship>
    <relationship type="many" related="moqui.entity.document.DataDocumentCondition" short-alias="conditions">
        <key-map field-name="dataDocumentId"/></relationship>
    <relationship type="many" related="moqui.entity.document.DataDocumentLink" short-alias="links">
        <key-map field-name="dataDocumentId"/></relationship>
    <relationship type="many" related="moqui.entity.feed.DataFeedDocument" short-alias="feeds">
        <key-map field-name="dataDocumentId"/></relationship>
    <master>
        <detail relationship="fields"/>
        <detail relationship="relAliases"/>
        <detail relationship="conditions"/>
        <detail relationship="links"/>
        <detail relationship="feeds">
            <detail relationship="feed"/></detail>
    </master>
    <relationship type="many" related="mantle.product.store.ProductStoreDataDocument" short-alias="storeDataDocuments">
        <key-map field-name="dataDocumentId"/></relationship>
    <field name="lastUpdatedStamp" type="date-time"/>
    <relationship related="mantle.product.store.ProductStore" type="many" is-auto-reverse="true" mutable="true" title="Content">
        <key-map field-name="dataDocumentId" related="contentDataDocumentId"/></relationship>
    <relationship related="mantle.product.store.ProductStore" type="many" is-auto-reverse="true" mutable="true" title="Blog">
        <key-map field-name="dataDocumentId" related="blogDataDocumentId"/></relationship>
    <relationship related="mantle.product.store.ProductStore" type="many" is-auto-reverse="true" mutable="true" title="Product">
        <key-map field-name="dataDocumentId" related="productDataDocumentId"/></relationship>
    <relationship related="moqui.entity.document.DataDocumentUserGroup" type="many" is-auto-reverse="true" mutable="true">
        <key-map field-name="dataDocumentId" related="dataDocumentId"/></relationship>

</entity>