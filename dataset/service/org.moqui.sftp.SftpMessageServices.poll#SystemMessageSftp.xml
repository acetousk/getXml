<!--Service Location org.moqui.sftp.SftpMessageServices.poll#SystemMessageSftp--><service verb="poll" noun="SystemMessageSftp"><in-parameters><parameter name="systemMessageTypeId" required="true"/><parameter name="systemMessageRemoteId" required="true"/><parameter name="fileCountLimit" type="Integer"/></in-parameters><out-parameters><parameter name="fileCount"/></out-parameters><actions><entity-find-one entity-name="moqui.service.message.SystemMessageType" value-field="systemMessageType"/><if condition="systemMessageType == null"><return error="true" message="Could not find SystemMessageType with ID ${systemMessageTypeId}"/></if><entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote"/><if condition="systemMessageRemote == null"><return error="true" message="Could not find SystemMessageRemote with ID ${systemMessageRemoteId}"/></if><script><![CDATA[import org.moqui.sftp.SftpClient
                import java.nio.charset.Charset

                String receivePath = ec.resource.expand(systemMessageType.receivePath, null,
                        [systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId], false)
                Charset charset = Charset.forName(systemMessageRemote.remoteCharset ?: "UTF-8")
                String filePattern = systemMessageType.receiveFilePattern
                String receiveResponseEnumId = systemMessageType.receiveResponseEnumId
                String receiveMovePath = ec.resource.expand(systemMessageType.receiveMovePath, null,
                        [systemMessageTypeId:systemMessageTypeId, systemMessageRemoteId:systemMessageRemoteId], false)

                // use SftpClient to put the file
                String sftpHost = (String) systemMessageRemote.receiveUrl ?: (String) systemMessageRemote.sendUrl
                SftpClient sftpClient = new SftpClient(sftpHost, (String) systemMessageRemote.username)
                if (systemMessageRemote.privateKey) sftpClient.publicKeyPkcs8((String) systemMessageRemote.privateKey, (String) systemMessageRemote.publicKey)
                else sftpClient.password((String) systemMessageRemote.password)

                sftpClient.connect()
                try {
                    ArrayList<String> fullFileList = sftpClient.lsFiles(receivePath)
                    TreeSet<String> fileList = new TreeSet<>()
                    for (String filename in fullFileList) if (!filePattern || filename.matches(filePattern)) fileList.add(filename)
                    ec.logger.info("SFTP Poll type ${systemMessageTypeId} remote ${systemMessageRemoteId} found matching files (${fileList.size()}): ${fileList}")
                    if (fileCountLimit) {
                        TreeSet<String> ltdList = new TreeSet<>()
                        int count = 0
                        for (String filename in fileList) {
                            ltdList.add(filename)
                            count++
                            if (count == fileCountLimit) break
                        }
                        fileList = ltdList
                        ec.logger.info("SFTP Poll type ${systemMessageTypeId} remote ${systemMessageRemoteId} has limit ${fileCountLimit}, getting only files (${fileList.size()}): ${fileList}")
                    }

                    fileCount = fileList.size()

                    for (String filename in fileList) {
                        // check for existing SystemMessage by systemMessageRemoteId, systemMessageTypeId, remoteMessageId==filename
                        if ("MsgRrDelete".equals(receiveResponseEnumId) || "MsgRrMove".equals(receiveResponseEnumId)) {
                            List existingMsgList = ec.entity.find("moqui.service.message.SystemMessage")
                                    .condition("systemMessageRemoteId", systemMessageRemoteId)
                                    .condition("systemMessageTypeId", systemMessageTypeId)
                                    .condition("remoteMessageId", filename)
                                    .condition("statusId", "not-in", "SmsgRejected,SmsgCancelled,SmsgError")
                                    .selectField("systemMessageId").list()
                            if (existingMsgList) {
                                ec.logger.warn("SFTP poll file ${filename} for type ${systemMessageTypeId} remote ${systemMessageRemoteId} already in SystemMessage records ${existingMsgList*.systemMessageId}")
                                continue
                            }
                        }

                        String filePath = receivePath + '/' + filename
                        String messageText = sftpClient.getText(filePath, charset)

                        // create SystemMessage with SystemMessageServices.receive#IncomingSystemMessage
                        // NOTE requireNewTransaction(true) so we make sure the TX is committed before a response like delete or move
                        Map<String, Object> result = ec.service.sync().name("org.moqui.impl.SystemMessageServices.receive#IncomingSystemMessage")
                                .parameter("systemMessageTypeId", systemMessageTypeId).parameter("systemMessageRemoteId", systemMessageRemoteId)
                                .parameter("remoteMessageId", filename).parameter("messageText", messageText).disableAuthz()
                                .requireNewTransaction(true).call()
                        // NOTE: consider trying other files, but if there is an error saving a message it is likely to persist
                        if (ec.message.hasError()) {
                            ec.logger.error("SFTP poll error receiving SystemMessage, stopping poll for type ${systemMessageTypeId} remote ${systemMessageRemoteId}")
                            return
                        }
                        ec.logger.info("SFTP poll type ${systemMessageTypeId} remote ${systemMessageRemoteId} saved file ${filename} in messages ${result.systemMessageIdList}")

                        // response based on receiveResponseEnumId
                        if ("MsgRrDelete".equals(receiveResponseEnumId)) {
                            sftpClient.rm(filePath)
                            ec.logger.info("SFTP poll SystemMessage ${result.systemMessageIdList} type ${systemMessageTypeId} deleted ${filePath}")
                        } else if ("MsgRrMove".equals(receiveResponseEnumId)) {
                            if (receiveMovePath) {
                                String movedTo = sftpClient.moveFile(filePath, receiveMovePath)
                                ec.logger.info("SFTP poll SystemMessage ${result.systemMessageIdList} type ${systemMessageTypeId} moved from ${filePath} to ${movedTo}")
                            } else {
                                ec.logger.error("SFTP poll SystemMessage ${result.systemMessageIdList} created for remote file ${filename} and configured to move but no receiveMovePath set on SystemMessageType ${systemMessageTypeId}")
                            }
                        }
                    }

                } finally {
                    sftpClient.close()
                }]]></script></actions></service>