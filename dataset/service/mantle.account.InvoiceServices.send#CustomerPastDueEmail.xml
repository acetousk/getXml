<!--Service Location mantle.account.InvoiceServices.send#CustomerPastDueEmail--><service verb="send" noun="CustomerPastDueEmail"><in-parameters><parameter name="fromPartyId" required="true"/><parameter name="toPartyId" required="true"/><parameter name="daysPastDue" type="Long" default="7"/><parameter name="daysPastInvoice" type="Long" default="40"/><parameter name="daysLastEmail" type="Long" default="2"/><parameter name="alsoPrimaryEmails" type="Boolean" default="false"/><parameter name="toAddresses"><text-email/></parameter><parameter name="toAddressList" type="List"><parameter name="toAddress"><text-email/></parameter></parameter><parameter name="emailTypeEnumId" default-value="PsetInvoicesPastDue"/></in-parameters><out-parameters/><actions><set field="nowZdt" from="java.time.ZonedDateTime.ofInstant(java.time.Instant.now(), java.time.ZoneId.systemDefault())"/><set field="dueLookBack" from="java.sql.Timestamp.from(nowZdt.minusDays(daysPastDue).toInstant())"/><set field="invoiceLookBack" from="java.sql.Timestamp.from(nowZdt.minusDays(daysPastInvoice).toInstant())"/><entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty"><field-map field-name="partyId" from="toPartyId"/></entity-find-one><set field="toAddressesList" from="toAddressList ?: []"/><if condition="toAddresses"><script><![CDATA[toAddressesList.addAll(toAddresses.split(',').collect({ it.trim() }))]]></script></if><if condition="!toAddressesList"><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="[postalAddressList:emailInfo.postalAddressList,telecomNumberList:emailInfo.telecomNumberList,emailAddressList:emailInfo.emailAddressList,webAddressList:emailInfo.webAddressList]" in-map="[partyId:toPartyId, emailContactMechPurposeId:'EmailBilling', alsoIncludePrimaryPurpose:alsoPrimaryEmails]"/><set field="toAddressesList" from="emailInfo.emailAddressList*.emailAddress"/><entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1"><econdition field-name="partyId" from="toPartyId"/></entity-find><if condition="userAccountList"><set field="toUserId" from="userAccountList[0].userId"/></if></if><if condition="!toAddressesList"><return type="warning" message="No billing email address found for customer party ${toPartyId}, not sending invoices past due email"/></if><entity-find entity-name="mantle.account.invoice.Invoice" list="invoiceList"><econdition field-name="fromPartyId" from="fromPartyId"/><econdition field-name="toPartyId" from="toPartyId"/><econdition field-name="unpaidTotal" operator="greater" from="0.0"/><econdition field-name="statusId" operator="not-in" value="InvoiceInProcess,InvoiceWriteOff,InvoiceCancelled"/><econditions combine="or"><econdition field-name="dueDate" operator="less" from="dueLookBack"/><econdition field-name="invoiceDate" operator="less" from="invoiceLookBack"/></econditions><order-by field-name="invoiceDate"/></entity-find><if condition="!invoiceList"><return type="warning" message="No past due invoices found for customer ${toPartyId} and org ${fromPartyId} with due before ${dueLookBack} or invoice before ${invoiceLookBack}, not sending past due invoices email"/></if><set field="unpaidInvoiceTotal" from="invoiceList.collect({ it.unpaidTotal }).sum()"/><entity-find entity-name="mantle.account.payment.Payment" list="paymentList"><econdition field-name="fromPartyId" from="toPartyId"/><econdition field-name="toPartyId" from="fromPartyId"/><econdition field-name="unappliedTotal" operator="greater" from="0.0"/><econdition field-name="statusId" operator="in" value="PmntDelivered,PmntConfirmed"/><order-by field-name="effectiveDate"/></entity-find><set field="unappliedPaymentTotal" from="paymentList ? paymentList.collect({ it.unappliedTotal }).sum() : 0.0"/><entity-find entity-name="mantle.account.invoice.Invoice" list="creditInvoiceList"><econdition field-name="fromPartyId" from="toPartyId"/><econdition field-name="toPartyId" from="fromPartyId"/><econdition field-name="unpaidTotal" operator="greater" from="0.0"/><econdition field-name="statusId" operator="not-in" value="InvoiceIncoming,InvoiceReceived,InvoiceCancelled"/><order-by field-name="invoiceDate"/></entity-find><set field="creditInvoiceTotal" from="creditInvoiceList ? creditInvoiceList.collect({ it.unpaidTotal }).sum() : 0.0"/><if condition="(unappliedPaymentTotal + creditInvoiceTotal) >= unpaidInvoiceTotal"><return type="warning" message="Unapplied payments total ${unappliedPaymentTotal} plus credit invoice total ${creditInvoiceTotal} covers past due invoices total ${unpaidInvoiceTotal} for customer ${toPartyId} and org ${fromPartyId}, not sending past due invoices email"/></if><if condition="daysLastEmail"><set field="sanityLookBack" from="java.sql.Timestamp.from(nowZdt.minusDays(daysLastEmail).toInstant())"/><entity-find-count entity-name="mantle.account.invoice.InvoiceEmailMessageDetail" count-field="recentEmailCount"><econdition field-name="invoiceId" operator="in" from="invoiceList*.invoiceId"/><econdition field-name="sentDate" operator="greater" from="sanityLookBack"/><econdition field-name="statusId" operator="in" value="ES_SENT,ES_RECEIVED,ES_VIEWED"/></entity-find-count><if condition="recentEmailCount"><return type="warning" message="Found ${recentEmailCount} past due emails sent in last ${daysLastEmail} days for one or more of current past due invoices, not sending past due email for customer ${toPartyId} and org ${fromPartyId}"/></if></if><set field="invoicesByStoreId" from="[:]"/><iterate list="invoiceList" entry="invoice"><service-call name="mantle.account.InvoiceServices.find#InvoiceProductStores" out-map="[productStoreIdSet:findStoreOut.productStoreIdSet]" out-map-add-to-existing="false" in-map="[invoiceId:invoice.invoiceId, invoice:invoice]"/><if condition="findStoreOut.productStoreIdSet"><then><set field="curProductStoreId" from="findStoreOut.productStoreIdSet.first()"/><script><![CDATA[addToListInMap(curProductStoreId, invoice, invoicesByStoreId)]]></script></then><else><message type="warning"><![CDATA[Not sending past due email for invoice ${invoice.invoiceId}, no Product Store found for email configuration]]></message></else></if></iterate><iterate list="invoicesByStoreId" key="productStoreId" entry="storeInvoiceList"><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"><field-map field-name="productStoreId"/></entity-find-one><entity-find entity-name="mantle.product.store.ProductStoreEmail" list="storeEmailList"><date-filter/><econdition field-name="productStoreId"/><econdition field-name="emailTypeEnumId"/></entity-find><iterate list="storeEmailList" entry="storeEmail"><if condition="!storeEmail.emailTemplateId"><continue/></if><set field="bodyParameters" from="[fromPartyId:fromPartyId, toParty:toParty,                             invoiceList:storeInvoiceList, unpaidInvoiceTotal:unpaidInvoiceTotal,                             paymentList:paymentList, unappliedPaymentTotal:unappliedPaymentTotal,                             creditInvoiceList:creditInvoiceList, creditInvoiceTotal:creditInvoiceTotal,                             storeDomain:productStore.storeDomain, profileUrlPath:productStore.profileUrlPath,                             headerImagePath:storeEmail.headerImagePath, detailLinkPath:storeEmail.detailLinkPath]"/><iterate list="toAddressesList" entry="toAddressesCur"><service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" out-map="[messageId:sendOut.messageId,emailMessageId:sendOut.emailMessageId]" out-map-add-to-existing="false" in-map="[emailTemplateId:storeEmail.emailTemplateId, emailTypeEnumId:emailTypeEnumId,                                 toAddresses:toAddressesCur, bodyParameters:bodyParameters, toUserId:toUserId]"/><if condition="sendOut.emailMessageId"><script><![CDATA[for (curInvoice in storeInvoiceList) {
                                ec.service.sync().name("create#mantle.account.invoice.InvoiceEmailMessage")
                                        .parameter("invoiceId", curInvoice.invoiceId)
                                        .parameter("emailMessageId", sendOut.emailMessageId).disableAuthz().call()
                            }]]></script></if><message><![CDATA[Email sent to ${toAddressesCur}${sendOut.emailMessageId ? ', message ID ' + sendOut.emailMessageId : ''}]]></message></iterate></iterate></iterate></actions></service>