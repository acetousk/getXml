<!--Service Location mantle.account.InvoiceServices.create#TimeEntryInvoiceItems--><service verb="create" noun="TimeEntryInvoiceItems"><in-parameters><parameter name="invoiceId" required="true"/><parameter name="workEffortId"><description><![CDATA[If specified filter TimeEntry query by the specified WorkEffort and all WorkEfforts matching on rootWorkEffortId (for projects, etc) or parentWorkEffortId]]></description></parameter><parameter name="timesheetId"><description><![CDATA[If specified get TimeEntry records constrained on it.]]></description></parameter><parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp"><description><![CDATA[Only TimeEntry records before this date will be included. Defaults to now.]]></description></parameter><parameter name="createSingleItem" type="Boolean" default="false"/><parameter name="createItemPerWorker" type="Boolean" default="false"><description><![CDATA[Ignored if createSingleItem=true, dual boolean approach for backward compatibility]]></description></parameter><parameter name="itemTypeEnumId" default-value="ItemTimeEntry"><description><![CDATA[If not specified uses ItemTimeEntry for RaprClient,
                for RaprVendor use ItemHourlyEarnings for Person Worker and ItemTimeEntry for Organization Worker]]></description></parameter><parameter name="currencyUomId" default-value="${ec.user.getPreference('CurrencyDefault') ?: 'USD'}"/><parameter name="ratePurposeEnumId" default-value="RaprClient"><description><![CDATA[If RaprVendor TimeEntry.vendorInvoiceId is
                populated and time entries with it populated are excluded, otherwise with default of RaprClient TimeEntry.invoiceId is used.]]></description></parameter><parameter name="workerPartyId"><description><![CDATA[If specified only include time entries from this Party (matches TimeEntry.partyId)]]></description></parameter><parameter name="vendorPartyId"><description><![CDATA[Matches TimeEntry.vendorPartyId, a Project Vendor or Employer]]></description></parameter></in-parameters><out-parameters><parameter name="invoiceItemCreatedCount" type="Long"/></out-parameters><actions><entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/><entity-find-one entity-name="mantle.party.PartyDetail" value-field="workerParty"><field-map field-name="partyId" from="workerPartyId"/></entity-find-one><if condition="workEffortId"><set field="workEffortIdSet" from="new HashSet()"/><script><![CDATA[workEffortIdSet.add(workEffortId)]]></script><entity-find entity-name="mantle.work.effort.WorkEffort" list="descendantWorkEffortList"><econditions combine="or"><econdition field-name="rootWorkEffortId" from="workEffortId"/><econdition field-name="parentWorkEffortId" from="workEffortId"/></econditions><select-field field-name="workEffortId"/><order-by field-name="workEffortId"/></entity-find><script><![CDATA[if (descendantWorkEffortList) workEffortIdSet.addAll(descendantWorkEffortList*.workEffortId)]]></script></if><if condition="ratePurposeEnumId == 'RaprVendor'"><then><set field="timeEntryInvoiceCondition" from="[vendorInvoiceId:null]"/></then><else><set field="timeEntryInvoiceCondition" from="[invoiceId:null]"/></else></if><entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList"><econdition-object field="timeEntryInvoiceCondition"/><econdition field-name="workEffortId" operator="in" from="workEffortIdSet" ignore-if-empty="true"/><econdition field-name="timesheetId" ignore-if-empty="true"/><econditions combine="or"><econdition field-name="thruDate" operator="less-equals" from="thruDate"/><econdition field-name="thruDate" from="null"/></econditions><econdition field-name="partyId" from="workerPartyId" ignore-if-empty="true"/><econdition field-name="vendorPartyId" ignore-if-empty="true" or-null="true"/><order-by field-name="fromDate"/></entity-find><set field="invoiceItemCreatedCount" from="0" type="Long"/><if condition="createSingleItem"><then><set field="amountTotal" from="0"/><iterate list="timeEntryList" entry="timeEntry"><service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="[amountTotal:getTeaOut.amountTotal,amount:getTeaOut.amount,quantity:getTeaOut.quantity,currencyUomId:getTeaOut.currencyUomId,hourlyAmountTotal:getTeaOut.hourlyAmountTotal,pieceAmountTotal:getTeaOut.pieceAmountTotal,hourlyAmount:getTeaOut.hourlyAmount,pieceAmount:getTeaOut.pieceAmount,hours:getTeaOut.hours,pieceCount:getTeaOut.pieceCount]" out-map-add-to-existing="false" in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/><set field="amountTotal" from="amountTotal + getTeaOut.amountTotal"/></iterate><if condition="amountTotal"><set field="description" value="Time entries for task ${ec.resource.expand('WorkEffortNameTemplate','',workEffort)}"/><service-call name="create#mantle.account.invoice.InvoiceItem" out-map="[invoiceId:iiOut.invoiceId,invoiceItemSeqId:iiOut.invoiceItemSeqId,parentItemSeqId:iiOut.parentItemSeqId,itemTypeEnumId:iiOut.itemTypeEnumId,overrideGlAccountId:iiOut.overrideGlAccountId,assetId:iiOut.assetId,productId:iiOut.productId,otherPartyProductId:iiOut.otherPartyProductId,parentInvoiceId:iiOut.parentInvoiceId,parentInvoiceItemSeqId:iiOut.parentInvoiceItemSeqId,taxableFlag:iiOut.taxableFlag,quantity:iiOut.quantity,quantityUomId:iiOut.quantityUomId,amount:iiOut.amount,description:iiOut.description,itemDate:iiOut.itemDate,isAdjustment:iiOut.isAdjustment,salesOpportunityId:iiOut.salesOpportunityId,taxAuthorityId:iiOut.taxAuthorityId,payrollAdjustmentId:iiOut.payrollAdjustmentId,finAccountId:iiOut.finAccountId,finAccountTransId:iiOut.finAccountTransId,billThruVendorName:iiOut.billThruVendorName,billThruVendorRef:iiOut.billThruVendorRef,lastUpdatedStamp:iiOut.lastUpdatedStamp]" in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,                                 amount:amountTotal, quantity:1, description:description]"/><set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/><iterate list="timeEntryList" entry="timeEntry"><set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/><if condition="rateAmountId"><if condition="ratePurposeEnumId == 'RaprVendor'"><then><set field="timeEntry.vendorInvoiceId" from="invoiceId"/><set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></then><else><set field="timeEntry.invoiceId" from="invoiceId"/><set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></else></if><entity-update value-field="timeEntry"/></if></iterate></if></then><else-if condition="createItemPerWorker"><set field="workerPartyIdSet" from="new TreeSet(timeEntryList*.partyId)"/><iterate list="workerPartyIdSet" entry="curWorkerId"><set field="amountTotal" from="0"/><filter-map-list list="timeEntryList" to-list="curWorkerEntryList"><field-map field-name="partyId" from="curWorkerId"/></filter-map-list><iterate list="curWorkerEntryList" entry="timeEntry"><service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="[amountTotal:getTeaOut.amountTotal,amount:getTeaOut.amount,quantity:getTeaOut.quantity,currencyUomId:getTeaOut.currencyUomId,hourlyAmountTotal:getTeaOut.hourlyAmountTotal,pieceAmountTotal:getTeaOut.pieceAmountTotal,hourlyAmount:getTeaOut.hourlyAmount,pieceAmount:getTeaOut.pieceAmount,hours:getTeaOut.hours,pieceCount:getTeaOut.pieceCount]" out-map-add-to-existing="false" in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/><set field="amountTotal" from="amountTotal + getTeaOut.amountTotal"/></iterate><if condition="amountTotal"><entity-find-one entity-name="mantle.party.PartyDetail" value-field="curWorkerDetail"><field-map field-name="partyId" from="curWorkerId"/></entity-find-one><set field="description" value="Time entries for task ${ec.resource.expand('WorkEffortNameTemplate','',workEffort)} and worker ${ec.resource.expand('PartyNameTemplate','',curWorkerDetail)}"/><service-call name="create#mantle.account.invoice.InvoiceItem" out-map="[invoiceId:iiOut.invoiceId,invoiceItemSeqId:iiOut.invoiceItemSeqId,parentItemSeqId:iiOut.parentItemSeqId,itemTypeEnumId:iiOut.itemTypeEnumId,overrideGlAccountId:iiOut.overrideGlAccountId,assetId:iiOut.assetId,productId:iiOut.productId,otherPartyProductId:iiOut.otherPartyProductId,parentInvoiceId:iiOut.parentInvoiceId,parentInvoiceItemSeqId:iiOut.parentInvoiceItemSeqId,taxableFlag:iiOut.taxableFlag,quantity:iiOut.quantity,quantityUomId:iiOut.quantityUomId,amount:iiOut.amount,description:iiOut.description,itemDate:iiOut.itemDate,isAdjustment:iiOut.isAdjustment,salesOpportunityId:iiOut.salesOpportunityId,taxAuthorityId:iiOut.taxAuthorityId,payrollAdjustmentId:iiOut.payrollAdjustmentId,finAccountId:iiOut.finAccountId,finAccountTransId:iiOut.finAccountTransId,billThruVendorName:iiOut.billThruVendorName,billThruVendorRef:iiOut.billThruVendorRef,lastUpdatedStamp:iiOut.lastUpdatedStamp]" in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId, amount:amountTotal, quantity:1, description:description]"/><set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/><iterate list="curWorkerEntryList" entry="timeEntry"><set field="rateAmountId" from="ratePurposeEnumId == 'RaprVendor' ? timeEntry.vendorRateAmountId : timeEntry.rateAmountId"/><if condition="rateAmountId"><if condition="ratePurposeEnumId == 'RaprVendor'"><then><set field="timeEntry.vendorInvoiceId" from="invoiceId"/><set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></then><else><set field="timeEntry.invoiceId" from="invoiceId"/><set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></else></if><entity-update value-field="timeEntry"/></if></iterate></if></iterate></else-if><else><iterate list="timeEntryList" entry="timeEntry"><service-call name="mantle.work.TimeServices.get#TimeEntryAmount" out-map="[amountTotal:getTeaOut.amountTotal,amount:getTeaOut.amount,quantity:getTeaOut.quantity,currencyUomId:getTeaOut.currencyUomId,hourlyAmountTotal:getTeaOut.hourlyAmountTotal,pieceAmountTotal:getTeaOut.pieceAmountTotal,hourlyAmount:getTeaOut.hourlyAmount,pieceAmount:getTeaOut.pieceAmount,hours:getTeaOut.hours,pieceCount:getTeaOut.pieceCount]" in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry, ratePurposeEnumId:ratePurposeEnumId]"/><service-call name="create#mantle.account.invoice.InvoiceItem" out-map="[invoiceId:iiOut.invoiceId,invoiceItemSeqId:iiOut.invoiceItemSeqId,parentItemSeqId:iiOut.parentItemSeqId,itemTypeEnumId:iiOut.itemTypeEnumId,overrideGlAccountId:iiOut.overrideGlAccountId,assetId:iiOut.assetId,productId:iiOut.productId,otherPartyProductId:iiOut.otherPartyProductId,parentInvoiceId:iiOut.parentInvoiceId,parentInvoiceItemSeqId:iiOut.parentInvoiceItemSeqId,taxableFlag:iiOut.taxableFlag,quantity:iiOut.quantity,quantityUomId:iiOut.quantityUomId,amount:iiOut.amount,description:iiOut.description,itemDate:iiOut.itemDate,isAdjustment:iiOut.isAdjustment,salesOpportunityId:iiOut.salesOpportunityId,taxAuthorityId:iiOut.taxAuthorityId,payrollAdjustmentId:iiOut.payrollAdjustmentId,finAccountId:iiOut.finAccountId,finAccountTransId:iiOut.finAccountTransId,billThruVendorName:iiOut.billThruVendorName,billThruVendorRef:iiOut.billThruVendorRef,lastUpdatedStamp:iiOut.lastUpdatedStamp]" in-map="[invoiceId:invoiceId, itemTypeEnumId:itemTypeEnumId,                                 amount:getTeaOut.amount, quantity:getTeaOut.quantity, description:timeEntry.comments?.take(250),                                 itemDate:timeEntry.thruDate]"/><set field="invoiceItemCreatedCount" from="invoiceItemCreatedCount + 1"/><if condition="ratePurposeEnumId == 'RaprVendor'"><then><set field="timeEntry.vendorInvoiceId" from="invoiceId"/><set field="timeEntry.vendorInvoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></then><else><set field="timeEntry.invoiceId" from="invoiceId"/><set field="timeEntry.invoiceItemSeqId" from="iiOut.invoiceItemSeqId"/></else></if><entity-update value-field="timeEntry"/></iterate></else></if></actions></service>