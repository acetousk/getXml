<!--Service Location mantle.shippo.ShippoServices.make#ShipmentInfo--><service verb="make" noun="ShipmentInfo"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="shipmentRouteSegmentSeqId" required="true"/><parameter name="shippingGatewayConfigId" required="true"/><parameter name="shipment" type="EntityValue" required="true"/><parameter name="routeSegment" type="EntityValue" required="true"/><parameter name="shipmentMethodEnumId"/></in-parameters><out-parameters><parameter name="productStoreId"/><parameter name="overrideName"/><parameter name="overrideCompany"/><parameter name="address_from" type="Object"/><parameter name="address_return" type="Object"/><parameter name="address_to" type="Object"/><parameter name="carrier_account"/><parameter name="servicelevel_token"/></out-parameters><actions><set field="fromPartyId" from="shipment.fromPartyId"/><set field="toPartyId" from="shipment.toPartyId"/><set field="carrierPartyId" from="routeSegment.carrierPartyId"/><set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: routeSegment.shipmentMethodEnumId"/><set field="productStoreId" from="shipment.productStoreId"/><if condition="!productStoreId"><entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList" distinct="true"><econdition field-name="shipmentId"/><select-field field-name="orderId"/></entity-find><set field="orderIdSet" from="new HashSet(shipmentItemSourceList*.orderId)"/><if condition="orderIdSet"><entity-find entity-name="mantle.order.OrderHeader" list="orderHeaderList" distinct="true"><econdition field-name="orderId" operator="in" from="orderIdSet"/><econdition field-name="productStoreId" operator="is-not-null"/><select-field field-name="productStoreId"/></entity-find><set field="productStoreIdSet" from="new HashSet(orderHeaderList*.productStoreId)"/><set field="productStoreId" from="productStoreIdSet ? productStoreIdSet.first() : null"/><if condition="productStoreIdSet.size() > 1"><message type="warning"><![CDATA[For shipment ${shipmentId} found multiple ProductStores ${productStoreIdSet}, using ${productStoreId}]]></message></if></if></if><set field="overrideName" from="null"/><set field="overrideCompany" from="null"/><if condition="productStoreId"><entity-find entity-name="mantle.product.store.ProductStoreSetting" list="nameSettingList" cache="true"><date-filter/><econdition field-name="productStoreId"/><econdition field-name="settingTypeEnumId" value="PsstShipLabelName"/><order-by field-name="-fromDate"/></entity-find><set field="overrideName" from="nameSettingList ? nameSettingList[0].settingValue : null"/><entity-find entity-name="mantle.product.store.ProductStoreSetting" list="companySettingList" cache="true"><date-filter/><econdition field-name="productStoreId"/><econdition field-name="settingTypeEnumId" value="PsstShipLabelCompany"/><order-by field-name="-fromDate"/></entity-find><set field="overrideCompany" from="companySettingList ? companySettingList[0].settingValue : null"/></if><set field="originPostalContactMechId" from="routeSegment.originPostalContactMechId"/><if condition="!originPostalContactMechId && routeSegment.originFacilityId"><service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="[postalContactMechId:facOriginOut.postalContactMechId,telecomContactMechId:facOriginOut.telecomContactMechId]" in-map="[facilityId:routeSegment.originFacilityId]"/><if condition="facOriginOut.postalContactMechId"><set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/><set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/><entity-update value-field="routeSegment"/></if></if><if condition="originPostalContactMechId"><then><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one><if condition="!originPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:fromValidateOut.contactMechId]" in-map="[contactMechId:originPostalContactMechId, partyId:fromPartyId, facilityId:routeSegment.originFacilityId,                                 shippingGatewayConfigId:shippingGatewayConfigId]"/><set field="originPostalContactMechId" from="fromValidateOut.contactMechId"/><set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/><entity-update value-field="routeSegment"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one></if><if condition="overrideName || overrideCompany"><then><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:originAddrOut.addressMap]" in-map="[postalAddress:originPostalAddress, partyId:fromPartyId, isOrigin:true]"/><set field="address_from" from="originAddrOut.addressMap"/><set field="address_from.name" from="overrideName"/><set field="address_from.company" from="overrideCompany"/></then><else><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one><if condition="originPostalAddress.shipGatewayAddressId && originContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_from" from="originPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:originAddrOut.addressMap]" in-map="[postalAddress:originPostalAddress, partyId:fromPartyId, isOrigin:true]"/><set field="address_from" from="originAddrOut.addressMap"/></else></if></else></if></then><else><message error="true"><![CDATA[No origin address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}]]></message></else></if><set field="address_return" from="null"/><set field="returnPostalContactMechId" from="routeSegment.returnPostalContactMechId"/><if condition="!returnPostalContactMechId && productStoreId"><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/><set field="returnPostalContactMechId" from="productStore?.returnPostalContactMechId"/></if><if condition="returnPostalContactMechId"><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="returnPostalAddress"><field-map field-name="contactMechId" from="returnPostalContactMechId"/></entity-find-one><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:returnAddrOut.addressMap]" in-map="[postalAddress:returnPostalAddress, partyId:fromPartyId, isOrigin:false]"/><set field="address_return" from="returnAddrOut.addressMap"/><if condition="overrideName"><set field="address_return.name" from="overrideName"/></if><if condition="overrideCompany"><set field="address_return.company" from="overrideCompany"/></if></if><set field="destPostalContactMechId" from="routeSegment.destPostalContactMechId"/><if condition="!destPostalContactMechId && routeSegment.destinationFacilityId"><service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipDest" out-map="[postalContactMechId:facOriginOut.postalContactMechId,telecomContactMechId:facOriginOut.telecomContactMechId]" in-map="[facilityId:routeSegment.destinationFacilityId]"/><if condition="facOriginOut.postalContactMechId"><set field="destPostalContactMechId" from="facOriginOut.postalContactMechId"/><set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/><entity-update value-field="routeSegment"/></if></if><if condition="destPostalContactMechId"><then><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one><if condition="!destPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:toValidateOut.contactMechId]" in-map="[contactMechId:destPostalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/><set field="destPostalContactMechId" from="toValidateOut.contactMechId"/><set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/><entity-update value-field="routeSegment"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one><if condition="destPostalAddress.shipGatewayAddressId && destPostalAddress.telecomContactMechId &&                         destContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_to" from="destPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:destAddrOut.addressMap]" in-map="[postalAddress:destPostalAddress, partyId:toPartyId, otherPartyId:fromPartyId, isOrigin:false]"/><set field="address_to" from="destAddrOut.addressMap"/></else></if></then><else><message error="true"><![CDATA[No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}]]></message></else></if><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier"/><set field="carrier_account" from="gatewayCarrier?.gatewayAccountId"/><if condition="!carrier_account"><message error="true"><![CDATA[No Shippo account ID found for carrier ${carrierPartyId} in gateway ${shippingGatewayConfigId}]]></message></if><entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierShipmentMethod"/><set field="servicelevel_token" from="carrierShipmentMethod?.gatewayServiceCode"/><if condition="!servicelevel_token"><message error="true"><![CDATA[No Shippo service level code found for carrier ${carrierPartyId} method ${shipmentMethodEnumId}]]></message></if></actions></service>