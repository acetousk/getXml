<!--Service Location XmlServices.get#AllServiceList--><service verb="get" noun="AllServiceList"><in-parameters><parameter name="filterServiceName"/><parameter name="outputFile" type="Boolean" required="true" default="false"/><parameter name="outputFilesToFolder" type="Boolean" required="true" default="false"/><parameter name="outputFolder" default-value="component://getXml/dataset/service"/></in-parameters><out-parameters/><actions><set field="serviceXml" value=""/><if condition="outputFile"><script><![CDATA[serviceXml+="""<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">"""]]></script></if><set field="knownServiceNames" from="ec.service.knownServiceNames"/><set field="autoServiceNames" from="[]"/><set field="entityNames" from="ec.entity.getAllEntityNames()"/><iterate list="entityNames" entry="entityName"><iterate list="org.moqui.impl.service.runner.EntityAutoServiceRunner.verbSet" entry="verb"><set field="autoServiceName" value="${verb}#${entityName}"/><script><![CDATA[autoServiceNames.add(autoServiceName)]]></script></iterate></iterate><script><![CDATA[knownServiceNames.addAll(autoServiceNames)]]></script><script><![CDATA[if (filterServiceName) {
                    Iterator theIterator = knownServiceNames.iterator()
                    while (theIterator.hasNext()) {
                        String curSn = (String) theIterator.next()
                        if (!curSn.toUpperCase().contains(filterServiceName.toUpperCase())) theIterator.remove()
                    }
                }]]></script><set field="serviceList" from="[]"/><if condition="outputFilesToFolder"><set field="outputFolder" from="ec.resource.getLocationReference(outputFolder)"/></if><iterate list="knownServiceNames" entry="inService"><set field="inParameters" from="null"/><set field="outParameters" from="null"/><set field="actions" from="null"/><set field="sd" from="null"/><set field="serviceVerb" from="null"/><set field="serviceNoun" from="null"/><set field="entityName" from="null"/><set field="entityDefinition" from="null"/><set field="entityInfo" from="null"/><set field="fieldInfos" from="null"/><set field="relationshipInfoList" from="null"/><set field="dependents" from="null"/><set field="xml" from="null"/><set field="serviceNode" from="null"/><set field="serviceDescriptionNode" from="null"/><set field="inParameterNode" from="null"/><set field="inParameterNodes" from="null"/><set field="inParameterDescriptionNodes" from="null"/><set field="outParameterNode" from="null"/><set field="outParameterNodes" from="null"/><set field="outParameterDescriptionNodes" from="null"/><set field="actionsNode" from="null"/><set field="secas" from="null"/><set field="eecas" from="null"/><set field="sd" from="ec.service.getServiceDefinition(inService)"/><if condition="sd == null && !inService.contains('${')"><set field="serviceVerb" from="inService.split('#')[0]"/><set field="serviceNoun" from="inService.split('#')[1]"/><set field="entityName" from="serviceNoun"/><set field="entityDefinition" from="ec.entity.getEntityDefinition(entityName)"/><set field="entityInfo" from="entityDefinition.entityInfo"/><set field="pkFieldInfos" from="entityInfo.pkFieldInfoArray"/><set field="nonPkFieldInfos" from="entityInfo.nonPkFieldInfoArray"/><set field="allFieldInfos" from="entityInfo.allFieldInfoArray"/><set field="fieldList" from="[]"/><set field="pkFieldList" from="[]"/><iterate list="allFieldInfos" entry="fieldInfo"><if condition="!fieldInfo.isLastUpdatedStamp"><set field="fieldList" from="fieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/><if condition="fieldInfo.isPk"><set field="pkFieldList" from="pkFieldList+[name:fieldInfo.name,type:ec.entity.getJavaType(fieldInfo.type),required:fieldInfo.isPk?'true':'false']"/></if></if></iterate><set field="fieldInfos" from="entityInfo.allFieldInfoArray"/><set field="relationshipInfoList" from="entityDefinition.getRelationshipsInfo(false)"/><set field="dependents" from="entityDefinition.getDependentsTree()"/><log level="warn" message="serviceVerb: ${serviceVerb} serviceNoun: ${serviceNoun} entityName: ${entityName} entityDefinition: ${entityDefinition} entityInfo: ${entityInfo} pkFieldInfos: ${pkFieldInfos} nonPkFieldInfos: ${nonPkFieldInfos} allFieldInfos: ${allFieldInfos} fieldInfos: ${fieldInfos} relationshipInfoList: ${relationshipInfoList} dependents: ${dependents}"/><log level="warn" message="fieldList: ${fieldList}"/><set field="xml" from="ec.resource.template('component://getXml/template/autoServiceRender.xml.ftl', '.ftl')"/><log level="warn" message="xml: ${xml}"/><set field="xml" from="xml.replaceAll('>\\s+<', '><').trim()"/><if condition="outputFile"><set field="serviceXml" from="serviceXml+'\n'+xml"/></if><if condition="outputFilesToFolder"><script><![CDATA[outputFolder.makeFile(inService + '.xml').putText(xml)]]></script></if><set field="serviceList" from="serviceList+[name:inService,xml:xml]"/><continue/></if><set field="serviceNode" from="sd.serviceNode"/><set field="serviceDescriptionNode" from="serviceNode.first('description')"/><set field="inParameterNode" from="serviceNode.first('in-parameters')"/><set field="inParameterNodes" from="inParameterNode?.children('parameter')"/><set field="inParameterDescriptionNodes" from="[]"/><iterate list="inParameterNodes" entry="inParameter"><set field="inParameterDescriptionNode" from="inParameter.first('description')"/><if condition="inParameterDescriptionNode"><set field="inParameterDescriptionNodes" from="inParameterDescriptionNodes+[inParameter]"/></if></iterate><set field="outParameterNode" from="serviceNode.first('out-parameters')"/><set field="outParameterNodes" from="outParameterNode?.children('parameter')"/><set field="outParameterDescriptionNodes" from="[]"/><iterate list="outParameterNodes" entry="outParameter"><set field="outParameterDescriptionNode" from="outParameter.first('description')"/><if condition="outParameterDescriptionNode"><set field="outParameterDescriptionNodes" from="outParameterDescriptionNodes+[outParameter]"/></if></iterate><set field="actionsNode" from="serviceNode.first('actions')"/><set field="secas" from="ec.service.secaRulesByServiceName.get(sd.serviceNameNoHash)"/><if condition="secas"/><set field="serviceVerb" from="serviceNode.attribute('verb')"/><set field="serviceNoun" from="serviceNode.attribute('noun')"/><if condition="!serviceNoun"/><set field="serviceAttributes" from="serviceNode.attributes"/><iterate list="serviceAttributes" entry="attribute"><if condition="!attribute.key || !attribute.value"/></iterate><set field="serviceDescription" from="serviceNode.attribute('description')"/><set field="inParameters" from="inParameterNode.toString()"/><set field="outParameters" from="outParameterNode.toString()"/><set field="actions" from="actionsNode.toString()"/><if condition="actionsNode"><service-call name="XmlServices.fillIn#ServiceDefinitionXmlVariables" in-map="[actionsNode:actionsNode,sd:sd]" out-map="[actionsNode:context.actionsNode,actions:context.actions]"/></if><set field="xml" from="ec.resource.template('component://getXml/template/serviceRender.xml.ftl', '.ftl')"/><set field="xml" from="xml.replaceAll('>\\s+<', '><').trim()"/><if condition="outputFile"><set field="serviceXml" from="serviceXml+'\n'+xml"/></if><if condition="outputFilesToFolder"><script><![CDATA[outputFolder.makeFile(inService + '.xml').putText(xml)]]></script></if><set field="serviceList" from="serviceList+[name:inService,xml:xml,description:serviceDescriptionNode?.first('description')?.text,inParameterDescriptionNodes:inParameterDescriptionNodes,outParameterDescriptionNodes:outParameterDescriptionNodes]"/></iterate><if condition="outputFile"><script><![CDATA[serviceXml=serviceXml+"</services>"]]></script><script><![CDATA[ec.resource.getLocationReference('component://getXml/dataset/allServices.xml').putText(serviceXml)]]></script><script><![CDATA[ec.resource.getLocationReference('component://getXml/dataset/allServices.txt').putText(serviceXml)]]></script></if></actions></service>