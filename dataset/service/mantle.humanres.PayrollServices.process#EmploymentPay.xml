<!--Service Location mantle.humanres.PayrollServices.process#EmploymentPay--><service verb="process" noun="EmploymentPay"><in-parameters><parameter name="partyRelationshipId" required="true"/><parameter name="timePeriodId" required="true"/><parameter name="payDate" type="Date"><description><![CDATA[Defaults to TimePeriod.thruDate]]></description></parameter><parameter name="invoiceId"/></in-parameters><out-parameters><parameter name="invoiceId"/><parameter name="payDate" type="Date"/><parameter name="payAmount" type="BigDecimal"/><parameter name="netPayAmount" type="BigDecimal"/><parameter name="currencyUomId"/><parameter name="adjustmentList" type="List"/><parameter name="amountByPayrollAdjustmentId" type="Map"/></out-parameters><actions><entity-find entity-name="mantle.humanres.employment.EmploymentPayHistory" list="existingPayHistoryList"><econdition field-name="partyRelationshipId"/><econdition field-name="timePeriodId"/></entity-find><if condition="existingPayHistoryList"><return message="Employment pay already processed for employment ${partyRelationshipId}, time period ${timePeriodId}"/></if><entity-find-one entity-name="mantle.humanres.employment.EmploymentAndRelationship" value-field="employment"/><service-call name="mantle.party.TimeServices.get#TimePeriodInfo" in-map="[timePeriodId:timePeriodId]" out-map="[timePeriod:periodInfo.timePeriod,fromTimestamp:periodInfo.fromTimestamp,thruTimestamp:periodInfo.thruTimestamp,thruTimestampExclusive:periodInfo.thruTimestampExclusive,thruTimestampLate:periodInfo.thruTimestampLate]"/><set field="fromTimestamp" from="periodInfo.fromTimestamp"/><set field="thruTimestamp" from="periodInfo.thruTimestamp"/><entity-find entity-name="mantle.work.time.TimeEntry" list="timeEntryList" for-update="true"><econdition field-name="partyId" from="employment.fromPartyId"/><econdition field-name="clientPartyId" from="employment.toPartyId"/><econdition field-name="invoiceId" operator="is-null"/><econdition field-name="vendorInvoiceId" operator="is-null"/><econdition field-name="fromDate" operator="less-equals" from="thruTimestamp"/></entity-find><iterate list="timeEntryList" entry="timeEntry"><set field="updated" from="false" type="Boolean"/><if condition="timeEntry.clientHourRate == null && timeEntry.rateAmountId != null"><entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="clientHourRateMap" cache="true"><field-map field-name="rateAmountId" from="timeEntry.rateAmountId"/></entity-find-one><set field="timeEntry.clientHourRate" from="clientHourRateMap?.rateAmount"/><set field="updated" from="true" type="Boolean"/></if><if condition="timeEntry.clientPieceRate == null && timeEntry.pieceRateAmountId != null"><entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="clientPieceRateMap" cache="true"><field-map field-name="rateAmountId" from="timeEntry.pieceRateAmountId"/></entity-find-one><set field="timeEntry.clientPieceRate" from="clientPieceRateMap?.rateAmount"/><set field="updated" from="true" type="Boolean"/></if><if condition="timeEntry.vendorHourRate == null && timeEntry.vendorRateAmountId != null"><entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="vendorHourRateMap" cache="true"><field-map field-name="rateAmountId" from="timeEntry.vendorRateAmountId"/></entity-find-one><set field="timeEntry.vendorHourRate" from="vendorHourRateMap?.rateAmount"/><set field="updated" from="true" type="Boolean"/></if><if condition="timeEntry.vendorPieceRate == null && timeEntry.vendorPieceRateAmountId != null"><entity-find-one entity-name="mantle.humanres.rate.RateAmount" value-field="vendorPieceRateMap" cache="true"><field-map field-name="rateAmountId" from="timeEntry.vendorPieceRateAmountId"/></entity-find-one><set field="timeEntry.vendorPieceRate" from="vendorPieceRateMap?.rateAmount"/><set field="updated" from="true" type="Boolean"/></if><if condition="updated"><entity-update value-field="timeEntry"/></if></iterate><service-call name="mantle.humanres.PayrollServices.get#EmploymentPayDetail" in-map="context" out-map="[payAmount:context.payAmount,currencyUomId:context.currencyUomId,salaryFlag:context.salaryFlag,timeEntryList:context.timeEntryList,employment:context.employment,employee:context.employee,homePostalAddress:context.homePostalAddress,emplPosition:context.emplPosition,timePeriod:context.timePeriod,payDate:context.payDate,adjustmentList:context.adjustmentList,netPayAmount:context.netPayAmount,taxablePayAmount:context.taxablePayAmount,socialTaxablePayAmount:context.socialTaxablePayAmount,medicalTaxablePayAmount:context.medicalTaxablePayAmount,disposablePayAmount:context.disposablePayAmount,taxableYtdIncome:context.taxableYtdIncome,socialTaxableYtdIncome:context.socialTaxableYtdIncome,medicalTaxableYtdIncome:context.medicalTaxableYtdIncome]"/><if condition="!payAmount"><return message="Employee has no pay for employment ${partyRelationshipId}, time period ${timePeriodId}"/></if><if condition="!invoiceId"><service-call name="create#mantle.account.invoice.Invoice" out-map="[invoiceId:context.invoiceId,invoiceTypeEnumId:context.invoiceTypeEnumId,fromPartyId:context.fromPartyId,toPartyId:context.toPartyId,statusId:context.statusId,billingAccountId:context.billingAccountId,invoiceDate:context.invoiceDate,dueDate:context.dueDate,settlementTermId:context.settlementTermId,paidDate:context.paidDate,invoiceMessage:context.invoiceMessage,referenceNumber:context.referenceNumber,otherPartyOrderId:context.otherPartyOrderId,description:context.description,currencyUomId:context.currencyUomId,overrideOrgPartyId:context.overrideOrgPartyId,productStoreId:context.productStoreId,partyRelationshipId:context.partyRelationshipId,timePeriodId:context.timePeriodId,acctgTransResultEnumId:context.acctgTransResultEnumId,systemMessageRemoteId:context.systemMessageRemoteId,externalId:context.externalId,originId:context.originId,invoiceTotal:context.invoiceTotal,appliedPaymentsTotal:context.appliedPaymentsTotal,unpaidTotal:context.unpaidTotal,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[invoiceTypeEnumId:'InvoicePayroll', fromPartyId:employment.fromPartyId, toPartyId:employment.toPartyId,                         statusId:'InvoiceReceived', invoiceDate:payDate, currencyUomId:currencyUomId,                         partyRelationshipId:partyRelationshipId, timePeriodId:timePeriodId]"/></if><service-call name="create#mantle.account.invoice.InvoiceItem" out-map="[invoiceId:payIiOut.invoiceId,invoiceItemSeqId:payIiOut.invoiceItemSeqId,parentItemSeqId:payIiOut.parentItemSeqId,itemTypeEnumId:payIiOut.itemTypeEnumId,overrideGlAccountId:payIiOut.overrideGlAccountId,assetId:payIiOut.assetId,productId:payIiOut.productId,otherPartyProductId:payIiOut.otherPartyProductId,parentInvoiceId:payIiOut.parentInvoiceId,parentInvoiceItemSeqId:payIiOut.parentInvoiceItemSeqId,taxableFlag:payIiOut.taxableFlag,quantity:payIiOut.quantity,quantityUomId:payIiOut.quantityUomId,amount:payIiOut.amount,description:payIiOut.description,itemDate:payIiOut.itemDate,isAdjustment:payIiOut.isAdjustment,salesOpportunityId:payIiOut.salesOpportunityId,taxAuthorityId:payIiOut.taxAuthorityId,payrollAdjustmentId:payIiOut.payrollAdjustmentId,finAccountId:payIiOut.finAccountId,finAccountTransId:payIiOut.finAccountTransId,billThruVendorName:payIiOut.billThruVendorName,billThruVendorRef:payIiOut.billThruVendorRef,lastUpdatedStamp:payIiOut.lastUpdatedStamp]" in-map="[invoiceId:invoiceId, amount:payAmount, quantity:1,                         itemTypeEnumId:(emplPosition.salaryFlag == 'Y' ? 'ItemSalary' : 'ItemHourlyEarnings'),                         description:ec.resource.expand('PayrollInvoicePayDescription', '', [emplPosition:emplPosition, timePeriod:timePeriod])]"/><set field="amountByPayrollAdjustmentId" from="[:]"/><iterate list="adjustmentList" entry="adjustment"><if condition="adjustment.isEmployerPaid != 'Y'"><service-call name="create#mantle.account.invoice.InvoiceItem" in-map="[invoiceId:invoiceId, itemTypeEnumId:adjustment.itemTypeEnumId,                                 overrideGlAccountId:adjustment.overrideGlAccountId, description:adjustment.description,                                 amount:adjustment.amount, quantity:adjustment.quantity, quantityUomId:adjustment.quantityUomId,                                 taxAuthorityId:adjustment.taxAuthorityId, payrollAdjustmentId:adjustment.payrollAdjustmentId]"/></if><set field="adjTotal" from="adjustment.quantity * adjustment.amount"/><script><![CDATA[if (adjustment.payrollAdjustmentId) addToBigDecimalInMap(adjustment.payrollAdjustmentId, -adjTotal, amountByPayrollAdjustmentId)]]></script></iterate><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="[invoiceTotal:totalOut.invoiceTotal,appliedPaymentsTotal:totalOut.appliedPaymentsTotal,unpaidTotal:totalOut.unpaidTotal]"/><if condition="netPayAmount != totalOut.invoiceTotal"><return error="true" message="For employment [${partyRelationshipId}] invoice total [${totalOut.invoiceTotal}] did not match net pay [${netPayAmount}]"/></if><service-call name="create#mantle.humanres.employment.EmploymentPayHistory" in-map="[partyRelationshipId:partyRelationshipId, payDate:payDate, timePeriodId:timePeriodId,                         invoiceId:invoiceId, internalPayroll:'Y', payAmount:payAmount, taxablePayAmount:taxablePayAmount,                         socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,                         netPayAmount:netPayAmount, disposablePayAmount:disposablePayAmount, taxableYtdIncome:taxableYtdIncome,                         socialTaxableYtdIncome:socialTaxableYtdIncome, medicalTaxableYtdIncome:medicalTaxableYtdIncome,                         currencyUomId:currencyUomId]"/><iterate list="adjustmentList" entry="adjustment"><service-call name="create#mantle.humanres.employment.EmploymentPayDetail" in-map="[partyRelationshipId:partyRelationshipId, payDate:payDate,                             payrollAdjustmentId:adjustment.payrollAdjustmentId, adjCalcServiceId:adjustment.adjCalcServiceId,                             itemTypeEnumId:adjustment.itemTypeEnumId, quantity:adjustment.quantity, amount:adjustment.amount,                             isEmployerPaid:adjustment.isEmployerPaid, taxAuthorityId:adjustment.taxAuthorityId,                             payeePartyId:adjustment.payeePartyId, payeeReference:adjustment.payeeReference]"/></iterate><iterate list="timeEntryList" entry="timeEntry"><set field="timeEntry.vendorInvoiceId" from="invoiceId"/><entity-update value-field="timeEntry"/></iterate></actions></service>