<!--Service Location mantle.account.PaymentServices.apply#InvoiceToInvoice--><service verb="apply" noun="InvoiceToInvoice"><in-parameters><parameter name="invoiceId" required="true"/><parameter name="toInvoiceId" required="true"/><parameter name="amount" type="BigDecimal"><description><![CDATA[Defaults to the lesser of unpaidTotal on the two Invoices.
                Actual amountApplied will never be greater than unpaidTotal of either Invoice.]]></description></parameter><parameter name="billingAccountId"/><parameter name="overrideGlAccountId"/></in-parameters><out-parameters><parameter name="paymentApplicationId"/><parameter name="amountApplied" type="BigDecimal"/></out-parameters><actions><entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/><entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="toInvoice"><field-map field-name="invoiceId" from="toInvoiceId"/></entity-find-one><set field="amountApplied" from="0.0"/><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="[invoiceTotal:totalOut.invoiceTotal,appliedPaymentsTotal:totalOut.appliedPaymentsTotal,unpaidTotal:totalOut.unpaidTotal]"/><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:toInvoiceId]" out-map="[invoiceTotal:toTotalOut.invoiceTotal,appliedPaymentsTotal:toTotalOut.appliedPaymentsTotal,unpaidTotal:toTotalOut.unpaidTotal]"/><if condition="!amount || amount > totalOut.unpaidTotal"><set field="amount" from="totalOut.unpaidTotal"/></if><if condition="amount > toTotalOut.unpaidTotal"><set field="amount" from="toTotalOut.unpaidTotal"/></if><if condition="amount == 0.0"><entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList"><econdition field-name="invoiceId"/><econdition field-name="toInvoiceId"/></entity-find><if condition="paymentApplicationList?.size() == 1"><set field="paymentApplicationId" from="paymentApplicationList[0].paymentApplicationId"/></if><return/></if><if condition="invoice.currencyUomId != toInvoice.currencyUomId"><message error="true"><![CDATA[Cannot apply invoice ${invoiceId} to invoice ${toInvoiceId}, from invoice has a different currency (${invoice.currencyUomId}) than to invoice (${toInvoice.currencyUomId})]]></message></if><if condition="invoice.fromPartyId != toInvoice.toPartyId"><message error="true"><![CDATA[Cannot apply invoice ${invoiceId} to invoice ${toInvoiceId}, from invoice is from a different party (${invoice.fromPartyId}) than to invoice is to (${toInvoice.toPartyId})]]></message></if><if condition="invoice.toPartyId != toInvoice.fromPartyId"><message error="true"><![CDATA[Cannot apply invoice ${invoiceId} to invoice ${toInvoiceId}, from invoice is to a different party (${invoice.toPartyId}) than to invoice is from (${toInvoice.fromPartyId})]]></message></if><check-errors/><if condition="!(invoice.statusId in ['InvoiceFinalized', 'InvoiceSent', 'InvoiceAcked', 'InvoicePmtRecvd', 'InvoiceApproved', 'InvoicePmtSent', 'InvoiceWriteOff'])"><log level="warn" message="Not applying invoice ${invoiceId} in status ${invoice.statusId} to invoice ${toInvoiceId} stack: ${ec.artifactExecution.getStackNameString()}"/><return message="Not applying invoice ${invoiceId} in status ${invoice.statusId} to invoice ${toInvoiceId}, from invoice must be Finalized, Sent, Acknowledged, or Payment Received for Receivable OR Approved or Payment Sent for Payable"/></if><if condition="!(toInvoice.statusId in ['InvoiceFinalized', 'InvoiceSent', 'InvoiceAcked', 'InvoicePmtRecvd', 'InvoiceApproved', 'InvoicePmtSent', 'InvoiceWriteOff'])"><log level="warn" message="Not applying invoice ${invoiceId} to invoice ${toInvoiceId} in status ${toInvoice.statusId} stack: ${ec.artifactExecution.getStackNameString()}"/><return message="Not applying invoice ${invoiceId} to invoice ${toInvoiceId} in status ${toInvoice.statusId}, to invoice must be Finalized, Sent, Acknowledged, or Payment Received for Receivable OR Approved or Payment Sent for Payable"/></if><service-call name="mantle.account.PaymentServices.check#InvoiceStatusForPayment" in-map="[invoiceId:invoiceId]"/><service-call name="mantle.account.PaymentServices.check#InvoiceStatusForPayment" in-map="[invoiceId:toInvoiceId]"/><set field="amountApplied" from="amount"/><set field="appliedDate" from="invoice.invoiceDate != null && toInvoice.invoiceDate != null ?                     (invoice.invoiceDate > toInvoice.invoiceDate ? invoice.invoiceDate : toInvoice.invoiceDate) :                     (invoice.invoiceDate ?: toInvoice.invoiceDate ?: ec.user.nowTimestamp)"/><service-call name="create#mantle.account.payment.PaymentApplication" out-map="[paymentApplicationId:context.paymentApplicationId,paymentId:context.paymentId,invoiceId:context.invoiceId,billingAccountId:context.billingAccountId,overrideGlAccountId:context.overrideGlAccountId,toPaymentId:context.toPaymentId,toInvoiceId:context.toInvoiceId,taxAuthGeoId:context.taxAuthGeoId,amountApplied:context.amountApplied,amountOriginallyApplied:context.amountOriginallyApplied,appliedDate:context.appliedDate,acctgTransResultEnumId:context.acctgTransResultEnumId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[invoiceId:invoiceId, toInvoiceId:toInvoiceId, billingAccountId:billingAccountId,                         overrideGlAccountId:overrideGlAccountId, amountApplied:amountApplied,                         appliedDate:appliedDate]"/><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:invoiceId]" out-map="[invoiceTotal:afterOut.invoiceTotal,appliedPaymentsTotal:afterOut.appliedPaymentsTotal,unpaidTotal:afterOut.unpaidTotal]"/><entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/><if condition="afterOut.unpaidTotal == 0.0"><then><if condition="invoice.statusId in ['InvoiceFinalized', 'InvoiceSent', 'InvoiceAcked']"><then><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoicePmtRecvd']"/></then><else-if condition="invoice.statusId == 'InvoiceApproved'"><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:invoiceId, statusId:'InvoicePmtSent']"/></else-if></if></then><else><log message="After apply invoice ${invoiceId} to invoice ${toInvoiceId} not setting to Payment Sent/Received because from invoice unpaidTotal is ${afterOut.unpaidTotal}"/></else></if><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:toInvoiceId]" out-map="[invoiceTotal:toAfterOut.invoiceTotal,appliedPaymentsTotal:toAfterOut.appliedPaymentsTotal,unpaidTotal:toAfterOut.unpaidTotal]"/><entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="toInvoice"><field-map field-name="invoiceId" from="toInvoiceId"/></entity-find-one><if condition="toAfterOut.unpaidTotal == 0.0"><then><if condition="toInvoice.statusId in ['InvoiceFinalized', 'InvoiceSent', 'InvoiceAcked']"><then><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:toInvoiceId, statusId:'InvoicePmtRecvd']"/></then><else-if condition="toInvoice.statusId == 'InvoiceApproved'"><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:toInvoiceId, statusId:'InvoicePmtSent']"/></else-if></if></then><else><log message="After apply invoice ${invoiceId} to invoice ${toInvoiceId} not setting to Payment Sent/Received because to invoice unpaidTotal is ${toAfterOut.unpaidTotal}"/></else></if></actions></service>