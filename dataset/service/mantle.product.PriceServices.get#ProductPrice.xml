<!--Service Location mantle.product.PriceServices.get#ProductPrice--><service verb="get" noun="ProductPrice"><in-parameters><parameter name="productId" required="true" entity-name="mantle.product.ProductPrice" field-name="productId"/><parameter name="quantity" type="BigDecimal" default="1.0"/><parameter name="validDate" type="Timestamp" default="ec.user.nowTimestamp"/><parameter name="priceUomId" default="ec.user.getPreference('CurrencyDefault') ?: 'USD'" entity-name="mantle.product.ProductPrice" field-name="priceUomId"/><parameter name="pricePurposeEnumId" default-value="PppPurchase" entity-name="mantle.product.ProductPrice" field-name="pricePurposeEnumId"/><parameter name="productStoreId" entity-name="mantle.product.ProductPrice" field-name="productStoreId"/><parameter name="vendorPartyId" entity-name="mantle.product.ProductPrice" field-name="vendorPartyId"/><parameter name="customerPartyId" entity-name="mantle.product.ProductPrice" field-name="customerPartyId"/><parameter name="defaultToListPrice" type="Boolean" default="true"/></in-parameters><out-parameters><parameter name="price" type="BigDecimal" entity-name="mantle.product.ProductPrice" field-name="price"/><parameter name="productPriceId" entity-name="mantle.product.ProductPrice" field-name="productPriceId"/><parameter name="listPrice" type="BigDecimal"/><parameter name="listProductPriceId"/><parameter name="priceUomId" entity-name="mantle.product.ProductPrice" field-name="priceUomId"/></out-parameters><actions><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:currentOut.price,productPriceId:currentOut.productPriceId,priceUomId:currentOut.priceUomId]" in-map="context + [priceTypeEnumId:'PptCurrent']"/><set field="productPriceId" from="currentOut.productPriceId"/><set field="price" from="currentOut.price"/><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:listOut.price,productPriceId:listOut.productPriceId,priceUomId:listOut.priceUomId]" in-map="context + [priceTypeEnumId:'PptList']"/><set field="listProductPriceId" from="listOut.productPriceId"/><set field="listPrice" from="listOut.price"/><if condition="!price || !listPrice"><entity-find entity-name="mantle.product.ProductAssoc" list="varAssocList"><date-filter/><econdition field-name="productAssocTypeEnumId" value="PatVariant"/><econdition field-name="toProductId" from="productId"/></entity-find><if condition="varAssocList"><set field="virtualProductId" from="varAssocList[0].productId"/><if condition="!price"><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:currentOut.price,productPriceId:currentOut.productPriceId,priceUomId:currentOut.priceUomId]" out-map-add-to-existing="false" in-map="context + [productId:virtualProductId, priceTypeEnumId:'PptCurrent']"/><set field="productPriceId" from="currentOut.productPriceId"/><set field="price" from="currentOut.price"/></if><if condition="!listPrice"><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:listOut.price,productPriceId:listOut.productPriceId,priceUomId:listOut.priceUomId]" out-map-add-to-existing="false" in-map="context + [productId:virtualProductId, priceTypeEnumId:'PptList']"/><set field="listProductPriceId" from="listOut.productPriceId"/><set field="listPrice" from="listOut.price"/></if></if></if><if condition="defaultToListPrice && !price"><set field="price" from="listPrice ?: BigDecimal.ZERO"/></if><entity-find entity-name="mantle.product.ProductPriceModify" list="priceModifyList" cache="true"><order-by field-name="sequenceNum"/></entity-find><script><![CDATA[for (priceModify in priceModifyList) { try {
                Map parmMap = new HashMap(context)
                List modParameterList = priceModify.parameters
                for (modParameter in modParameterList) parmMap.put(modParameter.parameterName, modParameter.parameterValue)

                Map serviceRegister = priceModify.serviceRegister
                Map result = ec.service.sync().name(serviceRegister.serviceName).parameters(parmMap).disableAuthz().call()
                // ec.logger.warn("Ran price service ${serviceRegister.serviceName} result: ${result}")
                if (!ec.message.hasError()) ec.context.putAll(result)
            } catch (Throwable t) {
                ec.logger.log(300, "Error calling price modify ${priceModify.priceModifyId}", t)
            } }]]></script></actions></service>