<!--Service Location mantle.shippo.ShippoServices.get#ShippingRatesBulk--><service verb="get" noun="ShippingRatesBulk"><in-parameters><parameter name="shippingGatewayConfigId" required="true"/><parameter name="carrierShipmentMethodList" type="List" required="true"><parameter name="carrierMethodMap" type="Map"><parameter name="carrierPartyId" required="true"/><parameter name="shipmentMethodEnumId" required="true"/></parameter></parameter><parameter name="fromPartyId" required="true"/><parameter name="toPartyId" required="true"/><parameter name="originFacilityId"/><parameter name="originPostalContactMechId" required="true"/><parameter name="destPostalContactMechId" required="true"/><parameter name="packageInfoList" type="List"><description><![CDATA[See get#AutoPackageInfo interface for details]]></description><parameter name="packageInfo" type="Map"/></parameter><parameter name="productStoreId"/><parameter name="vendorPartyId"/><parameter name="currencyUomId" default="ec.user.getPreference('CurrencyDefault') ?: 'USD'"/></in-parameters><out-parameters><parameter name="shippingRateInfoList" type="List"><description><![CDATA[Depending on implementation not all fields may be populated; if no rate is available don't include in list]]></description><parameter name="rateInfo" type="Map"><parameter name="carrierPartyId" required="true"/><parameter name="shipmentMethodEnumId" required="true"/><parameter name="shippingTotal" required="true"/><parameter name="currency"/><parameter name="days" type="Integer"/><parameter name="durationTerms"/><parameter name="serviceName"/><parameter name="carrierImageUrl"/></parameter></parameter><parameter name="originPostalContactMechId"><description><![CDATA[Return if address was validated and replaced]]></description></parameter><parameter name="destPostalContactMechId"><description><![CDATA[Return if address was validated and replaced]]></description></parameter><parameter name="rateInfoByServiceLevelByPackage" type="Map"/></out-parameters><actions><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not getting rates"/><return/></if><if condition="!packageInfoList"><return message="No package info found, not getting Shippo shipping rates"/></if><if condition="!carrierShipmentMethodList"><return message="No carrier/method list, not getting Shippo shipping rates"/></if><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one><if condition="!originPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:fromValidateOut.contactMechId]" in-map="[contactMechId:originPostalContactMechId, partyId:fromPartyId, facilityId:originFacilityId,                             shippingGatewayConfigId:shippingGatewayConfigId]"/><set field="originPostalContactMechId" from="fromValidateOut.contactMechId"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech"><field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one><if condition="originPostalAddress.shipGatewayAddressId && originContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_from" from="originPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:originAddrOut.addressMap]" in-map="[postalAddress:originPostalAddress, partyId:fromPartyId, isOrigin:true]"/><set field="address_from" from="originAddrOut.addressMap"/></else></if><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one><if condition="!destPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:toValidateOut.contactMechId]" in-map="[contactMechId:destPostalContactMechId, partyId:toPartyId, orderId:orderId, shipmentId:shipmentId,                             shippingGatewayConfigId:shippingGatewayConfigId]"/><set field="destPostalContactMechId" from="toValidateOut.contactMechId"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech"><field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one><if condition="destPostalAddress.shipGatewayAddressId && destContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_to" from="destPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:destAddrOut.addressMap]" in-map="[postalAddress:destPostalAddress, partyId:toPartyId, isOrigin:false]"/><set field="address_to" from="destAddrOut.addressMap"/></else></if><set field="carrier_accounts" from="[]"/><set field="carrierPartyIdSet" from="new HashSet()"/><set field="carrierMethodByServiceLevel" from="[:]"/><iterate list="carrierShipmentMethodList" entry="carrierMethod"><if condition="!carrierPartyIdSet.contains(carrierMethod.carrierPartyId)"><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier" cache="true"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="carrierPartyId" from="carrierMethod.carrierPartyId"/></entity-find-one><if condition="gatewayCarrier?.gatewayAccountId"><then><script><![CDATA[carrier_accounts.add(gatewayCarrier.gatewayAccountId)]]></script></then><else/></if><script><![CDATA[carrierPartyIdSet.add(carrierMethod.carrierPartyId)]]></script></if><entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierMethodValue" cache="true"><field-map field-name="carrierPartyId" from="carrierMethod.carrierPartyId"/><field-map field-name="shipmentMethodEnumId" from="carrierMethod.shipmentMethodEnumId"/></entity-find-one><if condition="carrierMethodValue?.gatewayServiceCode"><then><script><![CDATA[carrierMethodByServiceLevel.put(carrierMethodValue.gatewayServiceCode, carrierMethodValue)]]></script></then><else/></if></iterate><if condition="!carrierMethodByServiceLevel"><set field="shippingRateInfoList" from="[]"/><return/></if><set field="requestMapList" from="[]"/><set field="requestPackageIdList" from="[]"/><iterate list="packageInfoList" entry="packageInfo"><entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType"><field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one><if condition="boxType == null"><message><![CDATA[Package has no box type, skipping]]></message><continue/></if><set field="dimUom" from="boxType.dimensionUom"/><if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null"><message><![CDATA[Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package]]></message><continue/></if><entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom"><field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one><set field="weight" from="packageInfo.weight ?: boxType.defaultGrossWeight"/><if condition="!weight || weightUom == null"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package]]></message><continue/></if><set field="distance_unit" from="dimUom.abbreviation"/><if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package]]></message><continue/></if><set field="mass_unit" from="weightUom.abbreviation"/><if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package]]></message><continue/></if><set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,                             distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/><set field="parcels" from="[parcel]"/><service-call name="mantle.shipment.CarrierServices.get#GeneralPackageRequiresInsurance" out-map="[insuranceRequired:insuranceReqOut.insuranceRequired,packageTotalCost:insuranceReqOut.packageTotalCost,contentDescription:insuranceReqOut.contentDescription]" out-map-add-to-existing="false" in-map="[quantityByProductId:packageInfo.quantityByProductId, currencyUomId:currencyUomId,                             productStoreId:productStoreId, vendorPartyId:vendorPartyId]"/><log message="rates ${productStoreId} ${packageInfo.quantityByProductId} ${insuranceReqOut}"/><if condition="insuranceReqOut.insuranceRequired && insuranceReqOut.packageTotalCost"><set field="parcel.extra" from="[insurance:[amount:insuranceReqOut.packageTotalCost, currency:currencyUomId,                             content:insuranceReqOut.contentDescription]]"/></if><set field="requestMap" from="[address_from:address_from, address_to:address_to,                     parcels:parcels, carrier_accounts:carrier_accounts, async:false, extra:[bypass_address_validation:true]]"/><script><![CDATA[requestMapList.add(requestMap); requestPackageIdList.add(packageInfo.shipmentPackageSeqId)]]></script></iterate><if condition="!requestMapList"><set field="shippingRateInfoList" from="[]"/><return/></if><service-call name="mantle.shippo.ShippoServices.request#ShipmentRateInfoInternal" in-map="context" out-map="[shippingRateInfoList:context.shippingRateInfoList,rateInfoByServiceLevelByPackage:context.rateInfoByServiceLevelByPackage]"/></actions></service>