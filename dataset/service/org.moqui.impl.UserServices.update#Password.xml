<!--Service Location org.moqui.impl.UserServices.update#Password--><service verb="update" noun="Password"><in-parameters><parameter name="userId"><description><![CDATA[Defaults to the current userId in the ExecutionContext.]]></description></parameter><parameter name="username"><description><![CDATA[May be used instead of userId to identify user.]]></description></parameter><parameter name="oldPassword" required="true"><description><![CDATA[Ignored if user has password admin permissions.]]></description></parameter><parameter name="newPassword" required="true"/><parameter name="newPasswordVerify" required="true"/><parameter name="code"><description><![CDATA[Second factor authentication, required if second factor required for user (via group or authc factors configured)]]></description></parameter></in-parameters><out-parameters><parameter name="username"/><parameter name="passwordIssues" type="Boolean"/><parameter name="updateSuccessful" type="Boolean"/></out-parameters><actions><set field="hasPwAdminPermission" from="ec.user.hasPermission('ADMIN_PASSWORD')"/><set field="passwordIssues" from="false"/><set field="updateSuccessful" from="false"/><if condition="userId"><then><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/></then><else-if condition="username"><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"><field-map field-name="username"/></entity-find-one></else-if><else><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"><field-map field-name="userId" from="ec.user.userId"/></entity-find-one></else></if><if condition="userAccount == null"><return message="Could not find user with name ${username}" public="true" type="danger"/></if><set field="userId" from="userAccount.userId"/><set field="username" from="userAccount.username"/><if condition="!hasPwAdminPermission"><if condition="ec.user.userId && userId != ec.user.userId"><return message="Cannot update the password of another user without password admin permission" public="true" type="danger"/></if><service-call name="org.moqui.impl.UserServices.get#UserAuthcFactorRequired" out-map="[secondFactorRequired:context.secondFactorRequired]"><field-map field-name="userId"/></service-call><set field="codeVerified" from="false"/><if condition="secondFactorRequired"><if condition="ec.web?.sessionAttributes?.moquiPreAuthcUsername || ec.user.username"><service-call name="org.moqui.impl.UserServices.validate#UserAuthcFactorCode" in-map="[userId:userId, code:code]" out-map="[verified:validateCodeOut.verified,factorId:validateCodeOut.factorId]"/><if condition="!validateCodeOut.verified"><return message="Authentication code not valid" public="true" type="danger"/></if><set field="codeVerified" from="true"/></if></if><if condition="!codeVerified"><if condition="!oldPassword"><return message="Please enter current password" public="true" type="danger"/></if><script><![CDATA[def token = new org.apache.shiro.authc.UsernamePasswordToken((String) userAccount.username, (String) oldPassword)
                        def info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.currentPassword,
                                userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")]]></script><if condition="!userAccount.currentPassword || !ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)"><if condition="userAccount.resetPassword"><then><script><![CDATA[info = new org.apache.shiro.authc.SimpleAuthenticationInfo(userAccount.username, userAccount.resetPassword,
                                        userAccount.passwordSalt ? new org.apache.shiro.util.SimpleByteSource((String) userAccount.passwordSalt) : null, "moquiRealm")]]></script><if condition="!ec.ecfi.getCredentialsMatcher(userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64)).doCredentialsMatch(token, info)"><return message="Password did not match current password or reset password for user ${username}" public="true" type="danger"/></if></then><else><return message="Password incorrect for user ${username}" public="true" type="danger"/></else></if></if><if condition="secondFactorRequired"><if condition="!code"><if condition="ec.web?.sessionAttributes"><set field="ec.web?.sessionAttributes?.moquiPreAuthcUsername" from="username"/></if><return message="Authentication code required for user ${username}" public="true" error="true"/></if><service-call name="org.moqui.impl.UserServices.validate#UserAuthcFactorCode" in-map="[userId:userId, code:code]" out-map="[verified:validateCodeOut.verified,factorId:validateCodeOut.factorId]"/><if condition="!validateCodeOut.verified"><return message="Authentication code not valid" public="true" type="danger"/></if></if></if></if><service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="[passwordIssues:context.passwordIssues,updateSuccessful:context.updateSuccessful]" in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify]"/><if condition="updateSuccessful && !ec.message.hasError()"><message public="true" type="success"><![CDATA[Password updated for user ${userAccount.username}]]></message></if></actions></service>