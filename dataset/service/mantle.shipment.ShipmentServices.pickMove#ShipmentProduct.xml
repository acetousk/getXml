<!--Service Location mantle.shipment.ShipmentServices.pickMove#ShipmentProduct--><service verb="pickMove" noun="ShipmentProduct"><in-parameters><parameter name="scanProduct" required="true"><description><![CDATA[May be Product.productId, Product.pseudoId, Asset.assetId, ProductIdentification.idValue (for Product on Shipment)]]></description></parameter><parameter name="shipmentId" required="true"/><parameter name="toContainerId"><description><![CDATA[May be actual containerId or serialNumber, if not specified uses Shipment.pickContainerId, and if no value there will pick only and not move to Container]]></description></parameter><parameter name="locationSeqId"><description><![CDATA[Specify either location or container, if neither specified will look for assets with no location]]></description></parameter><parameter name="containerId"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="scanLocation"><description><![CDATA[May be locationSeqId within facility, containerId, or container serialNumber]]></description></parameter><parameter name="quantity" type="BigDecimal" default="1.0"/><parameter name="insufficientQtyWarn" type="Boolean" default="true"/></in-parameters><out-parameters><parameter name="quantityPicked" type="BigDecimal"/></out-parameters><actions><set field="quantityPicked" from="0.0"/><if condition="!shipmentId"><return error="true" message="No Shipment ID specified"/></if><entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/><if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if><if condition="!toContainerId && shipment != null"><set field="toContainerId" from="shipment.pickContainerId"/></if><if condition="toContainerId"><entity-find-one entity-name="mantle.product.asset.Container" value-field="toContainer"><field-map field-name="containerId" from="toContainerId"/></entity-find-one><if condition="toContainer == null"><entity-find-one entity-name="mantle.product.asset.Container" value-field="toContainer"><field-map field-name="serialNumber" from="toContainerId"/></entity-find-one><if condition="toContainer != null"><then><set field="toContainerId" from="toContainer.containerId"/></then><else><return error="true" message="Container not found with ID or Serial Number ${toContainerId}"/></else></if></if></if><service-call name="mantle.shipment.ShipmentServices.get#ShipmentProductByScan" out-map="[productId:context.productId,assetId:context.assetId,shipmentItemList:context.shipmentItemList]" in-map="[shipmentId:shipmentId, scanInput:scanProduct]"/><if condition="!productId"><return error="true" message="Could not find Product with ID ${scanProduct}"/></if><entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="firstSrsList" limit="1"><econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find><set field="facilityId" from="firstSrsList ? firstSrsList[0].originFacilityId : null"/><if condition="!facilityId && toContainer != null"><set field="facilityId" from="toContainer.facilityId"/></if><if condition="!facilityId"><return error="true" message="No Origin Facility found on Shipment ${shipmentId}${toContainer != null ? ' or To Container ' + toContainer.containerId : ''}"/></if><service-call name="mantle.product.AssetServices.check#ScanLocation" in-map="context" out-map="[facilityId:context.facilityId,locationSeqId:context.locationSeqId,checkFacLoc:context.checkFacLoc,containerId:context.containerId,container:context.container]"/><entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList"><econdition field-name="shipmentId"/><econdition field-name="productId"/><order-by field-name="productId,orderId"/></entity-find><iterate list="sisList" entry="sis"><set field="quantityRemaining" from="quantity - quantityPicked"/><if condition="quantityRemaining <= 0.0"><break/></if><set field="sisQtyNotPicked" from="(sis.quantity ?: 0.0) - (sis.quantityPicked ?: 0.0)"/><set field="sisQuantityRemaining" from="sisQtyNotPicked > quantityRemaining ? quantityRemaining : sisQtyNotPicked"/><if condition="sisQuantityRemaining <= 0.0"><continue/></if><entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetReservationList"><econdition field-name="orderId" from="sis.orderId"/><econdition field-name="orderItemSeqId" from="sis.orderItemSeqId"/><econdition field-name="productId" from="sis.productId"/><econdition field-name="quantityNotIssued" operator="not-equals" from="0.0"/><order-by field-name="assetId"/></entity-find><if condition="assetReservationList"><set field="resAssetMap" from="[:]"/><iterate list="assetReservationList" entry="assetReservation"><set field="curAssetId" from="assetReservation.assetId"/><if condition="!resAssetMap.containsKey(curAssetId)"><entity-find-one entity-name="mantle.product.asset.Asset" value-field="curAsset" for-update="true"><field-map field-name="assetId" from="curAssetId"/></entity-find-one><if condition="(containerId && containerId != curAsset.containerId) || (locationSeqId && locationSeqId != curAsset.locationSeqId)"><continue/></if><if condition="toContainer != null && toContainer.containerId == curAsset.containerId"><continue/></if><script><![CDATA[resAssetMap.put(curAssetId, curAsset)]]></script></if></iterate><iterate list="assetReservationList" entry="assetReservation"><set field="curAsset" from="resAssetMap.get(assetReservation.assetId)"/><if condition="curAsset == null"><continue/></if><set field="resAvailable" from="(assetReservation.quantityNotIssued ?: 0.0) - (assetReservation.quantityNotAvailable ?: 0.0)"/><set field="quantityToPick" from="resAvailable > sisQuantityRemaining ? sisQuantityRemaining : resAvailable"/><if condition="quantityToPick <= 0.0"><continue/></if><set field="sisQuantityRemaining" from="sisQuantityRemaining - quantityToPick"/><set field="quantityPicked" from="quantityPicked + quantityToPick"/><set field="sis.quantityPicked" from="(sis.quantityPicked ?: 0.0) + quantityToPick"/><if condition="toContainer != null"><service-call name="mantle.product.AssetServices.move#Asset" in-map="[assetId:curAsset.assetId, quantity:quantityToPick, facilityId:toContainer.facilityId,                                         locationSeqId:toContainer.locationSeqId, containerId:toContainer.containerId,                                         moveAssetReservationId:assetReservation.assetReservationId]"/></if></iterate><entity-update value-field="sis"/></if></iterate><if condition="insufficientQtyWarn && quantityPicked < quantity"><message type="danger"><![CDATA[Only ${quantityPicked?.toPlainString()} found to pick out of the ${quantity?.toPlainString()} requested, ${(quantity - quantityPicked)?.toPlainString()} should be returned to the shelf]]></message></if></actions></service>