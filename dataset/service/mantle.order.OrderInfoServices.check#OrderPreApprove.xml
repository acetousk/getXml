<!--Service Location mantle.order.OrderInfoServices.check#OrderPreApprove--><service verb="check" noun="OrderPreApprove"><in-parameters><parameter name="orderId" required="true"/></in-parameters><out-parameters><parameter name="approveWarnings" type="List"><parameter name="approveWarning"/></parameter></out-parameters><actions><set field="approveWarnings" from="[]"/><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/><if condition="orderHeader == null"><return/></if><set field="placedDate" from="orderHeader.placedDate"/><set field="currencyUomId" from="orderHeader.currencyUomId"/><set field="productStoreId" from="orderHeader.productStoreId"/><set field="orderPartList" from="orderHeader.parts"/><set field="firstOrderPart" from="orderPartList[0]"/><set field="orderItemList" from="orderHeader.items"/><set field="customerPartyId" from="firstOrderPart.customerPartyId"/><set field="vendorPartyId" from="firstOrderPart.vendorPartyId"/><entity-find-one entity-name="mantle.party.PartyRole" value-field="vendorOrgInternal"><field-map field-name="partyId" from="vendorPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one><set field="isVendorInternalOrg" from="vendorOrgInternal != null"/><set field="totalPromised" from="0"/><set field="totalAuthorized" from="0"/><entity-find entity-name="mantle.account.payment.Payment" list="paymentList"><econdition field-name="orderId"/></entity-find><set field="paymentMethodIdSet" from="new HashSet()"/><iterate list="paymentList" entry="payment"><if condition="payment.statusId in ['PmntAuthorized', 'PmntDelivered', 'PmntConfirmed']"><then><set field="totalPromised" from="totalPromised + (payment.amount ?: 0.0)"/><set field="totalAuthorized" from="totalAuthorized + (payment.amount ?: 0.0)"/></then><else-if condition="payment.statusId == 'PmntPromised'"><set field="totalPromised" from="totalPromised + (payment.amount ?: 0.0)"/></else-if></if><if condition="payment.paymentMethodId && !(payment.statusId in ['PmntCancelled', 'PmntVoid', 'PmntDeclined'])"><script><![CDATA[paymentMethodIdSet.add(payment.paymentMethodId)]]></script></if><if condition="payment.amountUomId != orderHeader.currencyUomId"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApproveCurrencyDifferent', null))]]></script></if></iterate><if condition="totalPromised < orderHeader.grandTotal"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApprovePaymentPromisedLow', null))]]></script></if><if condition="totalAuthorized < orderHeader.grandTotal"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApprovePaymentAuthorizedLow', null))]]></script></if><set field="noCustomerOrVendor" from="false"/><iterate list="orderPartList" entry="orderPart"><if condition="!orderPart.vendorPartyId"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApprovePartNoVendor', null))]]></script><set field="noCustomerOrVendor" from="true"/></if><if condition="!orderPart.customerPartyId"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApprovePartNoCustomer', null))]]></script><set field="noCustomerOrVendor" from="true"/></if></iterate><if condition="noCustomerOrVendor"><return/></if><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList"><econdition field-name="paymentMethodId" operator="in" from="paymentMethodIdSet"/></entity-find><set field="billingAddressIdSet" from="new HashSet(paymentMethodList*.postalContactMechId)"/><entity-find entity-name="mantle.party.contact.ContactMechPostalAddress" list="billingAddressList"><econdition field-name="contactMechId" operator="in" from="billingAddressIdSet"/></entity-find><set field="shippingAddressIdSet" from="new HashSet(orderPartList*.postalContactMechId)"/><entity-find entity-name="mantle.party.contact.ContactMechPostalAddress" list="shippingAddressList"><econdition field-name="contactMechId" operator="in" from="shippingAddressIdSet"/></entity-find><if condition="productStoreId"><entity-find entity-name="mantle.product.store.ProductStoreApprove" list="productStoreApproveList"><date-filter valid-date="orderHeader.placedDate"/><econdition field-name="productStoreId"/><order-by field-name="sequenceNum"/></entity-find><script><![CDATA[for (storeApprove in productStoreApproveList) {
                    String storeApproveId = storeApprove.storeApproveId
                    try {
                        Map parmMap = new HashMap()
                        List promoParameterList = storeApprove.parameters
                        for (promoParameter in promoParameterList) parmMap.put(promoParameter.parameterName, promoParameter.parameterValue)
                        parmMap.put("orderId", orderId)
                        parmMap.put("storeApproveId", storeApproveId)

                        Map serviceRegister = storeApprove.serviceRegister
                        Map result = ec.service.sync().name(serviceRegister.serviceName).parameters(parmMap).softValidate(true).disableAuthz().call()
                        if (result != null && result.approveWarnings && !ec.message.hasError())
                            approveWarnings.addAll(result.approveWarnings)
                    } catch (Throwable t) {
                        ec.logger.log(300, "Error calling store order approval validate service ${storeApproveId}", t)
                    }
                }]]></script></if><entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true"><econdition field-name="enumGroupEnumId" value="EngItemsProduct"/></entity-find><set field="productItemTypes" from="productItemTypeEgms*.enumId"/><entity-find entity-name="mantle.product.store.ProductStoreSetting" list="storeSettingList"><econdition field-name="productStoreId"/></entity-find><if condition="isVendorInternalOrg"><then><set field="includeStatuses" from="['OrderPlaced', 'OrderProcessing', 'OrderApproved', 'OrderSent', 'OrderCompleted', 'OrderHold']"/><entity-find entity-name="mantle.order.OrderPart" list="otherPartList"><econdition field-name="customerPartyId"/><econdition field-name="orderId" operator="not-equals"/><econdition field-name="statusId" operator="in" from="includeStatuses"/></entity-find><set field="otherPartCount" from="otherPartList.size()"/><if condition="otherPartCount == 0 && !'false'.equals(storeSettingList.find({'PsstOrdApproveNewCust'.equals(it.settingTypeEnumId)})?.settingValue)"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApproveNewCustomer', null))]]></script></if><iterate list="orderPartList" entry="orderPart"><if condition="!orderPart.postalContactMechId && !'false'.equals(storeSettingList.find({'PsstOrdApproveAddrMissing'.equals(it.settingTypeEnumId)})?.settingValue)"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderPlacePartNoShippingAddress', null, [orderPart:orderPart]))]]></script><continue/></if><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApproveAddrNotValid'.equals(it.settingTypeEnumId)})?.settingValue)"><entity-find-one entity-name="mantle.party.contact.ContactMechPostalAddress" value-field="postalCm"><field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one><set field="trustLevelEnumId" from="postalCm.trustLevelEnumId ?: 'CmtlNew'"/><if condition="!'CmtlValid'.equals(trustLevelEnumId) && !'CmtlVerified'.equals(trustLevelEnumId)"><entity-find-one entity-name="moqui.basic.Enumeration" value-field="trustLevelEnum"><field-map field-name="enumId" from="trustLevelEnumId"/></entity-find-one><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApproveShippingAddressTrust', null))]]></script></if></if></iterate><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApproveBillShipAddrDiff'.equals(it.settingTypeEnumId)})?.settingValue)"><iterate list="billingAddressList" entry="billingAddress"><set field="foundCurMatch" from="false"/><iterate list="shippingAddressList" entry="shippingAddress"><if condition="billingAddress.contactMechId == shippingAddress.contactMechId"><set field="foundCurMatch" from="true"/><break/></if><if condition="billingAddress.postalCode != shippingAddress.postalCode"><continue/></if><if condition="billingAddress.countryGeoId && shippingAddress.countryGeoId &&                                     billingAddress.countryGeoId != shippingAddress.countryGeoId"><continue/></if><if condition="billingAddress.unitNumber && shippingAddress.unitNumber &&                                     removeNonAlphaNumeric(billingAddress.unitNumber) != removeNonAlphaNumeric(shippingAddress.unitNumber)"><continue/></if><if condition="findFirstNumber(billingAddress.address1) != findFirstNumber(shippingAddress.address1)"><continue/></if><set field="foundCurMatch" from="true"/><break/></iterate><if condition="!foundCurMatch"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Billing address ${billingAddress.address1}, ${billingAddress.postalCode} does not match shipping address', null))]]></script></if></iterate></if><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApprovePayMethNameDiff'.equals(it.settingTypeEnumId)})?.settingValue)"><entity-find-one entity-name="mantle.party.PartyDetail" value-field="customerParty"><field-map field-name="partyId" from="customerPartyId"/></entity-find-one><iterate list="paymentMethodList" entry="paymentMethod"><set field="combinedCustName" value="${customerParty.organizationName?.trim()?:''}${customerParty.firstName?.trim()?:''}${customerParty.middleName ? ' ' + customerParty.middleName.trim() : ''}${customerParty.lastName ? ' ' + customerParty.lastName.trim() : ''}"/><set field="combinedPmPersonName" value="${paymentMethod.firstNameOnAccount?.trim()?:''}${paymentMethod.middleNameOnAccount ? ' ' + paymentMethod.middleNameOnAccount.trim() : ''}${paymentMethod.lastNameOnAccount ? ' ' + paymentMethod.lastNameOnAccount.trim() : ''}"/><if condition="customerParty.organizationName"><then><if condition="customerParty.organizationName.trim().toLowerCase() != paymentMethod.companyNameOnAccount?.trim()?.toLowerCase() &&                                     customerParty.organizationName != combinedPmPersonName?.toLowerCase()"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                        'Name on payment method ${paymentMethod.companyNameOnAccount ?: combinedPmPersonName} does not match customer name ${combinedCustName}', null))]]></script></if></then><else><if condition="combinedCustName?.trim()?.toLowerCase() != combinedPmPersonName?.trim()?.toLowerCase() &&                                     (paymentMethod.firstNameOnAccount?.trim()?.toLowerCase() != customerParty.firstName?.trim()?.toLowerCase() ||                                         paymentMethod.lastNameOnAccount?.trim()?.toLowerCase() != customerParty.lastName?.trim()?.toLowerCase())"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                        'Name on payment method ${combinedPmPersonName} does not match customer name ${combinedCustName}', null))]]></script></if></else></if></iterate></if><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApproveContactBlacklist'.equals(it.settingTypeEnumId)})?.settingValue)"><iterate list="shippingAddressList" entry="addr"><if condition="!addr?.address1"><script><![CDATA[approveWarnings.add(ec.resource.expand('Shipping address ${addr?.contactMechId} has no Address 1 line', null))]]></script><continue/></if><service-call name="mantle.party.DuplicateServices.find#PostalAddresses" out-map="[postalAddressList:blacklistAddrOut.postalAddressList]" out-map-add-to-existing="false" in-map="[partyId:customerPartyId, address1:addr.address1, unitNumber:addr.unitNumber, postalCode:addr.postalCode,                                     postalCodeExt:addr.postalCodeExt, countryGeoId:addr.countryGeoId,                                     trustLevelEnumId:'CmtlGreylisted,CmtlBlacklisted']"/><if condition="blacklistAddrOut.postalAddressList"><set field="firstMatch" from="blacklistAddrOut.postalAddressList[0]"/><entity-find-one entity-name="moqui.basic.Enumeration" value-field="trustLevelEnum"><field-map field-name="enumId" from="firstMatch.trustLevelEnumId"/></entity-find-one><script><![CDATA[approveWarnings.add(ec.resource.expand('Shipping address ${addr.address1}, ${addr.postalCode} matches ${trustLevelEnum?.description} address ${firstMatch.address1}, ${firstMatch.postalCode}', null))]]></script></if></iterate><iterate list="billingAddressList" entry="addr"><if condition="addr.contactMechId in shippingAddressIdSet"><continue/></if><if condition="'CmtlBlacklisted' == addr.trustLevelEnumId"><script><![CDATA[approveWarnings.add(ec.resource.expand('Billing address ${addr.address1}, ${addr.postalCode} is BLACKLISTED', null))]]></script><continue/></if><if condition="'CmtlGreylisted' == addr.trustLevelEnumId"><script><![CDATA[approveWarnings.add(ec.resource.expand('Billing address ${addr.address1}, ${addr.postalCode} is Greylisted', null))]]></script><continue/></if><service-call name="mantle.party.DuplicateServices.find#PostalAddresses" out-map="[postalAddressList:blacklistAddrOut.postalAddressList]" out-map-add-to-existing="false" in-map="[partyId:customerPartyId, address1:addr.address1, unitNumber:addr.unitNumber, postalCode:addr.postalCode,                                     postalCodeExt:addr.postalCodeExt, countryGeoId:addr.countryGeoId,                                     trustLevelEnumId:'CmtlGreylisted,CmtlBlacklisted']"/><if condition="blacklistAddrOut.postalAddressList"><set field="firstMatch" from="blacklistAddrOut.postalAddressList[0]"/><entity-find-one entity-name="moqui.basic.Enumeration" value-field="trustLevelEnum"><field-map field-name="enumId" from="firstMatch.trustLevelEnumId"/></entity-find-one><script><![CDATA[approveWarnings.add(ec.resource.expand('Billing address ${addr.address1}, ${addr.postalCode} matches ${trustLevelEnum?.description} address ${firstMatch.address1}, ${firstMatch.postalCode}', null))]]></script></if></iterate></if><set field="settingLargeOrderAmount" from="storeSettingList.find({'PsstOrdApproveLargeOrder'.equals(it.settingTypeEnumId)})?.settingValue ?: '0.0'"/><set field="largeOrderAmountBd" from="settingLargeOrderAmount.isBigDecimal() ? (settingLargeOrderAmount as BigDecimal) : 0.0"/><if condition="largeOrderAmountBd && orderHeader.grandTotal > largeOrderAmountBd"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                        'Large Order: total ${ec.l10n.format(orderHeader.grandTotal, "#,##0.00")} is greater than ${ec.l10n.format(largeOrderAmountBd, "#,##0.00")}', null))]]></script></if><if condition="orderHeader.salesChannelEnumId in ['ScWeb', 'ScWebExternal']"><set field="settingLargeWebOrderAmount" from="storeSettingList.find({'PsstOrdApproveLargeWebOrder'.equals(it.settingTypeEnumId)})?.settingValue ?: '0.0'"/><set field="largeWebOrderAmountBd" from="settingLargeWebOrderAmount.isBigDecimal() ? (settingLargeWebOrderAmount as BigDecimal) : 0.0"/><if condition="largeWebOrderAmountBd && orderHeader.grandTotal > largeWebOrderAmountBd"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                            'Large Web Order: total ${ec.l10n.format(orderHeader.grandTotal, "#,##0.00")} is greater than ${ec.l10n.format(largeWebOrderAmountBd, "#,##0.00")}', null))]]></script></if></if><if condition="otherPartCount >= 3"><set field="settingStdDevTotal" from="storeSettingList.find({'PsstOrdApproveStdDevTotal'.equals(it.settingTypeEnumId)})?.settingValue ?: '3.0'"/><set field="stdDevTotalBd" from="settingStdDevTotal.isBigDecimal() ? (settingStdDevTotal as BigDecimal) : 0.0"/><if condition="stdDevTotalBd"><set field="partMaxTotal" from="stdDevMaxFromMapField(otherPartList, 'partTotal', stdDevTotalBd)?.maximum"/><iterate list="orderPartList" entry="orderPart"><if condition="partMaxTotal && orderPart.partTotal > partMaxTotal"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                    'Part ${orderPart.orderPartSeqId} total ${ec.l10n.format(orderPart.partTotal, "#,##0.00")} is greater than ${ec.l10n.format(partMaxTotal, "#,##0.00")}, the average of other order parts plus 3 standard deviations', null))]]></script></if></iterate></if></if><set field="settingStdDevProdQty" from="storeSettingList.find({'PsstOrdApproveStdDevProdQty'.equals(it.settingTypeEnumId)})?.settingValue ?: '3.0'"/><set field="stdDevProdQtyBd" from="settingStdDevProdQty.isBigDecimal() ? (settingStdDevProdQty as BigDecimal) : 0.0"/><if condition="stdDevProdQtyBd"><iterate list="orderItemList" entry="orderItem"><set field="productId" from="orderItem.productId"/><if condition="!productId || !productItemTypes.contains(orderItem.itemTypeEnumId)"><continue/></if><entity-find entity-name="mantle.order.OrderItemAndPart" list="pastItemPartList"><econdition field-name="customerPartyId"/><econdition field-name="orderId" operator="not-equals"/><econdition field-name="productId"/><econdition field-name="itemTypeEnumId" operator="in" from="productItemTypes"/><select-field field-name="quantity"/></entity-find><if condition="pastItemPartList.size() < 3"><continue/></if><set field="quantityMax" from="stdDevMaxFromMapField(pastItemPartList, 'quantity', stdDevProdQtyBd)?.maximum"/><if condition="quantityMax && orderItem.quantity > quantityMax"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Item ${orderItem.orderItemSeqId} product ${productId} quantity ${ec.l10n.format(orderItem.quantity, "0.##")} is greater than ${ec.l10n.format(quantityMax, "#,##0.##")}, the average of previously ordered quantities plus 3 standard deviations', null))]]></script></if></iterate></if><entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetResList"><econdition field-name="orderId"/><order-by field-name="orderItemSeqId"/></entity-find><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApproveInventoryNotAvail'.equals(it.settingTypeEnumId)})?.settingValue)"><set field="arUnavailableMap" from="[:]"/><iterate list="assetResList" entry="assetRes"><if condition="assetRes.quantityNotAvailable"><script><![CDATA[addToBigDecimalInMap(assetRes.orderItemSeqId, assetRes.quantityNotAvailable, arUnavailableMap)]]></script></if></iterate><iterate list="arUnavailableMap" key="orderItemSeqId" entry="quantityNotAvailable"><set field="curOrderItem" from="orderItemList.find({ it.orderItemSeqId == orderItemSeqId })"/><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Item ${orderItemSeqId} has ${ec.l10n.format(quantityNotAvailable, "0.##")} of ${ec.l10n.format(curOrderItem.quantity, "0.##")} not available in inventory', null))]]></script></iterate></if><set field="singleLot" from="'BlY'.equals(ec.service.sync().name('mantle.party.PartyServices.get#PartySettingValue')                         .parameter('partySettingTypeId', 'CustomerSingleLot').parameter('partyId', orderPart.customerPartyId).call()?.get('settingValue'))"/><set field="newerInventory" from="'BlY'.equals(ec.service.sync().name('mantle.party.PartyServices.get#PartySettingValue')                         .parameter('partySettingTypeId', 'CustomerNewerInventory').parameter('partyId', orderPart.customerPartyId).call()?.get('settingValue'))"/><set field="lotIdSetByItemSeqId" from="[:]"/><set field="oldestLotExpireByItemSeqId" from="[:]"/><iterate list="assetResList" entry="assetRes"><set field="orderItemSeqId" from="assetRes.orderItemSeqId"/><if condition="singleLot || newerInventory"><entity-find-one entity-name="mantle.product.asset.AssetLotAndMfgParty" value-field="assetLot"><field-map field-name="assetId" from="assetRes.assetId"/><select-field field-name="lotId,pseudoId,lotNumber,manufacturedDate,expirationDate"/></entity-find-one><script><![CDATA[if (singleLot && assetLot?.lotId) addToSetInMap(orderItemSeqId, assetLot.lotId, lotIdSetByItemSeqId)
                            def oldestLotExpire = oldestLotExpireByItemSeqId.get(orderItemSeqId)
                            if (newerInventory && assetLot?.expirationDate != null && (oldestLotExpire == null || assetLot.expirationDate < oldestLotExpire))
                                oldestLotExpireByItemSeqId.put(orderItemSeqId, assetLot.expirationDate)]]></script></if></iterate><if condition="singleLot"><iterate list="lotIdSetByItemSeqId" entry="lotIdSet" key="orderItemSeqId"><if condition="lotIdSet != null && lotIdSet.size() > 1"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                            'Item ${orderItemSeqId} has inventory in more than one lot: ${lotIdSet}', null))]]></script></if></iterate></if><if condition="newerInventory"><iterate list="orderItemList" entry="orderItem"><set field="oldestLotExpire" from="oldestLotExpireByItemSeqId.get(orderItem.orderItemSeqId)"/><if condition="oldestLotExpire == null"><continue/></if><set field="newerThanExpireDate" from="null"/><entity-find entity-name="mantle.product.issuance.AssetIssuanceLotSummary" list="issuanceLotList" limit="1"><econdition field-name="toPartyId" from="customerPartyId"/><econdition field-name="productId" from="orderItem.productId"/><select-field field-name="expirationDate,expectedEndOfLife"/><order-by field-name="-issuedDate"/></entity-find><if condition="issuanceLotList"><set field="newerThanExpireDate" from="issuanceLotList[0].expirationDate ?: issuanceLotList[0].expectedEndOfLife"/></if><if condition="newerThanExpireDate == null"><continue/></if><if condition="oldestLotExpire < newerThanExpireDate"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                            'In item ${orderItem.orderItemSeqId} oldest lot ${ec.l10n.format(oldestLotExpire, "yyyy-MM-dd")} older than last lot expire ${ec.l10n.format(newerThanExpireDate, "yyyy-MM-dd")}', null))]]></script></if></iterate></if><set field="settingPercAvailInv" from="storeSettingList.find({'PsstOrdApprovePercAvailInv'.equals(it.settingTypeEnumId)})?.settingValue ?: '20.0'"/><set field="bdPercAvailInv" from="settingPercAvailInv.isBigDecimal() ? settingPercAvailInv as BigDecimal : 0.0"/><if condition="bdPercAvailInv"><set field="productIdSet" from="new HashSet()"/><iterate list="orderItemList" entry="orderItem"><set field="productId" from="orderItem.productId"/><if condition="!productId || !productItemTypes.contains(orderItem.itemTypeEnumId)"><continue/></if><script><![CDATA[productIdSet.add(productId)]]></script><set field="quantity" from="orderItem.quantity"/><if condition="quantity < 5.0"><continue/></if><set field="curOrderPart" from="orderPartList.find({ it.orderPartSeqId == orderItem.orderPartSeqId })"/><set field="curFacilityId" from="curOrderPart?.facilityId"/><if condition="!curFacilityId"><continue/></if><entity-find entity-name="mantle.product.asset.AssetSummaryView" list="atpList"><econdition field-name="productId"/><econdition field-name="facilityId" from="curFacilityId"/><having-econditions><econdition field-name="availableToPromiseTotal" operator="greater" from="0.0"/></having-econditions><select-field field-name="availableToPromiseTotal"/></entity-find><if condition="!atpList"><continue/></if><set field="availableToPromiseTotal" from="atpList[0].availableToPromiseTotal"/><if condition="!availableToPromiseTotal"><continue/></if><set field="curLimit" from="(quantity + availableToPromiseTotal) * (bdPercAvailInv/100.0)"/><if condition="quantity > curLimit"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Item ${orderItem.orderItemSeqId} has ${ec.l10n.format(quantity, "0.##")} which is greater than ${bdPercAvailInv}% of available inventory (${ec.l10n.format(availableToPromiseTotal, "0.##")})', null))]]></script></if></iterate></if><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApproveSimilar'.equals(it.settingTypeEnumId)})?.settingValue)"><entity-find entity-name="mantle.order.OrderHeaderAndPart" list="nearOrderList"><econdition field-name="orderId" operator="not-equals"/><econdition field-name="customerPartyId"/><econdition field-name="placedDate" operator="greater" from="placedDate - 1"/><econdition field-name="placedDate" operator="less" from="placedDate + 1"/><econdition field-name="partStatusId" operator="not-in" value="OrderCancelled,OrderRejected"/><select-field field-name="orderId,orderPartSeqId,placedDate"/></entity-find><iterate list="nearOrderList" entry="nearOrder"><set field="timeDiff" from="placedDate.time - nearOrder.placedDate.time"/><set field="isFuture" from="false"/><if condition="timeDiff < 0"><set field="isFuture" from="true"/><set field="timeDiff" from="-timeDiff"/></if><set field="diffHours" from="timeDiff / (1000*60*60)"/><entity-find entity-name="mantle.order.OrderItem" list="nearItemList"><econdition field-name="orderId" from="nearOrder.orderId"/><econdition field-name="orderPartSeqId" from="nearOrder.orderPartSeqId"/><econdition field-name="productId" operator="in" from="productIdSet"/><select-field field-name="productId,quantity"/></entity-find><iterate list="nearItemList" entry="nearItem"><script><![CDATA[approveWarnings.add(ec.resource.expand('OrderApproveNearOrder', null))]]></script></iterate></iterate></if><if condition="!'false'.equals(storeSettingList.find({'PsstOrdApprovePriceMinMax'.equals(it.settingTypeEnumId)})?.settingValue)"><iterate list="orderItemList" entry="orderItem"><set field="productId" from="orderItem.productId"/><if condition="!productId || !productItemTypes.contains(orderItem.itemTypeEnumId)"><continue/></if><set field="unitAmount" from="orderItem.unitAmount"/><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:minOut.price,productPriceId:minOut.productPriceId,priceUomId:minOut.priceUomId]" in-map="[productId:orderItem.productId, quantity:orderItem.quantity, validDate:placedDate,                                 priceUomId:currencyUomId, productStoreId:productStoreId, vendorPartyId:vendorPartyId,                                 customerPartyId:customerPartyId, priceTypeEnumId:'PptMinimum']"/><set field="minPrice" from="minOut.price"/><service-call name="mantle.product.PriceServices.get#ProductPriceByType" out-map="[price:maxOut.price,productPriceId:maxOut.productPriceId,priceUomId:maxOut.priceUomId]" in-map="[productId:orderItem.productId, quantity:orderItem.quantity, validDate:placedDate,                                 priceUomId:currencyUomId, productStoreId:productStoreId, vendorPartyId:vendorPartyId,                                 customerPartyId:customerPartyId, priceTypeEnumId:'PptMaximum']"/><set field="maxPrice" from="maxOut.price"/><if condition="minPrice && unitAmount < minPrice"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Item ${orderItem.orderItemSeqId} price ${ec.l10n.format(unitAmount, "0.00")} is less than minimum price ${ec.l10n.format(minPrice, "0.00")} for product ${orderItem.productId}', null))]]></script></if><if condition="maxPrice && unitAmount > maxPrice"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                                'Item ${orderItem.orderItemSeqId} price ${ec.l10n.format(unitAmount, "0.00")} is greater than maximum price ${ec.l10n.format(maxPrice, "0.00")} for product ${orderItem.productId}', null))]]></script></if></iterate></if></then><else><iterate list="orderItemList" entry="orderItem"><set field="productId" from="orderItem.productId"/><if condition="!productId || !productItemTypes.contains(orderItem.itemTypeEnumId)"><continue/></if><set field="unitAmount" from="orderItem.unitAmount"/><entity-find entity-name="mantle.product.ProductPrice" list="currentPriceList" limit="1"><date-filter valid-date="placedDate"/><econdition field-name="productId"/><econdition field-name="priceTypeEnumId" operator="in" value="PptCurrent,PptList"/><econdition field-name="priceUomId" from="currencyUomId"/><econdition field-name="vendorPartyId" from="customerPartyId" or-null="true"/><econdition field-name="pricePurposeEnumId" value="PppPurchase" or-null="true"/><order-by field-name="price"/></entity-find><set field="lowestPrice" from="currentPriceList ? currentPriceList[0].price : null"/><set field="purchasePricePercent" from="50.0"/><set field="maxPurchasePrice" from="lowestPrice ? lowestPrice * (purchasePricePercent / 100) : null"/><if condition="maxPurchasePrice && unitAmount > maxPurchasePrice"><script><![CDATA[approveWarnings.add(ec.resource.expand(
                        'Item ${orderItem.orderItemSeqId} price ${ec.l10n.format(unitAmount, "0.00")} is greater than ${ec.l10n.format(purchasePricePercent, "0")}% of the lowest sale price ${ec.l10n.format(lowestPrice, "0.00")} for product ${orderItem.productId}', null))]]></script></if></iterate></else></if></actions></service>