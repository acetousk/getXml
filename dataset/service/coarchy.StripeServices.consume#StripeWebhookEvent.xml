<!--Service Location coarchy.StripeServices.consume#StripeWebhookEvent--><service verb="consume" noun="StripeWebhookEvent"><in-parameters><parameter name="systemMessageId" required="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage" auto-field-map="[systemMessageId:systemMessageId]" for-update="true"/><entity-find entity-name="mantle.account.method.PaymentGatewayConfig" list="paymentGatewayConfigList"><econdition field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/><econdition field-name="paymentGatewayTypeEnumId" value="PgtStripe"/><order-by field-name="-lastUpdatedStamp"/></entity-find><set field="paymentGatewayConfig" from="paymentGatewayConfigList.getFirst()"/><set field="paymentGatewayConfigId" from="paymentGatewayConfig.paymentGatewayConfigId"/><set field="messageObject" from="ec.elastic.jsonToObject(systemMessage.messageText)"/><if condition="messageObject.object == 'event' && messageObject.data.object.object == 'payment_intent'"><entity-find entity-name="mantle.account.payment.Payment" list="paymentList"><econdition field-name="paymentRefNum" from="messageObject.data.object.id"/></entity-find><if condition="paymentList.size() == 0"><set field="systemMessage.statusId" value="SmsgRejected"/><entity-update value-field="systemMessage"/><return message="No payment found for paymentRefNum ${messageObject.data.object.id}." error="true" type="danger"/></if><if condition="paymentList.size() > 1"><message type="warning"><![CDATA[Multiple payments found for paymentRefNum ${messageObject.data.object.id}. This should not happen.]]></message></if><set field="payment" from="paymentList.getFirst()"/><if condition="!payment.paymentMethodId"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList" for-update="true"><econdition field-name="ownerPartyId" from="payment.fromPartyId"/><econdition field-name="gatewayCimId" from="messageObject.data.object.payment_method"/><econdition field-name="paymentGatewayConfigId"/><date-filter/></entity-find><if condition="paymentMethodList.size() == 0"><then><service-call name="create#mantle.account.method.PaymentMethod" out-map="[paymentMethodId:context.paymentMethodId,paymentMethodTypeEnumId:context.paymentMethodTypeEnumId,purposeEnumId:context.purposeEnumId,ownerPartyId:context.ownerPartyId,description:context.description,fromDate:context.fromDate,thruDate:context.thruDate,thruDateSetAuto:context.thruDateSetAuto,openedDate:context.openedDate,titleOnAccount:context.titleOnAccount,firstNameOnAccount:context.firstNameOnAccount,middleNameOnAccount:context.middleNameOnAccount,lastNameOnAccount:context.lastNameOnAccount,suffixOnAccount:context.suffixOnAccount,companyNameOnAccount:context.companyNameOnAccount,ledgerBalance:context.ledgerBalance,availableBalance:context.availableBalance,balanceDate:context.balanceDate,loanPaymentAmount:context.loanPaymentAmount,loanPaymentPeriodUomId:context.loanPaymentPeriodUomId,currencyUomId:context.currencyUomId,postalContactMechId:context.postalContactMechId,telecomContactMechId:context.telecomContactMechId,emailContactMechId:context.emailContactMechId,gatewayCimId:context.gatewayCimId,paymentGatewayConfigId:context.paymentGatewayConfigId,imageUrl:context.imageUrl,trustLevelEnumId:context.trustLevelEnumId,paymentFraudEvidenceId:context.paymentFraudEvidenceId,glAccountId:context.glAccountId,finAccountId:context.finAccountId,originalPaymentMethodId:context.originalPaymentMethodId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[                             ownerPartyId:payment.fromPartyId,fromDate:ec.user.nowTimestamp,                             currencyUomId:messageObject.data.object.currency.toUpperCase(),                             gatewayCimId:messageObject.data.object.payment_method,                             paymentGatewayConfigId:paymentGatewayConfigId]"/><set field="payment.paymentMethodId" from="paymentMethodId"/></then><else><if condition="paymentMethodList.size() > 1"><message type="warning"><![CDATA[Multiple payment methods found for ownerPartyId ${payment.fromPartyId}, paymentGatewayConfigId ${paymentGatewayConfigId}, and gatewayCimId ${messageObject.data.object.payment_method}.]]></message></if><service-call name="update#mantle.account.method.PaymentMethod" in-map="[                             paymentMethodId:paymentMethodList.getFirst().paymentMethodId,                             ownerPartyId:payment.fromPartyId,fromDate:ec.user.nowTimestamp,                             currencyUomId:messageObject.data.object.currency.toUpperCase(),                             gatewayCimId:messageObject.data.object.payment_method,                             paymentGatewayConfigId:paymentGatewayConfigId]"/><set field="payment.paymentMethodId" from="paymentMethodList.getFirst().paymentMethodId"/></else></if><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:payment.paymentId,                         paymentMethodId:payment.paymentMethodId]"/></if><if condition="messageObject.type == 'payment_intent.processing'"><service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="[paymentGatewayResponseId:context.paymentGatewayResponseId,paymentGatewayConfigId:context.paymentGatewayConfigId,paymentOperationEnumId:context.paymentOperationEnumId,paymentId:context.paymentId,paymentMethodId:context.paymentMethodId,finAccountId:context.finAccountId,amount:context.amount,amountUomId:context.amountUomId,referenceNum:context.referenceNum,altReference:context.altReference,subReference:context.subReference,approvalCode:context.approvalCode,responseCode:context.responseCode,reasonCode:context.reasonCode,reasonMessage:context.reasonMessage,avsResult:context.avsResult,cvResult:context.cvResult,scoreResult:context.scoreResult,transactionDate:context.transactionDate,transactionStatus:context.transactionStatus,resultSuccess:context.resultSuccess,resultDeclined:context.resultDeclined,resultError:context.resultError,resultNsf:context.resultNsf,resultBadExpire:context.resultBadExpire,resultBadCardNumber:context.resultBadCardNumber,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[                           paymentGatewayConfigId:paymentGatewayConfigId,                           paymentOperationEnumId:'PgoStoreCim',                           paymentId:payment.paymentId,                           paymentMethodId:payment.paymentMethodId,                           amount: (messageObject.data.object.amount as BigDecimal) / 100,                           amountUomId:messageObject.data.object.currency.toUpperCase(),                           finAccountId:payment.finAccountId,                           transactionDate:new Timestamp(messageObject.data.object.created * 1000L),                           referenceNum:messageObject.data.object.id,                           altReference:messageObject.request.idempotency_key,                           subReference:messageObject.id,                           resultSuccess:'N',                           resultDeclined:'N',                           resultError:'N',                           resultBadExpire:'N',                           resultBadCardNumber:'N']"/></if><if condition="messageObject.type == 'payment_intent.succeeded'"><service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="[paymentGatewayResponseId:context.paymentGatewayResponseId,paymentGatewayConfigId:context.paymentGatewayConfigId,paymentOperationEnumId:context.paymentOperationEnumId,paymentId:context.paymentId,paymentMethodId:context.paymentMethodId,finAccountId:context.finAccountId,amount:context.amount,amountUomId:context.amountUomId,referenceNum:context.referenceNum,altReference:context.altReference,subReference:context.subReference,approvalCode:context.approvalCode,responseCode:context.responseCode,reasonCode:context.reasonCode,reasonMessage:context.reasonMessage,avsResult:context.avsResult,cvResult:context.cvResult,scoreResult:context.scoreResult,transactionDate:context.transactionDate,transactionStatus:context.transactionStatus,resultSuccess:context.resultSuccess,resultDeclined:context.resultDeclined,resultError:context.resultError,resultNsf:context.resultNsf,resultBadExpire:context.resultBadExpire,resultBadCardNumber:context.resultBadCardNumber,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[                           paymentGatewayConfigId:paymentGatewayConfigId,                           paymentOperationEnumId:'PgoAuthAndCapture',                           paymentId:payment.paymentId,                           paymentMethodId:payment.paymentMethodId,                           amount: (messageObject.data.object.amount as BigDecimal) / 100,                           amountUomId:messageObject.data.object.currency.toUpperCase(),                           finAccountId:payment.finAccountId,                           transactionDate:new Timestamp(messageObject.data.object.created * 1000L),                           referenceNum:messageObject.data.object.id,                           altReference:messageObject.request.idempotency_key,                           subReference:messageObject.id,                           resultSuccess:'Y',                           resultDeclined:'N',                           resultError:'N',                           resultBadExpire:'N',                           resultBadCardNumber:'N']"/><service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:payment.orderId]"/></if><if condition="messageObject.type == 'payment_intent.payment_failed'"><service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="[paymentGatewayResponseId:context.paymentGatewayResponseId,paymentGatewayConfigId:context.paymentGatewayConfigId,paymentOperationEnumId:context.paymentOperationEnumId,paymentId:context.paymentId,paymentMethodId:context.paymentMethodId,finAccountId:context.finAccountId,amount:context.amount,amountUomId:context.amountUomId,referenceNum:context.referenceNum,altReference:context.altReference,subReference:context.subReference,approvalCode:context.approvalCode,responseCode:context.responseCode,reasonCode:context.reasonCode,reasonMessage:context.reasonMessage,avsResult:context.avsResult,cvResult:context.cvResult,scoreResult:context.scoreResult,transactionDate:context.transactionDate,transactionStatus:context.transactionStatus,resultSuccess:context.resultSuccess,resultDeclined:context.resultDeclined,resultError:context.resultError,resultNsf:context.resultNsf,resultBadExpire:context.resultBadExpire,resultBadCardNumber:context.resultBadCardNumber,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[                           paymentGatewayConfigId:paymentGatewayConfigId,                           paymentOperationEnumId:'PgoRelease',                           paymentId:payment.paymentId,                           paymentMethodId:payment.paymentMethodId,                           amount: (messageObject.data.object.amount as BigDecimal) / 100,                           amountUomId:messageObject.data.object.currency.toUpperCase(),                           finAccountId:payment.finAccountId,                           transactionDate:new Timestamp(messageObject.data.object.created * 1000L),                           referenceNum:messageObject.data.object.id,                           altReference:messageObject.request.idempotency_key,                           subReference:messageObject.id,                           resultSuccess:'N',                           resultDeclined:'Y',                           resultError:'N',                           resultBadExpire:'N',                           resultBadCardNumber:'N']"/></if></if></actions></service>