<!--Service Location org.moqui.search.SearchServices.search#DataDocuments--><service verb="search" noun="DataDocuments"><in-parameters><parameter name="indexName" required="true"/><parameter name="documentType"><description><![CDATA[The ElasticSearch document type. For DataDocument based docs this is the dataDocumentId.]]></description></parameter><parameter name="queryString" required="true"/><parameter name="nestedQueryMap" type="Map"><description><![CDATA[For explicit field constraints and such; key is path and
                may be null for a general query; value is a query JSON String (parsed to Map) or a query Map object]]></description></parameter><parameter name="orderByFields" type="List"><parameter name="orderByField"/></parameter><parameter name="highlightFields" type="List"><parameter name="highlightField"/></parameter><parameter name="pageIndex" type="Integer" default="0"/><parameter name="pageSize" type="Integer" default="20"/><parameter name="pageNoLimit" type="Boolean" default="false"/><parameter name="flattenDocument" type="Boolean" default="true"/><parameter name="clusterName" default-value="default"/></in-parameters><out-parameters><parameter name="documentList" type="List"><parameter name="document" type="Map"/></parameter><parameter name="documentListCount" type="Integer"><description><![CDATA[The total count of hits, not just the limited number returned.]]></description></parameter><parameter name="documentListPageIndex" type="Integer"/><parameter name="documentListPageSize" type="Integer"/><parameter name="documentListPageMaxIndex" type="Integer"/><parameter name="documentListPageRangeLow" type="Integer"/><parameter name="documentListPageRangeHigh" type="Integer"/></out-parameters><actions><script><![CDATA[/* useful docs for query API: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html */

            import org.moqui.context.ExecutionContext
            import org.moqui.impl.context.ElasticFacadeImpl

            import java.math.RoundingMode

            ExecutionContext ec = context.ec
            def elasticClient = ec.factory.elastic.getClient((String) clusterName)
            if (elasticClient == null) {
                ec.message.addMessage("No Elastic Client found for cluster name ${clusterName}, not running search", "danger")
                return
            }

            int fromOffset = pageNoLimit ? 0 : pageIndex * pageSize
            // TODO FUTURE: for this type of search ES limits size to 10k (default for index.max_result_window, can be changed per index), must use a scroll search to do more
            int sizeLimit = pageNoLimit ? 10000 : pageSize

            documentList = []
            boolean hasHighlights = highlightFields != null && highlightFields.size() > 0

            // make sure index exists
            if (!elasticClient.indexExists((String) indexName)) {
                ec.loggerFacade.warn("Tried to search with indexName ${indexName} that does not exist, returning empty list")
                documentListCount = 0
                documentListPageIndex = pageIndex
                documentListPageSize = pageSize
                documentListPageMaxIndex = 0
                documentListPageRangeLow = 0
                documentListPageRangeHigh = 0
                return
            }

            List mustList = []
            Map queryMap = [bool: [must: mustList]]
            Map searchMap = [query: queryMap, from: fromOffset, size: sizeLimit, track_total_hits: true]

            // query string: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html
            mustList.add([query_string: [query: queryString, lenient: true, time_zone: TimeZone.default.getID()]])

            if (nestedQueryMap) {
                // nested: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html
                // wrapper: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wrapper-query.html
                // exists: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html
                for (Map.Entry nestedEntry in nestedQueryMap.entrySet()) {
                    // NOTE: could be filter() instead of must()...
                    String nestedPath = nestedEntry.key as String
                    def nestedQuery = (nestedEntry.value instanceof CharSequence) ? ElasticFacadeImpl.jsonToObject(nestedEntry.value.toString()) : nestedEntry.value
                    if (nestedPath) {
                        mustList.add([nested: [path: nestedPath, query: nestedQuery, score_mode: "avg"]])
                        // ec.logger.warn("${nestedPath}: ${nestedQuery}")
                    } else {
                        mustList.add(nestedQuery)
                    }
                }
            }
            // ec.logger.warn("queryMap : ${groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(queryMap))}")

            if (hasHighlights) {
                Map hlFieldMap = [:]
                for (String hlField in highlightFields) hlFieldMap.put(hlField, [:])
                searchMap.put("highlight", [fields: hlFieldMap])
            }
            if (orderByFields) {
                List sortList = []
                for (String orderByField in orderByFields) {
                    orderByField = orderByField.trim()
                    boolean ascending = true
                    if (orderByField.charAt(0) == (char) '-') {
                        ascending = false
                        orderByField = orderByField.substring(1)
                    } else if (orderByField.charAt(0) == (char) '+') {
                        ascending = true
                        orderByField = orderByField.substring(1)
                    }
                    // ec.logger.warn("========= adding [${orderByField}], ${ascending}; from ${orderByFields}")
                    sortList.add(ascending ? orderByField : [(orderByField): "desc"])
                }
                searchMap.put("sort", sortList)
            }

            // if documentType use instead of indexName to get only specific indexes (split on comma, ddIdToEsIndex, join with comma)
            String index = indexName
            if (documentType) index = ((String) documentType).split(",").collect({ ElasticFacadeImpl.ddIdToEsIndex(it) }).join(",")

            // validate the query
            // TODO: consider pulling error message from ElasticSearch, but they are pretty ugly
            Map validateRespMap = elasticClient.validateQuery(index, queryMap, true)
            if (validateRespMap != null) {
                ec.message.addMessage("Invalid search: ${queryString}", "danger")
                documentListCount = 0
                return
            }

            // do the search
            Map resultMap = elasticClient.search(index, searchMap)
            Map hitsMap = (Map) resultMap.hits
            List<Map> hitsList = (List<Map>) hitsMap.hits

            for (Map hit in hitsList) {
                Map document = (Map) hit._source
                if (flattenDocument) document = flattenNestedMap(document)

                // As of ES 2.0 _index, _type, _id aren't included in the document
                String _index = (String) hit._index
                document._index = _index
                document._id = hit._id
                // how to get timestamp? doesn't seem to be in API: document._timestamp = hit.get?
                document._version = hit._version
                // as of ES 7.0 _type defaults to _doc and may go away entirely in 8.0, so default to _index with underscore to camel case conversion
                String _type = (String) hit._type
                if (!_type || "_doc".equals(_type)) {
                    document._type = ElasticFacadeImpl.esIndexToDdId(_index)
                } else {
                    document._type = _type
                }

                if (hasHighlights) {
                    document.put("highlights", hit.highlight)
                    // ec.logger.warn("Highlight Fields: " + hit.highlight)
                }

                documentList.add(document)
            }

            // get the total search count
            documentListCount = hitsMap.total.value

            // calculate the pagination values
            documentListPageIndex = pageIndex
            documentListPageSize = pageSize
            documentListPageMaxIndex = ((documentListCount as BigDecimal) - 1.0).divide(documentListPageSize as BigDecimal, 0, java.math.RoundingMode.DOWN) as int
            documentListPageRangeLow = documentListPageIndex * documentListPageSize + 1
            documentListPageRangeHigh = (documentListPageIndex * documentListPageSize) + documentListPageSize
            if (documentListPageRangeHigh > documentListCount) documentListPageRangeHigh = documentListCount]]></script></actions></service>