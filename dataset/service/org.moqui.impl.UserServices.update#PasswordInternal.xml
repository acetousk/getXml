<!--Service Location org.moqui.impl.UserServices.update#PasswordInternal--><service verb="update" noun="PasswordInternal"><in-parameters><parameter name="userId" required="true"/><parameter name="newPassword" required="true"/><parameter name="newPasswordVerify" required="true"/><parameter name="requirePasswordChange" default-value="N"/></in-parameters><out-parameters><parameter name="passwordIssues" type="Boolean"/><parameter name="updateSuccessful" type="Boolean"/></out-parameters><actions><set field="passwordIssues" from="false"/><set field="updateSuccessful" from="false"/><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"/><if condition="userAccount == null"><return message="Cannot update password, Account not found with ID ${userId}" public="true" type="danger"/></if><set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/><if condition="newPassword != newPasswordVerify"><message public="true" type="danger"><![CDATA[New Password and New Password Verify do not match]]></message><set field="passwordIssues" from="true"/></if><set field="minLength" from="passwordNode.attribute('min-length')" default-value="8" type="Integer"/><if condition="newPassword.length() < minLength"><message public="true" type="warning"><![CDATA[Password shorter than ${minLength} characters]]></message><set field="passwordIssues" from="true"/></if><set field="minDigits" from="passwordNode.attribute('min-digits')" default-value="1" type="Integer"/><set field="digits" from="countChars(newPassword, true, false, false)"/><if condition="digits < minDigits"><message public="true" type="warning"><![CDATA[Password needs ${minDigits} digit/number characters]]></message><set field="passwordIssues" from="true"/></if><set field="minOthers" from="passwordNode.attribute('min-others')" default-value="1" type="Integer"/><set field="others" from="countChars(newPassword, false, false, true)"/><if condition="others < minOthers"><message public="true" type="warning"><![CDATA[Password needs ${minOthers} other characters (not letter or digit)]]></message><set field="passwordIssues" from="true"/></if><set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/><if condition="userAccount.currentPassword == hashedNewPassword"><message public="true" type="danger"><![CDATA[New password is same as current password]]></message><set field="passwordIssues" from="true"/></if><set field="historyLimit" from="passwordNode.attribute('history-limit')" default-value="5" type="Integer"/><entity-find entity-name="moqui.security.UserPasswordHistory" list="duplicateUserPasswordHistoryList"><econdition field-name="userId" from="userId"/></entity-find><iterate list="duplicateUserPasswordHistoryList" entry="duplicateUserPasswordHistory"><set field="hashedNewPassword" from="ec.ecfi.getSimpleHash(newPassword, duplicateUserPasswordHistory.passwordSalt, duplicateUserPasswordHistory.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/><if condition="duplicateUserPasswordHistory.password == hashedNewPassword"><message public="true" type="warning"><![CDATA[Password was used in last ${historyLimit} passwords]]></message><set field="passwordIssues" from="true"/></if></iterate><if condition="passwordIssues"><return error="true" message="Found issues with password so not updating"/></if><service-call name="create#moqui.security.UserPasswordHistory" in-map="[userId:userId, password:userAccount.currentPassword, passwordSalt:userAccount.passwordSalt,                         passwordHashType:userAccount.passwordHashType, fromDate:ec.user.nowTimestamp]"/><entity-find entity-name="moqui.security.UserPasswordHistory" list="existingUserPasswordHistoryList"><econdition field-name="userId" from="userId"/><order-by field-name="fromDate"/></entity-find><while condition="existingUserPasswordHistoryList.size() > historyLimit"><entity-delete value-field="existingUserPasswordHistoryList.remove(0)"/></while><set field="salt" from="ec.ecfi.randomSalt"/><service-call name="update#moqui.security.UserAccount"><field-map field-name="userId"/><field-map field-name="currentPassword" from="ec.ecfi.getSimpleHash(newPassword, salt)"/><field-map field-name="passwordSalt" from="salt"/><field-map field-name="passwordHashType" from="ec.ecfi.passwordHashType"/><field-map field-name="passwordBase64" value="N"/><field-map field-name="passwordSetDate" from="ec.user.nowTimestamp"/><field-map field-name="requirePasswordChange"/><field-map field-name="resetPassword" from="null"/><field-map field-name="disabled" value="N"/></service-call><set field="updateSuccessful" from="true"/></actions></service>