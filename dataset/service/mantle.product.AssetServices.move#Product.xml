<!--Service Location mantle.product.AssetServices.move#Product--><service verb="move" noun="Product"><in-parameters><parameter name="productId" entity-name="mantle.product.Product" field-name="productId"><description><![CDATA[If not specified and there is more than one product in location/container will do nothing and return with a message]]></description></parameter><parameter name="quantity" type="BigDecimal" required="true"/><parameter name="facilityId" required="true"/><parameter name="assetPoolId"/><parameter name="locationSeqId"><description><![CDATA[Specify either location or container, if neither specified will look for assets with no location]]></description></parameter><parameter name="containerId"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="lotId"/><parameter name="toAssetPoolId"/><parameter name="toLocationSeqId"/><parameter name="toContainerId"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="toScanLocation"><description><![CDATA[May be locationSeqId within facility, containerId, or container serialNumber]]></description></parameter><parameter name="createContainerId"/><parameter name="containerTypeEnumId" default-value="CtBinShelf"/></in-parameters><out-parameters><parameter name="assetIdList" type="List"><parameter name="assetId"/></parameter></out-parameters><actions><if condition="toScanLocation"><service-call name="mantle.product.AssetServices.check#ScanLocation" out-map="[facilityId:toScanOut.facilityId,locationSeqId:toScanOut.locationSeqId,checkFacLoc:toScanOut.checkFacLoc,containerId:toScanOut.containerId,container:toScanOut.container]" in-map="[facilityId:facilityId, locationSeqId:toLocationSeqId, containerId:toContainerId, scanLocation:toScanLocation]"/><set field="toLocationSeqId" from="toLocationSeqId ?: toScanOut.locationSeqId"/><set field="toContainerId" from="toContainerId ?: toScanOut.containerId"/></if><if condition="!locationSeqId && !containerId"><message><![CDATA[No location or container specified, moving only assets with no location]]></message></if><if condition="!toLocationSeqId && !toContainerId"><return type="warning" message="Not moving, no valid location or container found to move to"/></if><if condition="createContainerId"><if condition="toContainerId"><return type="warning" message="Create Container ID and to Container ID both specified, not creating container or moving assets"/></if><if condition="!toLocationSeqId"><if condition="toScanLocation"><then><return type="warning" message="Create Container ID specified but scanned location ${toScanLocation} not a known location"/></then><else><return type="warning" message="Create Container ID specified but no location specified, must specify location to create a container and move to"/></else></if></if><service-call name="create#mantle.product.asset.Container" out-map="[containerId:createContOut.containerId,serialNumber:createContOut.serialNumber,containerTypeEnumId:createContOut.containerTypeEnumId,createdDate:createContOut.createdDate,description:createContOut.description,externalId:createContOut.externalId,facilityId:createContOut.facilityId,locationSeqId:createContOut.locationSeqId,geoPointId:createContOut.geoPointId,lastUpdatedStamp:createContOut.lastUpdatedStamp]" in-map="[serialNumber:createContainerId, containerTypeEnumId:containerTypeEnumId, facilityId:facilityId, locationSeqId:toLocationSeqId]"/><set field="toContainerId" from="createContOut.containerId"/><message type="success"><![CDATA[Created container with serial number ${createContainerId} (internal ID ${toContainerId})]]></message></if><if condition="containerId"><if condition="container == null"><entity-find-one entity-name="mantle.product.asset.Container" value-field="container"/></if><if condition="container == null"><entity-find-one entity-name="mantle.product.asset.Container" value-field="container"><field-map field-name="serialNumber" from="containerId"/></entity-find-one><if condition="container == null"><return error="true" message="Container not found with ID or serial number ${containerId}"/></if><set field="containerId" from="container.containerId"/></if><set field="facilityId" from="container.facilityId"/><set field="locationSeqId" from="container.locationSeqId"/></if><if condition="locationSeqId"><entity-find-one entity-name="mantle.facility.FacilityLocation" value-field="checkFacLoc"><field-map field-name="facilityId"/><field-map field-name="locationSeqId"/></entity-find-one><if condition="checkFacLoc == null"><return error="true" message="Location [${locationSeqId}] is not valid in facility ${ec.resource.expand('FacilityNameTemplate', '', asset.facility)}"/></if></if><if condition="!locationSeqId"><set field="locationSeqId" from="null"/></if><entity-find entity-name="mantle.product.asset.Asset" list="assetList"><econdition field-name="productId" ignore-if-empty="true"/><econdition field-name="facilityId"/><econdition field-name="assetPoolId" ignore="!assetPoolId"/><econdition field-name="assetPoolId" ignore="assetPoolId" operator="is-null"/><econdition field-name="locationSeqId"/><econdition field-name="containerId" ignore-if-empty="true"/><econdition field-name="lotId" ignore-if-empty="true"/><econdition field-name="quantityOnHandTotal" operator="greater" from="0.0"/><order-by field-name="receivedDate"/><order-by field-name="-quantityOnHandTotal"/><order-by field-name="-assetId"/></entity-find><if condition="assetList.size() == 0"><return type="warning" message="No assets found for given parameters"/></if><set field="productIdSet" from="new HashSet(assetList*.productId)"/><if condition="productIdSet.size() > 1"><return type="warning" message="No product specified and found more than one in the location, not moving"/></if><set field="quantityRemaining" from="quantity"/><set field="assetIdList" from="[]"/><iterate list="assetList" entry="asset"><set field="curQuantity" from="quantityRemaining > asset.quantityOnHandTotal ? asset.quantityOnHandTotal : quantityRemaining"/><if condition="curQuantity != 0.0"><service-call name="mantle.product.AssetServices.move#Asset" in-map="[assetId:asset.assetId, facilityId:facilityId, quantity:curQuantity,                                 locationSeqId:toLocationSeqId, containerId:toContainerId, assetPoolId:toAssetPoolId]"/><set field="quantityRemaining" from="quantityRemaining - curQuantity"/><script><![CDATA[assetIdList.add(asset.assetId)]]></script></if><if condition="quantityRemaining == 0.0"><break/></if></iterate></actions></service>