<!--Service Location coarchy.CoarchyServices.calculate#PartyActivationUsage--><service verb="calculate" noun="PartyActivationUsage"><in-parameters><parameter name="organizationPartyId" required="true"/><parameter name="periodFromDate" type="Timestamp" required="true"><description><![CDATA[(inclusive) Start of the period to calculate activation. Rounded to midnight in default system timezone.]]></description></parameter><parameter name="periodThruDate" type="Timestamp" required="true"><description><![CDATA[(exclusive) End of the period to calculate time period. Rounded to midnight subtracted 1 millisecond in default system timezone.]]></description></parameter><parameter name="activationThruDate" type="Timestamp" default="periodThruDate" required="true"><description><![CDATA[(exclusive) End of the period to calculate activation. Rounded to midnight subtracted 1 millisecond in default system timezone.]]></description></parameter><parameter name="minActivationMinutesPerDay" type="Long" default-value="5" required="true"/></in-parameters><out-parameters><parameter name="activationPeriodCount" type="BigDecimal" required="true"><description><![CDATA[The time the organization was active
                during the period where 1 is 100% of the days and .5 is 50% of the days that at least
                minActivationMinutesPerDay was active]]></description></parameter><parameter name="dayAmountList" type="List" required="true"/><parameter name="dayCount" type="BigDecimal" required="true"/><parameter name="totalDays" type="BigDecimal" required="true"/></out-parameters><actions><if condition="periodFromDate >= periodThruDate"><log level="warn" message="Period From Date must be before Period Thru Date"/><return type="danger" error="true" message="${ec.resource.expand('CoarchyGeneralError', null)}"/></if><if condition="activationThruDate > periodThruDate"><set field="activationThruDate" from="periodThruDate"/></if><set field="periodFromDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(                 (long) periodFromDate.time), ZoneId.systemDefault()).with(LocalTime.MIN)"/><set field="periodThruDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(                 (long) periodThruDate.time-1L), ZoneId.systemDefault()).with(LocalTime.MIN)"/><set field="activationThruDateZoned" from="ZonedDateTime.ofInstant(Instant.ofEpochMilli(                 (long) activationThruDate.time-1L), ZoneId.systemDefault()).with(LocalTime.MIN)"/><set field="dayList" from="[[dateTime:periodFromDateZoned,amount:0L]]" type="List"/><set field="daysIndex" from="0"/><set field="daysBetweenPeriod" from="java.time.temporal.ChronoUnit.DAYS.between(                 periodFromDateZoned, periodThruDateZoned)" type="BigDecimal"/><if condition="daysBetweenPeriod==0"><set field="daysBetweenPeriod" from="1.0"/></if><while condition="daysIndex < daysBetweenPeriod"><set field="dayList" from="dayList + [dateTime:dayList[daysIndex].dateTime.plusDays(1),amount:0L]"/><set field="daysIndex" from="daysIndex + 1"/></while><entity-find entity-name="mantle.party.PartyActivation" list="partyActivationList"><econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="fromDate" operator="greater-equals" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())"/><econdition field-name="fromDate" operator="less" from="new Timestamp(periodThruDateZoned.toInstant().toEpochMilli())"/><order-by field-name="fromDate"/></entity-find><entity-find entity-name="mantle.party.PartyActivation" list="partyActivation1List" limit="1"><econdition field-name="partyId" from="organizationPartyId"/><econdition field-name="fromDate" operator="less" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())"/><econdition field-name="thruDate" operator="greater-equals" from="new Timestamp(periodFromDateZoned.toInstant().toEpochMilli())" or-null="true"/><order-by field-name="-fromDate"/></entity-find><set field="partyActivationList" from="partyActivation1List + partyActivationList"/><if condition="partyActivationList.size() == 0"><set field="activationPeriodCount" from="0.0" type="BigDecimal"/><return/></if><set field="firstPartyActivation" from="partyActivationList.getFirst()"/><set field="firstDay" from="dayList[0]"/><if condition="firstPartyActivation.fromDate.toInstant() < firstDay.dateTime.toInstant()"><then><set field="daysIndex" from="0"/></then><else><set field="daysIndex" from="java.time.temporal.ChronoUnit.DAYS.between(firstDay.dateTime,                     ZonedDateTime.ofInstant(Instant.ofEpochMilli((long) firstPartyActivation.fromDate.time),                     ZoneId.systemDefault()))"/></else></if><iterate list="partyActivationList" entry="partyActivation"><set field="partyActivationThruDate" from="partyActivation.thruDate ?: new Timestamp(dayList[dayList.size()-1].dateTime.plusDays(1).toInstant().toEpochMilli())"/><if condition="partyActivationThruDate.toInstant() > activationThruDateZoned.toInstant()"><set field="partyActivationThruDate" from="new Timestamp(activationThruDateZoned.toInstant().toEpochMilli())"/></if><while condition="daysIndex <= daysBetweenPeriod"><set field="dayActivationFromDate" from="partyActivation.fromDate.toInstant() <                         dayList[daysIndex].dateTime.toInstant() ? dayList[daysIndex].dateTime.toInstant() :                         partyActivation.fromDate.toInstant()"/><set field="dayActivationThruDate" from="partyActivationThruDate.toInstant() >                         dayList[daysIndex].dateTime.plusDays(1).toInstant() ? dayList[daysIndex].dateTime.plusDays(1).toInstant() :                         partyActivationThruDate.toInstant()"/><set field="dayActivationAmount" from="Duration.between(dayActivationFromDate,dayActivationThruDate).toMillis()"/><if condition="dayActivationAmount < 0"><set field="dayActivationAmount" from="0L"/><log level="warn" message="Amount of milliseconds between activation from and thru dates is negative"/></if><set field="dayList[daysIndex].amount" from="dayList[daysIndex].amount+dayActivationAmount"/><if condition="partyActivationThruDate.toInstant() > dayList[daysIndex].dateTime.plusDays(1).toInstant()"><then><set field="daysIndex" from="daysIndex + 1"/></then><else><break/></else></if></while></iterate><set field="dayCount" from="dayList.sum{it.amount >=                 minActivationMinutesPerDay * 60.0 * 1000.0 ? 1.0 : 0.0}" type="BigDecimal"/><set field="totalDays" from="daysBetweenPeriod!=0?daysBetweenPeriod:1" type="BigDecimal"/><set field="activationPeriodCount" from="dayCount / totalDays" type="BigDecimal"/><set field="dayAmountList" from="dayList*.amount"/></actions></service>