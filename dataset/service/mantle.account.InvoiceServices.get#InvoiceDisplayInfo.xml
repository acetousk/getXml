<!--Service Location mantle.account.InvoiceServices.get#InvoiceDisplayInfo--><service verb="get" noun="InvoiceDisplayInfo"><in-parameters><parameter name="invoiceId" required="true"/><parameter name="activeOrgId"/></in-parameters><out-parameters><parameter name="invoice" type="Map"/><parameter name="editableStatusIds" type="Set"><parameter name="statusId"/></parameter><parameter name="invoiceEditable" type="Boolean"/><parameter name="recordPaymentStatusIds" type="Set"><parameter name="statusId"/></parameter><parameter name="canRecordPayments" type="Boolean"/><parameter name="isFromPartyOrgInternal" type="Boolean"/><parameter name="isToPartyOrgInternal" type="Boolean"/><parameter name="organizationPartyId"><description><![CDATA[Org considered primary for this invoice to determine payable or
                receivable; based on activeOrgId if specified, otherwise defaults to whichever party has role OrgInternal and
                defaulting to fromPartyId]]></description></parameter><parameter name="isPayableInvoice" type="Boolean"><description><![CDATA[If true invoice is payable for activeOrgId or default logic, otherwise is receivable]]></description></parameter><parameter name="statusFlowId"/><parameter name="dupInvoiceList" type="List"><description><![CDATA[List of invoices matching referenceNumber and
                other party (non org internal)]]></description><parameter name="dupInvoice" type="Map"/></parameter><parameter name="invoiceTotal" type="BigDecimal"/><parameter name="appliedPaymentsTotal" type="BigDecimal"/><parameter name="unpaidTotal" type="BigDecimal"/><parameter name="paymentApplicationList" type="List"><parameter name="paymentApplication" type="Map"/></parameter><parameter name="unappliedPaymentInfoList" type="List"><parameter name="unappliedPaymentInfo" type="Map"/></parameter><parameter name="unpaidInvoiceInfoList" type="List"><parameter name="unpaidInvoiceInfo" type="Map"><parameter name="invoice" type="Map"/><parameter name="invoiceTotal" type="BigDecimal"/><parameter name="appliedPaymentsTotal" type="BigDecimal"/><parameter name="unpaidTotal" type="BigDecimal"/><parameter name="maxApplicableAmount" type="BigDecimal"/></parameter></parameter><parameter name="statusHistoryList" type="List"><parameter name="auditLog" type="Map"/></parameter><parameter name="orderItemBillingList" type="List"><parameter name="orderItemBilling" type="Map"/></parameter><parameter name="orderIdSet" type="Set"><parameter name="orderId"/></parameter><parameter name="orderPromisedPaymentList" type="List"><parameter name="orderPromisedPayment" type="Map"/></parameter><parameter name="shipmentItemSourceList" type="List"><parameter name="shipmentItemSource" type="Map"/></parameter><parameter name="shipmentIdSet" type="Set"><parameter name="shipmentId"/></parameter><parameter name="returnItemBillingList" type="List"><parameter name="returnItemBilling" type="Map"/></parameter><parameter name="returnIdSet" type="Set"><parameter name="returnId"/></parameter><parameter name="acctgTransList" type="List"><parameter name="acctgTrans" type="Map"/></parameter><parameter name="acctgTransIdSet" type="Set"><parameter name="acctgTransId"/></parameter></out-parameters><actions><service-call name="mantle.account.InvoiceServices.get#InvoiceBasicInfo" out-map="[invoice:context.invoice,editableStatusIds:context.editableStatusIds,invoiceEditable:context.invoiceEditable,recordPaymentStatusIds:context.recordPaymentStatusIds,canRecordPayments:context.canRecordPayments,isFromPartyOrgInternal:context.isFromPartyOrgInternal,isToPartyOrgInternal:context.isToPartyOrgInternal,organizationPartyId:context.organizationPartyId,isPayableInvoice:context.isPayableInvoice,statusFlowId:context.statusFlowId,invoiceTotal:context.invoiceTotal,appliedPaymentsTotal:context.appliedPaymentsTotal,unpaidTotal:context.unpaidTotal]" in-map="[invoiceId:invoiceId, activeOrgId:activeOrgId]"/><if condition="isFromPartyOrgInternal && invoice.referenceNumber"><entity-find entity-name="mantle.account.invoice.Invoice" list="dupInvoiceList"><econdition field-name="invoiceId" operator="not-equals"/><econdition field-name="toPartyId" from="invoice.toPartyId"/><econdition field-name="referenceNumber" from="invoice.referenceNumber"/></entity-find></if><if condition="isToPartyOrgInternal && invoice.referenceNumber"><entity-find entity-name="mantle.account.invoice.Invoice" list="dupInvoiceList"><econdition field-name="invoiceId" operator="not-equals"/><econdition field-name="fromPartyId" from="invoice.fromPartyId"/><econdition field-name="referenceNumber" from="invoice.referenceNumber"/></entity-find></if><entity-find entity-name="mantle.account.payment.PaymentApplication" list="paymentApplicationList"><econditions combine="or"><econdition field-name="invoiceId"/><econdition field-name="toInvoiceId" from="invoiceId"/></econditions><order-by field-name="appliedDate"/></entity-find><entity-find entity-name="mantle.account.payment.Payment" list="unappliedPaymentList" limit="50"><econdition field-name="fromPartyId" from="invoice.toPartyId"/><econdition field-name="toPartyId" from="invoice.fromPartyId"/><econdition field-name="paymentTypeEnumId" operator="in" value="PtInvoicePayment,PtPrePayment,PtPrePaymentInventory"/><econdition field-name="statusId" operator="in" value="PmntPromised,PmntAuthorized,PmntDelivered,PmntConfirmed"/><econdition field-name="unappliedTotal" operator="greater" from="0.0"/><order-by field-name="effectiveDate,paymentId"/></entity-find><set field="unappliedPaymentInfoList" from="[]"/><iterate list="unappliedPaymentList" entry="unappliedPayment"><service-call name="mantle.account.PaymentServices.get#PaymentTotals" in-map="[paymentId:unappliedPayment.paymentId]" out-map="[paymentTotal:pmtTotal.paymentTotal,appliedTotal:pmtTotal.appliedTotal,unappliedTotal:pmtTotal.unappliedTotal]" out-map-add-to-existing="false"/><set field="maxApplicableAmount" from="unpaidTotal"/><if condition="maxApplicableAmount > pmtTotal.unappliedTotal"><set field="maxApplicableAmount" from="pmtTotal.unappliedTotal"/></if><script><![CDATA[unappliedPaymentInfoList.add(pmtTotal + [payment:unappliedPayment, maxApplicableAmount:maxApplicableAmount,
                        allowApply:(maxApplicableAmount && unappliedPayment.statusId in ['PmntDelivered','PmntConfirmed'])])]]></script></iterate><entity-find entity-name="mantle.account.invoice.Invoice" list="unpaidInvoiceList" limit="50"><econdition field-name="fromPartyId" from="invoice.toPartyId"/><econdition field-name="toPartyId" from="invoice.fromPartyId"/><econdition field-name="statusId" operator="in" value="InvoiceInProcess,InvoiceFinalized,InvoiceSent,InvoiceAcked,InvoiceReceived,InvoiceApproved"/><econdition field-name="unpaidTotal" operator="greater" from="0.0"/><order-by field-name="invoiceDate,invoiceId"/></entity-find><set field="unpaidInvoiceInfoList" from="[]"/><iterate list="unpaidInvoiceList" entry="unpaidInvoice"><service-call name="mantle.account.InvoiceServices.get#InvoiceTotal" in-map="[invoiceId:unpaidInvoice.invoiceId]" out-map="[invoiceTotal:invTot.invoiceTotal,appliedPaymentsTotal:invTot.appliedPaymentsTotal,unpaidTotal:invTot.unpaidTotal]" out-map-add-to-existing="false"/><set field="maxApplicableAmount" from="unpaidTotal"/><if condition="maxApplicableAmount > invTot.unpaidTotal"><set field="maxApplicableAmount" from="invTot.unpaidTotal"/></if><script><![CDATA[unpaidInvoiceInfoList.add(invTot + [invoice:unpaidInvoice, maxApplicableAmount:maxApplicableAmount,
                    allowApply:(maxApplicableAmount && unpaidInvoice.statusId in ['InvoiceFinalized','InvoiceSent','InvoiceAcked','InvoiceApproved'])])]]></script></iterate><entity-find entity-name="moqui.entity.EntityAuditLog" list="statusHistoryList"><econdition field-name="changedEntityName" value="mantle.account.invoice.Invoice"/><econdition field-name="changedFieldName" value="statusId"/><econdition field-name="pkPrimaryValue" from="invoiceId"/><order-by field-name="changedDate"/></entity-find><entity-find entity-name="mantle.order.OrderItemBilling" list="orderItemBillingList"><econdition field-name="invoiceId"/><order-by field-name="invoiceItemSeqId"/></entity-find><set field="orderIdSet" from="new TreeSet(orderItemBillingList*.orderId)"/><if condition="orderIdSet"><entity-find entity-name="mantle.account.payment.Payment" list="orderPromisedPaymentList"><econdition field-name="orderId" operator="in" from="orderIdSet"/><econdition field-name="statusId" operator="in" value="PmntPromised,PmntAuthorized"/></entity-find></if><entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList"><econdition field-name="invoiceId"/></entity-find><set field="shipmentIdSet" from="new TreeSet(shipmentItemSourceList*.shipmentId)"/><entity-find entity-name="mantle.order.return.ReturnItemBilling" list="returnItemBillingList"><econdition field-name="invoiceId"/></entity-find><set field="returnIdSet" from="new TreeSet(returnItemBillingList*.returnId)"/><entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="acctgTransList"><econdition field-name="invoiceId"/></entity-find><set field="acctgTransIdSet" from="new TreeSet(acctgTransList*.acctgTransId)"/></actions></service>