<!--Service Location mantle.shipment.ShipmentServices.pack#ShipmentAssemblyComponent--><service verb="pack" noun="ShipmentAssemblyComponent"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="productId" required="true"><description><![CDATA[ID of the assembly component Product]]></description></parameter><parameter name="assemblyProductId"><description><![CDATA[If not specified will iterate through the ShipmentItem Pick Assembly Products found with the component product in its Mfg BOM]]></description></parameter><parameter name="quantity" type="BigDecimal" required="true"/><parameter name="shipmentPackageSeqId"/><parameter name="packDate" type="Timestamp" default="ec.user.nowTimestamp"/><parameter name="assetId"><description><![CDATA[Specify to pack a certain asset, may or may not be reserved.]]></description></parameter><parameter name="forceIssueOther" type="Boolean" default="false"/><parameter name="forceAddToPackage" type="Boolean" default="true"><description><![CDATA[Add to new package if no shipmentPackageSeqId specified]]></description></parameter></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/><if condition="shipment.statusId in ['ShipPacked', 'ShipShipped', 'ShipDelivered', 'ShipRejected', 'ShipCancelled']"><return error="true" message="Cannot pack Shipment ${shipmentId} in status ${shipment.status?.description ?: shipment.statusId}"/></if><if condition="shipment.statusId in ['ShipInput', 'ShipScheduled']"><service-call name="update#mantle.shipment.Shipment" in-map="[shipmentId:shipmentId, statusId:'ShipPicked']"/></if><entity-find entity-name="mantle.shipment.ShipmentItemAssocView" list="componentItemList"><date-filter/><econdition field-name="shipmentId"/><econdition field-name="toProductId" from="productId"/><econdition field-name="itemProductTypeEnumId" value="PtPickAssembly"/><econdition field-name="productAssocTypeEnumId" value="PatMfgBom"/><order-by field-name="productId"/></entity-find><entity-find-one entity-name="mantle.product.Product" value-field="componentProduct" cache="true"><field-map field-name="productId"/></entity-find-one><if condition="!assemblyProductId"><then><if condition="componentItemList"><then><set field="allAssemblyProductIds" from="new TreeSet(componentItemList*.productId)"/></then><else><return error="true" message="No assembly product found for component ${ec.resource.expand('ProductNameTemplate', null, componentProduct)} on Shipment ${shipmentId}"/></else></if></then><else><entity-find-one entity-name="mantle.product.Product" value-field="assemblyProduct" cache="true"><field-map field-name="productId" from="assemblyProductId"/></entity-find-one><entity-find-one entity-name="mantle.shipment.ShipmentItem" value-field="shipmentItem"><field-map field-name="shipmentId"/><field-map field-name="productId" from="assemblyProductId"/></entity-find-one><if condition="shipmentItem == null"><return error="true" message="Assembly product ${ec.resource.expand('ProductNameTemplate', null, assemblyProduct)} not found on Shipment ${shipmentId}"/></if><filter-map-list list="componentItemList" to-list="verifyItemList"><field-map field-name="productId" from="assemblyProductId"/></filter-map-list><if condition="!verifyItemList"><return error="true" message="Product ${ec.resource.expand('ProductNameTemplate', null, componentProduct)} is not a component of assembly product ${ec.resource.expand('ProductNameTemplate', null, assemblyProduct)}"/></if><set field="allAssemblyProductIds" from="[assemblyProductId]"/></else></if><if condition="assetId"><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"/><if condition="asset == null"><return error="true" message="Asset ${assetId} not found, not packing"/></if><if condition="productId != asset.productId"><return error="true" message="Asset product ${asset.productId} is not the same as shipment assembly component ${ec.resource.expand('ProductNameTemplate', null, componentProduct)}, not packing"/></if><if condition="quantity > asset.quantityOnHandTotal"><return error="true" message="Quantity specified ${ec.l10n.format(quantity, null)} is greater than asset ${assetId} quantity on hand ${ec.l10n.format(asset.quantityOnHandTotal, null)}, not packing"/></if></if><set field="assemblyWorkEffortId" from="shipment.assemblyWorkEffortId"/><if condition="!assemblyWorkEffortId"><service-call name="mantle.work.ManufacturingServices.create#ShipmentAssemblyWorkEffort" in-map="[shipmentId:shipmentId]" out-map="[assemblyWorkEffortId:createWeOut.assemblyWorkEffortId]"/><set field="assemblyWorkEffortId" from="createWeOut.assemblyWorkEffortId"/></if><set field="shipmentTotalQuantity" from="componentItemList.collect({ (it.quantity ?: 0.0) * (it.componentQuantity ?: 1.0) }).sum()"/><entity-find entity-name="mantle.product.issuance.AssetIssuance" list="assemblyIssuanceList"><econdition field-name="workEffortId" from="assemblyWorkEffortId"/><econdition field-name="productId"/></entity-find><set field="assemblyQuantity" from="assemblyIssuanceList*.quantity.sum()"/><if condition="assemblyQuantity >= shipmentTotalQuantity"><return error="true" message="Already packed, assembly has ${ec.l10n.format(assemblyQuantity, null)} out of ${ec.l10n.format(shipmentTotalQuantity, null)} of component ${ec.resource.expand('ProductNameTemplate', null, componentProduct)}"/></if><set field="quantityRemaining" from="quantity"/><iterate list="allAssemblyProductIds" entry="assemblyProductId"><if condition="quantityRemaining == 0.0"><break/></if><entity-find entity-name="mantle.shipment.ShipmentItemSource" list="sisList"><econdition field-name="shipmentId"/><econdition field-name="productId" from="assemblyProductId"/><order-by field-name="orderId,orderItemSeqId"/></entity-find><iterate list="sisList" entry="shipmentItemSource"><if condition="quantityRemaining == 0.0"><break/></if><filter-map-list list="componentItemList" to-list="curComponentAssocList"><field-map field-name="productId" from="assemblyProductId"/></filter-map-list><if condition="curComponentAssocList"><then><set field="sisMaxQty" from="shipmentItemSource.quantity * (curComponentAssocList[0].componentQuantity ?: 1.0)"/><set field="curSisQtyRemaining" from="quantityRemaining > sisMaxQty ? sisMaxQty : quantityRemaining"/></then><else><set field="curSisQtyRemaining" from="quantityRemaining > shipmentItemSource.quantity ? shipmentItemSource.quantity : quantityRemaining"/></else></if><entity-find entity-name="mantle.product.issuance.AssetReservation" list="assetReservationList"><econdition field-name="orderId" from="shipmentItemSource.orderId"/><econdition field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/><econdition field-name="quantityNotIssued" operator="not-equals" from="0.0"/><econdition field-name="productId"/><econdition field-name="assetId" ignore-if-empty="true"/><order-by field-name="assetId"/></entity-find><iterate list="assetReservationList" entry="assetReservation"><set field="quantityToIssue" from="assetReservation.quantityNotIssued > curSisQtyRemaining ?                                 curSisQtyRemaining : assetReservation.quantityNotIssued"/><if condition="quantityToIssue <= 0.0"><continue/></if><set field="curSisQtyRemaining" from="curSisQtyRemaining > quantityToIssue ? (curSisQtyRemaining - quantityToIssue) : 0.0"/><set field="quantityRemaining" from="quantityRemaining > quantityToIssue ? (quantityRemaining - quantityToIssue) : 0.0"/><service-call name="mantle.product.AssetServices.issue#AssetReservation" in-map="[assetReservation:assetReservation, workEffortId:assemblyWorkEffortId,                                     issuedDate:packDate, quantity:quantityToIssue]"/></iterate></iterate><if condition="quantityRemaining && asset != null"><set field="assetQuantityRemaining" from="asset.quantityOnHandTotal > quantityRemaining ?                         quantityRemaining : asset.quantityOnHandTotal"/><iterate list="sisList" entry="shipmentItemSource"><set field="quantityToIssue" from="shipmentItemSource.quantity > assetQuantityRemaining ?                             assetQuantityRemaining : shipmentItemSource.quantity"/><set field="assetQuantityRemaining" from="assetQuantityRemaining > quantityToIssue ? (assetQuantityRemaining - quantityToIssue) : 0.0"/><set field="quantityRemaining" from="quantityRemaining > quantityToIssue ? (quantityRemaining - quantityToIssue) : 0.0"/><service-call name="mantle.product.AssetServices.displace#AssetReservations" in-map="[assetId:assetId, orderId:shipmentItemSource.orderId,                                 orderItemSeqId:shipmentItemSource.orderItemSeqId, quantity:quantityToIssue]"/><service-call name="mantle.product.AssetServices.issue#AssetToWorkEffort" in-map="[assetId:asset.assetId, asset:asset, workEffortId:assemblyWorkEffortId, quantity:quantityToIssue,                                 issuedDate:packDate, noOriginFacility:'ignore']"/><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"/></iterate></if><if condition="quantityRemaining"><iterate list="sisList" entry="shipmentItemSource"><if condition="quantityRemaining == 0.0"><break/></if><service-call name="mantle.product.AssetServices.issue#AnyAssetForShipmentItemSource" out-map="[quantityRemaining:issueAnyOut.quantityRemaining]" in-map="[shipmentItemSourceId:shipmentItemSource.shipmentItemSourceId, quantity:quantityRemaining,                                     issuedDate:packDate, workEffortId:assemblyWorkEffortId, workEffortOnly:true, forceIssueOther:forceIssueOther]"/><set field="quantityRemaining" from="issueAnyOut.quantityRemaining"/></iterate></if></iterate><if condition="quantityRemaining"><return error="true" message="Could not pack and issue ${quantityRemaining} of ${quantity}, inventory not available, not packing (component ${productId} assemblies ${allAssemblyProductIds})"/></if><service-call name="mantle.work.ManufacturingServices.produce#AvailableAssemblies" in-map="[workEffortId:assemblyWorkEffortId, shipmentId:shipmentId, receivedDate:packDate]"/><service-call name="mantle.work.ManufacturingServices.get#ProducedProductComplete" in-map="[workEffortId:assemblyWorkEffortId]" out-map="[estimatedQtyByProduct:producedCompleteOut.estimatedQtyByProduct,producedQtyByProduct:producedCompleteOut.producedQtyByProduct,allEstimatedProduced:producedCompleteOut.allEstimatedProduced]"/><if condition="producedCompleteOut.allEstimatedProduced"><service-call name="update#mantle.work.effort.WorkEffort" in-map="[workEffortId:assemblyWorkEffortId, statusId:'WeComplete', actualCompletionDate:ec.user.nowTimestamp]"/></if></actions></service>