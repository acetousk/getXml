<!--Service Location mantle.product.ProductServices.remove#FeatureFromProducts--><service verb="remove" noun="FeatureFromProducts"><in-parameters><parameter name="productFeatureId" required="true"/><parameter name="productIdList" type="List"><parameter name="productId"/></parameter></in-parameters><out-parameters/><actions><if condition="!productIdList"><return type="danger" message="No products specified"/></if><set field="removedCount" from="0"/><set field="alreadyCount" from="0"/><iterate list="productIdList" entry="productId"><set field="productId" from="productId.trim()"/><entity-find entity-name="mantle.product.feature.ProductFeatureAppl" list="existingPfaList"><date-filter/><econdition field-name="productId"/><econdition field-name="productFeatureId"/></entity-find><if condition="existingPfaList"><then><iterate list="existingPfaList" entry="existingPfa"><service-call name="update#mantle.product.feature.ProductFeatureAppl" in-map="[productId:productId, productFeatureId:productFeatureId,                                     fromDate:existingPfa.fromDate, thruDate:ec.user.nowTimestamp]"/></iterate><script><![CDATA[removedCount++]]></script></then><else><script><![CDATA[alreadyCount++]]></script></else></if></iterate><entity-find-one entity-name="mantle.product.feature.ProductFeature" value-field="productFeature"><field-map field-name="productFeatureId"/></entity-find-one><message><![CDATA[Removed feature ${ec.resource.expand('ProductFeatureNameTemplate','',productFeature)} from ${removedCount} products (${alreadyCount} did not have it)]]></message></actions></service>