<!--Service Location org.moqui.impl.WikiServices.update#WikiPage--><service verb="update" noun="WikiPage"><in-parameters><parameter name="wikiSpaceId" required="true" entity-name="moqui.resource.wiki.WikiPage" field-name="wikiSpaceId"/><parameter name="wikiPageId" entity-name="moqui.resource.wiki.WikiPage" field-name="wikiPageId"><description><![CDATA[Optional, existing pages normally looked up by pagePath, use to refer to a specific existing page]]></description></parameter><parameter name="pagePath" entity-name="moqui.resource.wiki.WikiPage" field-name="pagePath"><description><![CDATA[Defaults to parentPath/pageName (both may be empty, resulting in empty pagePath).
                To update a pageName of an existing page this must be specified along with the new pageName.]]></description></parameter><parameter name="parentPath"/><parameter name="pageName" required="true"><description><![CDATA[This is required for better usability. If pageName == wikiSpaceId is treated as the root page.]]></description><matches regexp="[\w\.\-,':()!\? ]*" message="Invalid page name (letters, digits, [.,'-_:()!? ] only)"/></parameter><parameter name="wikiType" default-value="md"/><parameter name="pageText" allow-html="any"><description><![CDATA[If WikiSpace.allowAnyHtml = Y will be stored as-is, otherwise filtered like parameter.allow-html=safe.]]></description></parameter><parameter name="sequenceNum" type="Integer" entity-name="moqui.resource.wiki.WikiPage" field-name="sequenceNum"/></in-parameters><out-parameters><parameter name="wikiPageId" entity-name="moqui.resource.wiki.WikiPage" field-name="wikiPageId"/><parameter name="pagePath" entity-name="moqui.resource.wiki.WikiPage" field-name="pagePath"/><parameter name="encodedPagePath"/></out-parameters><actions><if condition="pageName == wikiSpaceId"><set field="pageName" from="null"/></if><if condition="parentPath == wikiSpaceId"><set field="parentPath" from="null"/></if><entity-find-one entity-name="moqui.resource.wiki.WikiSpace" value-field="wikiSpace" cache="true"/><if condition="wikiSpace == null"><return error="true" message="Wiki Space with ID ${wikiSpaceId} not found"/></if><if condition="!wikiSpace.rootPageLocation"><return error="true" message="Wiki Space with ID ${wikiSpaceId} has no root page location"/></if><set field="rootPageLocation" from="wikiSpace.rootPageLocation"/><set field="spaceRootName" from="rootPageLocation.substring(rootPageLocation.lastIndexOf('/')+1)"/><if condition="spaceRootName.contains('.')"><set field="spaceRootName" from="spaceRootName.substring(0, spaceRootName.lastIndexOf('.'))"/></if><if condition="parentPath == spaceRootName"><set field="parentPath" from="null"/></if><if condition="wikiPageId"><then><entity-find-one entity-name="moqui.resource.wiki.WikiPage" value-field="wikiPage" cache="true"/><set field="wikiSpaceId" from="wikiPage.wikiSpaceId"/><set field="pagePath" from="wikiPage.pagePath"/><if condition="!parentPath"><set field="parentPath" from="pagePath.contains('/') ? pagePath.substring(0, pagePath.lastIndexOf('/')) : null"/></if></then><else><if condition="!pagePath"><set field="pagePath" from="(parentPath ? parentPath+'/' : '') + (pageName?:'')"/></if><service-call name="org.moqui.impl.WikiServices.get#WikiPageId" in-map="context + [createIfMissing:true]" out-map="[wikiPageId:context.wikiPageId,wikiPage:context.wikiPage,createdRecord:context.createdRecord]"/></else></if><if condition="wikiPage == null"><return error="true" message="Wiki Page [${wikiSpaceId}/${pagePath}] does not exist and could not be created"/></if><if condition="wikiSpace.restrictUpdate == 'Y'"><entity-find entity-name="moqui.resource.wiki.WikiSpaceUser" list="wsuList"><econdition-object field="[wikiSpaceId:wikiSpaceId, userId:ec.user.userId, allowUpdate:'Y']"/></entity-find><if condition="!wsuList"><return error="true" message="Wiki Space [${wikiSpaceId}] has restricted update and user ${ec.user.username} [${ec.user.userId}] is not allowed."/></if></if><if condition="wikiPage.restrictUpdate == 'Y'"><entity-find entity-name="moqui.resource.wiki.WikiPageUser" list="wpuList"><econdition-object field="[wikiPageId:wikiPageId, userId:ec.user.userId, allowUpdate:'Y']"/></entity-find><if condition="!wpuList"><return error="true" message="Wiki Page [${wikiSpaceId}/${pagePath}] has restricted update and user ${ec.user.username} [${ec.user.userId}] is not allowed."/></if></if><if condition="sequenceNum != null && sequenceNum != wikiPage.sequenceNum"><service-call name="update#moqui.resource.wiki.WikiPage" in-map="[wikiPageId:wikiPageId, sequenceNum:sequenceNum]"/></if><set field="rootPageRef" from="ec.resource.getLocationReference(wikiSpace.rootPageLocation)"/><set field="pageReference" from="rootPageRef.findChildFile(pagePath)"/><if condition="!pageReference.exists"><set field="fullPagePath" value="${pagePath}.${wikiType}"/><set field="pageReference" from="rootPageRef.findChildFile(fullPagePath)"/></if><if condition="wikiSpace.allowAnyHtml != 'Y' && wikiType == 'html'"><script><![CDATA[pageText = org.jsoup.Jsoup.clean(pageText, "", org.jsoup.safety.Safelist.relaxed(), org.moqui.impl.service.ParameterInfo.outputSettings)]]></script></if><set field="updatedPage" from="false"/><set field="versionName" from="null"/><script><![CDATA[if (pageText != pageReference.getText()) {
                    pageReference.putText(pageText)
                    if (pageReference.supportsVersion()) versionName = pageReference.getCurrentVersion()?.versionName
                    updatedPage = true
                }]]></script><set field="wikiPageHistoryMap" from="[wikiPageId:wikiPageId, userId:ec.user.userId, changeDateTime:ec.user.nowTimestamp, versionName:versionName]"/><set field="origParentPath" from="pagePath.contains('/') ? pagePath.substring(0, pagePath.lastIndexOf('/')) : ''"/><set field="origPageName" from="pagePath.contains('/') ? pagePath.substring(pagePath.lastIndexOf('/')+1) : pagePath"/><if condition="pageName && (origParentPath != parentPath || origPageName != pageName)"><log message="update#WikiPage path ${pagePath} pageName=${pageName} origPageName=${origPageName} parentPath=${parentPath} origParentPath=${origParentPath}"/><set field="rootPageDirRef" from="rootPageRef.findMatchingDirectory()"/><set field="newPageLocation" value="${rootPageDirRef.location}${parentPath ? '/' + parentPath : ''}/${pageName}.${wikiType}"/><log message="update#WikiPage move page ${pageReference.location} to ${newPageLocation}"/><script><![CDATA[pageReference.move(newPageLocation)]]></script><set field="pageDirReference" from="pageReference.findMatchingDirectory()"/><set field="newPageDirLocation" value="${rootPageDirRef.location}${parentPath ? '/' + parentPath : ''}/${pageName}"/><log message="update#WikiPage move directory ${pageDirReference.location} to ${newPageDirLocation}"/><script><![CDATA[pageDirReference.move(newPageDirLocation)]]></script><set field="wikiPageHistoryMap.oldPagePath" from="pagePath"/><set field="pagePath" value="${parentPath ? parentPath+'/' : ''}${pageName?:''}"/><if condition="pagePath != wikiPage.pagePath"><set field="wikiPageForUpdate" from="wikiPage.cloneValue()"/><set field="wikiPageForUpdate.pagePath" from="pagePath"/><entity-update value-field="wikiPageForUpdate"/><set field="updatedPage" from="true"/></if></if><if condition="updatedPage"><service-call name="create#moqui.resource.wiki.WikiPageHistory" in-map="wikiPageHistoryMap"/></if><script><![CDATA[List pathElementList = pagePath.split('/') as List
                StringBuffer encodedPagePathSb = new StringBuffer()
                for (String pathElement in pathElementList) {
                    if (encodedPagePathSb.length() > 0) encodedPagePathSb.append("/")
                    encodedPagePathSb.append(java.net.URLEncoder.encode(pathElement, "UTF-8"))
                }
                encodedPagePath = encodedPagePathSb.toString()]]></script></actions></service>