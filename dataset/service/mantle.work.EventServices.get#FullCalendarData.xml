<!--Service Location mantle.work.EventServices.get#FullCalendarData--><service verb="get" noun="FullCalendarData"><in-parameters><parameter name="facilityId"/><parameter name="facilityIdList" type="List"><parameter name="facilityId"/></parameter><parameter name="partyId"/><parameter name="partyIdList" type="List"><parameter name="partyId"/></parameter><parameter name="assetId"/><parameter name="assetIdList" type="List"><parameter name="assetId"/></parameter><parameter name="start" required="true"/><parameter name="end" required="true"/><parameter name="titleGString" default-value="\${(workEffort.workEffortName ?: (workEffort.purposeEnumId ? workEffort.purpose.description : 'Event')) + ' [' + workEffort.workEffortId + ']'}"/><parameter name="urlGString"/></in-parameters><out-parameters><parameter name="eventList" type="List"><parameter name="eventMap" type="Map"><parameter name="id"/><parameter name="title"/><parameter name="start"><description><![CDATA[actualStartDate or estimatedStartDate as ISO8601 formatted String]]></description></parameter><parameter name="end"><description><![CDATA[actualCompletionDate or estimatedCompletionDate (or if null start date +
                        actualWorkDuration, estimatedWorkDuration, or estimatedWorkTime) as a ISO8601 (yyyy-MM-dd'T'HH:mm:ss) formatted String]]></description></parameter><parameter name="url"><description><![CDATA[Only returned if urlGString is specified]]></description></parameter></parameter></parameter></out-parameters><actions><set field="startTs" from="ec.l10n.parseTimestamp(start.toString() + ' 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')"/><set field="endTs" from="ec.l10n.parseTimestamp(end.toString() + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')"/><set field="startDate" from="ec.l10n.parseDate(start.toString(), 'yyyy-MM-dd')"/><set field="endDate" from="ec.l10n.parseDate(end.toString(), 'yyyy-MM-dd')"/><set field="facilityIdSet" from="new HashSet()"/><if condition="facilityId"><script><![CDATA[facilityIdSet.add(facilityId)]]></script></if><if condition="facilityIdList"><script><![CDATA[facilityIdSet.addAll(facilityIdList)]]></script></if><set field="partyIdSet" from="new HashSet()"/><if condition="partyId"><script><![CDATA[partyIdSet.add(partyId)]]></script></if><if condition="partyIdList"><script><![CDATA[partyIdSet.addAll(partyIdList)]]></script></if><set field="assetIdSet" from="new HashSet()"/><if condition="assetId"><script><![CDATA[assetIdSet.add(assetId)]]></script></if><if condition="assetIdList"><script><![CDATA[assetIdSet.addAll(assetIdList)]]></script></if><set field="eventList" from="[]"/><if condition="!facilityIdSet && !partyIdSet && !assetIdSet"><return/></if><entity-find entity-name="mantle.work.effort.WorkEffortPartyAsset" list="workEffortList"><econdition field-name="workEffortTypeEnumId" value="WetEvent"/><econditions combine="or"><econdition field-name="visibilityEnumId" value="WevAllUsers"/><econdition field-name="facilityId" operator="in" from="facilityIdSet" ignore-if-empty="true"/><econdition field-name="assetId" operator="in" from="assetIdSet" ignore-if-empty="true"/><econdition field-name="ownerPartyId" operator="in" from="partyIdSet" ignore-if-empty="true"/><econdition field-name="partyId" operator="in" from="partyIdSet" ignore-if-empty="true"/></econditions><econditions combine="or"><econditions combine="and"><econditions combine="or"><econdition field-name="estimatedStartDate" operator="greater-equals" from="startTs"/><econdition field-name="recurStartCron" operator="is-not-null"/></econditions><econdition field-name="estimatedStartDate" operator="less-equals" from="endTs"/><econditions combine="or"><econdition field-name="recurEndDate" operator="greater-equals" from="startTs"/><econdition field-name="recurEndDate" operator="is-null"/></econditions></econditions><econditions combine="and"><econditions combine="or"><econdition field-name="actualStartDate" operator="greater-equals" from="startTs"/><econdition field-name="recurStartCron" operator="is-not-null"/></econditions><econdition field-name="actualStartDate" operator="less-equals" from="endTs"/><econditions combine="or"><econdition field-name="recurEndDate" operator="greater-equals" from="startTs"/><econdition field-name="recurEndDate" operator="is-null"/></econditions></econditions><econditions combine="and"><econditions combine="or"><econdition field-name="allDayStart" operator="greater-equals" from="startDate"/><econdition field-name="recurStartCron" operator="is-not-null"/></econditions><econdition field-name="allDayStart" operator="less-equals" from="endDate"/><econditions combine="or"><econdition field-name="recurEndDate" operator="greater-equals" from="startDate"/><econdition field-name="recurEndDate" operator="is-null"/></econditions></econditions></econditions><select-field field-name="workEffortId,purposeEnumId,workEffortName,description,location,timeUomId,allDayStart,allDayEnd"/><select-field field-name="actualStartDate,actualCompletionDate,actualWorkTime,actualWorkDuration"/><select-field field-name="estimatedStartDate,estimatedCompletionDate,estimatedWorkTime,estimatedWorkDuration,recurStartCron"/></entity-find><iterate list="workEffortList" entry="workEffort"><set field="title" from="ec.resource.expand(titleGString, '')"/><set field="startEndOut" from="null"/><service-call name="mantle.work.WorkEffortServices.get#WorkEffortStartEnd" out-map="[startDate:startEndOut.startDate,endDate:startEndOut.endDate,duration:startEndOut.duration,allDay:startEndOut.allDay]" in-map="[workEffortId:workEffort.workEffortId, workEffort:workEffort]"/><if condition="workEffort.recurStartCron != null"><script><![CDATA[parser = new com.cronutils.parser.CronParser(com.cronutils.model.definition.CronDefinitionBuilder.instanceDefinitionFor(com.cronutils.model.CronType.QUARTZ))
                    quartzCron = parser.parse(workEffort.recurStartCron)
                    startZdt = java.time.ZonedDateTime.ofInstant(startDate.toLocalDate().atStartOfDay(java.time.ZoneOffset.UTC).toInstant(), java.time.ZoneId.systemDefault());
                    endZdt = java.time.ZonedDateTime.ofInstant(endDate.toLocalDate().atStartOfDay(java.time.ZoneOffset.UTC).toInstant(), java.time.ZoneId.systemDefault());
                    startEndOutStartZdt = java.time.ZonedDateTime.ofInstant(startEndOut.startDate.toLocalDateTime().toLocalDate().atStartOfDay(java.time.ZoneOffset.UTC).toInstant(), java.time.ZoneId.systemDefault());
                    startEndDiff = 0
                    if(startEndOut.endDate != null) {
                        startEndDiff = startEndOut.endDate.getTime() - startEndOut.startDate.getTime() 
                    }
                
                    executionTime = com.cronutils.model.time.ExecutionTime.forCron(quartzCron)
                    nextExecution = startZdt;
                    while(nextExecution.isBefore(endZdt)) {
                        nextExecution = executionTime.nextExecution(nextExecution).get()
                        if (!startEndOutStartZdt.isBefore(nextExecution)) {
                            continue
                        }
                        endExecution = nextExecution.plus(startEndDiff, java.time.temporal.ChronoUnit.MILLIS);
                        dateFormat = 'yyyy-MM-dd\'T\'HH:mm:ss'
                        if (startEndOut.allDay) {
                            dateFormat = 'yyyy-MM-dd'
                        }    
                        start = ec.l10n.format(Date.from(nextExecution.toInstant()), dateFormat)
                        end = ec.l10n.format(Date.from(endExecution.toInstant()), dateFormat)
                        eventList.add([id:workEffort.workEffortId, title:title, start:start, end:end, url:url, allDay:startEndOut.allDay])
                    }]]></script><else><if condition="startEndOut.allDay"><then><set field="start" from="ec.l10n.format(startEndOut.startDate, 'yyyy-MM-dd')"/><set field="end" from="ec.l10n.format(startEndOut.endDate, 'yyyy-MM-dd')"/></then><else><set field="start" from="ec.l10n.format(startEndOut.startDate, 'yyyy-MM-dd\'T\'HH:mm:ss')"/><set field="end" from="ec.l10n.format(startEndOut.endDate, 'yyyy-MM-dd\'T\'HH:mm:ss')"/></else></if><if condition="urlGString"><then><set field="url" from="ec.resource.expand(urlGString, '')"/></then><else><set field="url" value=""/></else></if><script><![CDATA[eventList.add([id:workEffort.workEffortId, title:title, start:start, end:end, url:url, allDay:startEndOut.allDay])]]></script></else></if></iterate></actions></service>