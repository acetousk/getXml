<!--Service Location mantle.product.TenantSubscriptionServices.init#Tenant--><service verb="init" noun="Tenant"><in-parameters><parameter name="subscriptionId" required="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.product.subscription.Subscription" value-field="subscription" for-update="true"/><if condition="subscription.resourceInstanceId"><return error="true" message="Subscription already associated with tenant ${subscription.resourceInstanceId}, cannot initialize"/></if><entity-find-one entity-name="moqui.security.UserAccount" value-field="sua"><field-map field-name="partyId" from="subscription.subscriberPartyId"/></entity-find-one><set field="tenantId" from="subscription.subscriberPartyId"/><set field="curHost" from="ec.web?.getHostName(false) ?: 'localhost'"/><set field="hostName" from="tenantId + '.' + (curHost.contains('.') ? curHost.substring(0, curHost.indexOf('.')) : curHost)"/><set field="tenantMap" from="[tenantId:tenantId, hostName:hostName, tenantName:sua.userFullName]"/><set field="randomPassword" from="getRandomString(10) + 'a1!'"/><set field="userMap" from="[username:sua.username, userFullName:sua.userFullName,                     newPassword:randomPassword, newPasswordVerify:randomPassword,                     emailAddress:sua.emailAddress, currencyUomId:sua.currencyUomId, locale:sua.locale, timeZone:sua.timeZone]"/><service-call name="org.moqui.impl.TenantServices.provision#TenantDatabase" in-map="tenantMap + userMap + [waitForSetup:true]"/><log level="warn" message="TenantSubscriptionServices.init#Tenant after provision#TenantDatabase cur tenant ${ec.tenantId}, tx cache active ${ec.transaction.isTransactionCacheActive()}, tx ${ec.transaction.getTransactionManager().getTransaction()}"/><set field="subscription.resourceInstanceId" from="tenantId"/><entity-update value-field="subscription"/></actions></service>