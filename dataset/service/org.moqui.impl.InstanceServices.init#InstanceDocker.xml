<!--Service Location org.moqui.impl.InstanceServices.init#InstanceDocker--><service verb="init" noun="InstanceDocker"><in-parameters><parameter name="appInstanceId" required="true"/></in-parameters><out-parameters><parameter name="connectSuccess" type="Boolean"/><parameter name="instanceCreated" type="Boolean"/><parameter name="instanceExists" type="Boolean"/><parameter name="instanceUuid"/><parameter name="warnings"/></out-parameters><actions><script><![CDATA[import groovy.json.JsonSlurper
            import org.moqui.BaseException
            import org.moqui.context.ExecutionContext
            import org.moqui.entity.EntityValue
            import org.moqui.util.RestClient
            import java.util.concurrent.Future
            import java.io.BufferedReader
            import java.io.InputStreamReader
            import java.io.IOException
            import groovy.json.JsonOutput

            connectSuccess = null
            instanceCreated = false
            instanceExists = null
            instanceUuid = null
            warnings = null

            ExecutionContext ec = context.ec
            EntityValue appInstance = ec.entity.find("moqui.server.instance.AppInstance").condition("appInstanceId", appInstanceId).one()
            EntityValue instanceHost = appInstance.findRelatedOne("instanceHost", null, null)
            if (instanceHost == null) {
                ec.message.addError("No InstanceHost found for AppInstance ${appInstanceId}"); return;
            }
            EntityValue instanceImage = appInstance.findRelatedOne("image", null, null)
            if (instanceImage == null) {
                ec.message.addError("No InstanceImage found for AppInstance ${appInstanceId}"); return;
            }
            EntityValue instanceImageType = instanceImage.findRelatedOne("imageType", null, null)

            RestClient restClient = ec.service.rest().method("POST")
            restClient.uri().protocol(instanceHost.hostProtocol ? (String) instanceHost.hostProtocol : "http")
                    .host(instanceHost.hostAddress as String).port(instanceHost.adminPort ? (instanceHost.adminPort as int) : 2375)
                    .path("containers").path("create").parameter("name", (String) appInstance.instanceName).build()

            Map hostConfigMap = [RestartPolicy: [Name: "unless-stopped"]] as Map<String, Object>
            List<String> linkList = []
            for (Map link in appInstance.links) linkList.add("${link.instanceName}:${link.aliasName ?: link.instanceName}")
            if (linkList) hostConfigMap.Links = linkList
            String networkMode = appInstance.networkMode ?: instanceImageType.defaultNetworkMode
            if (networkMode) hostConfigMap.NetworkMode = networkMode

            List<String> envList = []
            for (Map env in appInstance.envs) if (env.envValue) envList.add("${env.envName}=${env.envValue}")

            List<String> bindList = []
            for (Map vol in appInstance.vols) if (vol.mountPoint && vol.volumeName) bindList.add("${vol.volumeName}:${vol.mountPoint}")
            if (bindList) hostConfigMap.Binds = bindList

            for (Map hostConf in appInstance.hostConfigs) if (hostConf.hostConfigName && hostConf.hostConfigValue) {
                if (hostConf.type == null || hostConf.type == 'String') hostConfigValue = hostConf.hostConfigValue
                else if (hostConf.type == 'Number') hostConfigValue = ec.l10n.parseNumber(hostConf.hostConfigValue, null)
                else throw new BaseException("Unknown type '${hostConf.type}' for hostConfig")
                hostConfigMap.put(hostConf.hostConfigName, hostConfigValue)
            }

            Map jsonBody = [Image: instanceImage.imageName, Env: envList, HostConfig: hostConfigMap]
            String initCommand = appInstance.initCommand ?: instanceImageType.defaultInitCommand
            if (initCommand) jsonBody.Cmd = initCommand

            if (appInstance.jsonConfig) {
                Map baseConfigMap = (Map) new JsonSlurper().parseText((String) appInstance.jsonConfig)
                org.moqui.util.CollectionUtilities.mergeNestedMap(baseConfigMap, jsonBody, false)
                jsonBody = baseConfigMap
            }

            ec.logger.info("Initializing docker container for ${appInstance.instanceName} with:\n${jsonBody}")
            restClient.jsonObject(jsonBody)

            try {
                authTokenPass = null
                if (instanceImage.authTokenCmd) {
                    try {
                        Process processCmd = Runtime.getRuntime().exec((instanceImage.authTokenCmd).split(" "), null)
                        BufferedReader readToken = new BufferedReader(new InputStreamReader(processCmd.getInputStream()))
                        authTokenPass = readToken.readLine()
                    }
                    catch (IOException io) {
                        authTokenPass = null
                        ec.logger.log(ec.logger.ERROR_INT, "Error connecting to Docker host in processing aws cmd", io)
                        ec.message.addError("Error connecting to Docker host: ${io.toString()}")
                    }

                }
                else {
                    authTokenPass = instanceImage.password
                }
                Map jsonAuth = [username: instanceImage.username , password: authTokenPass , email: instanceImage.emailAddress , serveraddress: instanceImage.registryLocation ]
                //Registry-Location now using as Server-Address
                String json = (String) JsonOutput.toJson(jsonAuth)
                String authEncoded = Base64.getEncoder().encodeToString(json.getBytes())
                Map param = [fromImage:(String) instanceImage.imageName ,repo : (String)instanceImage.imageName]
                RestClient restClientImageCreate = ec.service.rest().method("POST").addHeader((String)("X-Registry-Auth"),(String) authEncoded)
                restClientImageCreate.uri().protocol(instanceHost.hostProtocol ? (String) instanceHost.hostProtocol : "http")
                .host(instanceHost.hostAddress as String).port(instanceHost.adminPort ? (instanceHost.adminPort as int) : 2375)
                .path("images").path("create")
                .parameters(param).build()
                restClientImageCreate.timeout(1000)

                RestClient.RestResponse restResponseImageCreate = restClientImageCreate.call()
                if (restResponseImageCreate.statusCode != 200) {
                     ec.message.addMessage("Error Image-pull-fail problem image not-exists either or credential is wrong (${restResponseImageCreate.statusCode}): ${restResponseImageCreate.getReasonPhrase()}")
                }
            } catch (Exception e) {
                connectSuccess = false
                ec.logger.log(ec.logger.ERROR_INT, "Error connecting to Docker host", e)
                ec.message.addError("Error connecting to Docker host: ${e.toString()}")
            }

            try {
                RestClient.RestResponse restResponse = restClient.call()
                connectSuccess = true

                if (restResponse.statusCode == 201) {
                    instanceCreated = true
                    instanceExists = true

                    Map jsonObj = (Map) restResponse.jsonObject()
                    instanceUuid = jsonObj.Id
                    warnings = jsonObj.Warnings

                    if (instanceUuid) {
                        appInstance.instanceUuid = instanceUuid
                        appInstance.update()
                    }

                    ec.message.addMessage("Created Docker container ${appInstance.instanceName} (${appInstance.instanceUuid})${warnings ? ' warnings: ' + (warnings as String) : ''}")
                } else if (restResponse.statusCode == 409) {
                    instanceExists = true
                    ec.logger.warn("Docker container ${appInstance.instanceName} (${appInstance.instanceUuid}) conflict [${restResponse.getReasonPhrase()}]:\n${restResponse.text()}")
                    ec.message.addMessage("Docker container ${appInstance.instanceName} (${appInstance.instanceUuid}) got a conflict on create [${restResponse.getReasonPhrase()}]")
                } else if (restResponse.statusCode == 404) {
                    // POST /v1.24/images/create?fromImage=busybox&tag=latest HTTP/1.1
                    ec.message.addMessage("Image not Found ,or may be Docker login fail")
                } else {
                    ec.logger.error("Docker container ${appInstance.instanceName} (${appInstance.instanceUuid}) ERROR [${restResponse.getReasonPhrase()}]:\n${restResponse.text()}")
                    ec.message.addMessage("Error on create container for ${appInstance.instanceName} (${restResponse.statusCode}): ${restResponse.getReasonPhrase()}")
                }
            } catch (Exception e) {
                connectSuccess = false
                ec.logger.log(ec.logger.ERROR_INT, "Error connecting to Docker host", e)
                ec.message.addError("Error connecting to Docker host: ${e.toString()}")
            }]]></script></actions></service>