<!--Service Location mantle.work.ProjectServices.get#ProjectMilestoneSummary--><service verb="get" noun="ProjectMilestoneSummary"><in-parameters><parameter name="workEffortId" required="true"><description><![CDATA[Project WorkEffort ID]]></description></parameter><parameter name="timePerDay" type="BigDecimal" default="8"/></in-parameters><out-parameters><parameter name="milestoneStatsList" type="List"><parameter name="listEntry" type="Map"><parameter name="workEffortId"/><parameter name="workEffortName"/><parameter name="estimatedStartDate"/><parameter name="estimatedWorkTime" type="BigDecimal"/><parameter name="estimatedSetupTime" type="BigDecimal"/><parameter name="remainingWorkTime" type="BigDecimal"/><parameter name="actualWorkTime" type="BigDecimal"/><parameter name="actualSetupTime" type="BigDecimal"/><parameter name="totalTimeAllowed" type="BigDecimal"/><parameter name="estimatedWorkDays" type="BigDecimal"/><parameter name="remainingWorkDays" type="BigDecimal"/><parameter name="actualWorkDays" type="BigDecimal"/><parameter name="totalTimeAllowedDays" type="BigDecimal"/><parameter name="workTimePercentComplete" type="BigDecimal"><description><![CDATA[(estimatedWorkTime-remainingWorkTime)/estimatedWorkTime]]></description></parameter><parameter name="workRemainingPercent" type="BigDecimal"><description><![CDATA[remainingWorkTime/estimatedWorkTime]]></description></parameter><parameter name="workActualPercent" type="BigDecimal"><description><![CDATA[actualWorkTime/estimatedWorkTime]]></description></parameter><parameter name="workActRemPercent" type="BigDecimal"><description><![CDATA[(actualWorkTime+remainingWorkTime)/estimatedWorkTime]]></description></parameter><parameter name="actualCost" type="BigDecimal"/><parameter name="actualClientCost" type="BigDecimal"/><parameter name="totalClientCostAllowed" type="BigDecimal"/></parameter></parameter></out-parameters><actions><set field="statsFields" from="['estimatedWorkTime', 'estimatedSetupTime', 'remainingWorkTime',                     'actualWorkTime', 'actualSetupTime', 'totalTimeAllowed', 'actualCost', 'actualClientCost',                     'totalClientCostAllowed']"/><entity-find entity-name="mantle.work.effort.WorkEffort" list="milestoneList"><econdition field-name="rootWorkEffortId" from="workEffortId"/><econdition field-name="workEffortTypeEnumId" value="WetMilestone"/><order-by field-name="estimatedStartDate,workEffortName"/></entity-find><set field="milestoneStatsTotals" from="[workEffortId: 'Total', workEffortName: '', estimatedStartDate: '']"/><script><![CDATA[for (String statsField in statsFields) milestoneStatsTotals.put(statsField, 0.0)]]></script><set field="milestoneStatsList" from="[]"/><iterate list="milestoneList" entry="milestone"><set field="milestoneStats" from="[workEffortId:milestone.workEffortId, workEffortName:milestone.workEffortName,                                                    estimatedStartDate:milestone.estimatedStartDate]"/><entity-find entity-name="mantle.work.effort.MilestoneSummary" list="msSummaryList"><date-filter/><econdition field-name="workEffortId" from="milestone.workEffortId"/><select-field field-name="estimatedWorkTime,estimatedSetupTime,remainingWorkTime,actualWorkTime,actualSetupTime,totalTimeAllowed,actualCost,actualClientCost,totalClientCostAllowed"/></entity-find><if condition="msSummaryList"><script><![CDATA[Map msSummary = msSummaryList.get(0)
                    for (String statsField in statsFields) milestoneStats.put(statsField, msSummary.get(statsField) ?: 0.0)

                    milestoneStats.estimatedWorkDays = milestoneStats.estimatedWorkTime / timePerDay
                    milestoneStats.remainingWorkDays = milestoneStats.remainingWorkTime / timePerDay
                    milestoneStats.actualWorkDays = milestoneStats.actualWorkTime / timePerDay
                    milestoneStats.totalTimeAllowedDays = milestoneStats.totalTimeAllowed / timePerDay
                    milestoneStats.workTimePercentComplete = milestoneStats.estimatedWorkTime ? ((milestoneStats.estimatedWorkTime - milestoneStats.remainingWorkTime) / milestoneStats.estimatedWorkTime) * 100 : 0.0
                    milestoneStats.workRemainingPercent = milestoneStats.estimatedWorkTime ? (milestoneStats.remainingWorkTime / milestoneStats.estimatedWorkTime) * 100 : 0.0
                    milestoneStats.workActualPercent = milestoneStats.estimatedWorkTime ? (milestoneStats.actualWorkTime / milestoneStats.estimatedWorkTime) * 100 : 0.0
                    milestoneStats.workActRemPercent = milestoneStats.estimatedWorkTime ? ((milestoneStats.actualWorkTime + milestoneStats.remainingWorkTime) / milestoneStats.estimatedWorkTime) * 100 : 0.0

                    milestoneStatsList.add(milestoneStats)

                    // add current values to stats totals
                    for (String statsField in statsFields) milestoneStatsTotals[statsField] += milestoneStats[statsField]]]></script></if></iterate><script><![CDATA[// add the totals Map to the end of the list
                milestoneStatsTotals.estimatedWorkDays = milestoneStatsTotals.estimatedWorkTime / timePerDay
                milestoneStatsTotals.remainingWorkDays = milestoneStatsTotals.remainingWorkTime / timePerDay
                milestoneStatsTotals.actualWorkDays = milestoneStatsTotals.actualWorkTime / timePerDay
                milestoneStatsTotals.totalTimeAllowedDays = milestoneStatsTotals.totalTimeAllowed / timePerDay
                milestoneStatsTotals.workTimePercentComplete = milestoneStatsTotals.estimatedWorkTime ? ((milestoneStatsTotals.estimatedWorkTime - milestoneStatsTotals.remainingWorkTime) / milestoneStatsTotals.estimatedWorkTime) * 100 : 0.0
                milestoneStatsTotals.workRemainingPercent = milestoneStatsTotals.estimatedWorkTime ? (milestoneStatsTotals.remainingWorkTime / milestoneStatsTotals.estimatedWorkTime) * 100 : 0.0
                milestoneStatsTotals.workActualPercent = milestoneStatsTotals.estimatedWorkTime ? (milestoneStatsTotals.actualWorkTime / milestoneStatsTotals.estimatedWorkTime) * 100 : 0.0
                milestoneStatsTotals.workActRemPercent = milestoneStatsTotals.estimatedWorkTime ? ((milestoneStatsTotals.actualWorkTime + milestoneStatsTotals.remainingWorkTime) / milestoneStatsTotals.estimatedWorkTime) * 100 : 0.0
                milestoneStatsList.add(milestoneStatsTotals)]]></script></actions></service>