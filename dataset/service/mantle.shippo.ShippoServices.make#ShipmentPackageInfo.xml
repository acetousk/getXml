<!--Service Location mantle.shippo.ShippoServices.make#ShipmentPackageInfo--><service verb="make" noun="ShipmentPackageInfo"><in-parameters><parameter name="packageRouteSeg" type="EntityValue" required="true"/><parameter name="routeSegment" type="EntityValue" required="true"/><parameter name="shipment" type="EntityValue" required="true"/><parameter name="getReturnLabels" type="Boolean" required="true"/><parameter name="productStoreId"/><parameter name="address_from" type="Object"/><parameter name="address_return" type="Object"/><parameter name="address_to" type="Object"/></in-parameters><out-parameters><parameter name="skipPackage" type="Boolean"/><parameter name="parcel" type="Map"/><parameter name="extraMap" type="Map"/><parameter name="shipmentMap" type="Map"/><parameter name="insuredAmount" type="BigDecimal"/></out-parameters><actions><set field="shipmentId" from="packageRouteSeg.shipmentId"/><set field="shipmentRouteSegmentSeqId" from="packageRouteSeg.shipmentRouteSegmentSeqId"/><set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/><set field="carrierPartyId" from="routeSegment.carrierPartyId"/><set field="skipPackage" from="false"/><set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/><if condition="getReturnLabels"><then><if condition="packageRouteSeg.returnGatewayLabelId || packageRouteSeg.returnLabelUrl"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} already has return label ${packageRouteSeg.returnGatewayLabelId}, skipping package]]></message><set field="skipPackage" from="true"/><return/></if></then><else><if condition="packageRouteSeg.gatewayLabelId || packageRouteSeg.labelUrl"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} already has label ${packageRouteSeg.gatewayLabelId}, skipping package]]></message><set field="skipPackage" from="true"/><return/></if></else></if><entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="shipmentPackage"/><set field="boxType" from="shipmentPackage.boxType"/><if condition="boxType == null"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} has no box type, skipping]]></message><set field="skipPackage" from="true"/><return/></if><set field="dimUom" from="boxType.dimensionUom"/><if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null"><message type="warning"><![CDATA[Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package]]></message><set field="skipPackage" from="true"/><return/></if><set field="weightUom" from="shipmentPackage.weightUom ?: boxType.weightUom"/><set field="weight" from="shipmentPackage.weight ?: boxType.defaultGrossWeight"/><if condition="!weight || weightUom == null"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package]]></message><set field="skipPackage" from="true"/><return/></if><set field="distance_unit" from="dimUom.abbreviation"/><if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package]]></message><set field="skipPackage" from="true"/><return/></if><set field="mass_unit" from="weightUom.abbreviation"/><if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])"><message type="warning"><![CDATA[Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package]]></message><set field="skipPackage" from="true"/><return/></if><set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,                         distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/><service-call name="mantle.shipment.CarrierServices.get#ShipmentPackageRequiresInsurance" out-map="[insuranceRequired:insuranceReqOut.insuranceRequired,packageTotalCost:insuranceReqOut.packageTotalCost,contentDescription:insuranceReqOut.contentDescription]" out-map-add-to-existing="false" in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId, shipment:shipment]"/><if condition="insuranceReqOut.insuranceRequired && insuranceReqOut.packageTotalCost"><set field="insuredAmount" from="insuranceReqOut.packageTotalCost"/><set field="parcel.extra" from="[insurance:[amount:insuredAmount, currency:(shipment.costUomId ?: 'USD'),                     content:insuranceReqOut.contentDescription]]"/></if><set field="reference1" value="Shipment ${shipmentId}"/><entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList"><econdition field-name="shipmentId"/><econdition field-name="orderId" operator="is-not-null"/><select-field field-name="orderId"/></entity-find><set field="orderIdSet" from="shipmentItemSourceList ? new TreeSet(shipmentItemSourceList*.orderId) : null"/><if condition="orderIdSet"><entity-find entity-name="mantle.order.OrderHeader" list="orderHeaderList"><econdition field-name="orderId" operator="in" from="orderIdSet"/><econdition field-name="displayId" operator="is-not-null"/><select-field field-name="orderId,displayId"/></entity-find><iterate list="orderHeaderList" entry="orderHeader"><script><![CDATA[if (orderHeader.displayId) { orderIdSet.remove(orderHeader.orderId); orderIdSet.add(orderHeader.displayId) }]]></script></iterate><set field="reference1" value="Order ${orderIdSet.join(', ')} ${reference1}"/></if><if condition="reference1.length() > 50"><set field="reference1" from="reference1.substring(0, 50)"/></if><set field="reference2" value=""/><if condition="shipment.otherPartyOrderId"><set field="reference2" value="Your Order ${shipment.otherPartyOrderId}"/></if><set field="extraMap" from="[reference_1:reference1, reference_2:reference2, bypass_address_validation:true, is_return:getReturnLabels]"/><if condition="shipment.signatureRequiredEnumId && shipment.signatureRequiredEnumId != 'PsrNone'"><set field="signatureRequiredEnum" from="shipment.signatureRequiredEnum"/><if condition="signatureRequiredEnum?.enumCode"><then><set field="extraMap.signature_confirmation" from="signatureRequiredEnum.enumCode"/></then><else><message type="warning"><![CDATA[Shipment ${shipmentId} has signatureRequiredEnumId ${shipment.signatureRequiredEnumId} and Enumeration has no enumCode, not setting Shippo extra.signature_confirmation]]></message></else></if></if><if condition="productStoreId"><entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway" value-field="pssg"><field-map field-name="productStoreId"/><field-map field-name="carrierPartyId"/></entity-find-one><if condition="pssg?.billingType"><set field="extraMap.billing" from="[type:pssg.billingType, account:pssg.billingAccount,                                 zip:pssg.billingZip, country:pssg.billingCountry]"/></if></if><if condition="getReturnLabels"><then><if condition="address_return"><then><set field="shipmentMap" from="[object_purpose:'PURCHASE', address_from:address_return, address_to:address_to, parcels:[parcel], extra:extraMap, async:false]"/></then><else><set field="shipmentMap" from="[object_purpose:'PURCHASE', address_from:address_from, address_to:address_to, parcels:[parcel], extra:extraMap, async:false]"/></else></if></then><else><set field="shipmentMap" from="[object_purpose:'PURCHASE', address_from:address_from, address_to:address_to, parcels:[parcel], extra:extraMap, async:false]"/><if condition="address_return"><set field="shipmentMap.address_return" from="address_return"/></if></else></if></actions></service>