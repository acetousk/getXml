<!--Service Location mantle.work.ManufacturingServices.produce#AvailableAssemblies--><service verb="produce" noun="AvailableAssemblies"><in-parameters><parameter name="workEffortId" required="true"/><parameter name="shipmentId"><description><![CDATA[If specified will issue to this Shipment]]></description></parameter><parameter name="receivedDate" type="Timestamp" default="ec.user.nowTimestamp"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.work.effort.WorkEffort" value-field="workEffort"/><service-call name="mantle.work.ManufacturingServices.get#ConsumedAssetRemaining" in-map="[workEffortId:workEffortId]" out-map="[consumeWepList:context.consumeWepList,produceWepList:context.produceWepList,componentIssuedQtyByProduct:context.componentIssuedQtyByProduct,componentUsedQtyByProduct:context.componentUsedQtyByProduct,componentIssuedAvailable:context.componentIssuedAvailable,assemblyCanProduceQty:context.assemblyCanProduceQty,assemblyReceivedByProduct:context.assemblyReceivedByProduct]"/><while condition="assemblyCanProduceQty"><set field="assemblyProductId" from="assemblyCanProduceQty.keySet().iterator().next()"/><set field="assemblyProduceQty" from="assemblyCanProduceQty.get(assemblyProductId)"/><if condition="assemblyProduceQty"><entity-find entity-name="mantle.product.receipt.AssetReceipt" list="existingReceiptList"><econdition field-name="productId" from="assemblyProductId"/><econdition field-name="workEffortId"/><order-by field-name="assetReceiptId"/></entity-find><if condition="existingReceiptList"><then><set field="existingReceipt" from="existingReceiptList[0]"/><service-call name="mantle.product.AssetServices.update#AssetAndReceipt" out-map="[assetDetailId:updateOut.assetDetailId]" out-map-add-to-existing="false" in-map="[assetId:existingReceipt.assetId, assetReceiptId:existingReceipt.assetReceiptId,                                     workEffortId:workEffortId, receivedDate:packDate,                                     quantityAccepted:((existingReceipt.quantityAccepted ?: 0.0) + assemblyProduceQty)]"/><set field="packAssetId" from="existingReceipt.assetId"/></then><else><service-call name="mantle.product.AssetServices.receive#Asset" out-map="[assetId:receiveOut.assetId,assetReceiptId:receiveOut.assetReceiptId,assetDetailId:receiveOut.assetDetailId]" out-map-add-to-existing="false" in-map="[productId:assemblyProductId, quantity:assemblyProduceQty, statusId:'AstPromised',                                     receivedDate:receivedDate, facilityId:workEffort.facilityId,                                     ownerPartyId:workEffort.ownerPartyId, workEffortId:workEffortId]"/><set field="packAssetId" from="receiveOut.assetId"/></else></if><if condition="shipmentId"><service-call name="mantle.shipment.ShipmentServices.pack#ShipmentProduct" in-map="[productId:assemblyProductId, shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,                                     quantity:assemblyProduceQty, packDate:packDate, assetId:packAssetId]"/></if></if><service-call name="mantle.work.ManufacturingServices.get#ConsumedAssetRemaining" in-map="[workEffortId:workEffortId]" out-map="[consumeWepList:context.consumeWepList,produceWepList:context.produceWepList,componentIssuedQtyByProduct:context.componentIssuedQtyByProduct,componentUsedQtyByProduct:context.componentUsedQtyByProduct,componentIssuedAvailable:context.componentIssuedAvailable,assemblyCanProduceQty:context.assemblyCanProduceQty,assemblyReceivedByProduct:context.assemblyReceivedByProduct]"/></while></actions></service>