<!--Service Location mantle.shippo.ShippoServices.refund#ShippingLabels--><service verb="refund" noun="ShippingLabels"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="shipmentRouteSegmentSeqId" required="true"/><parameter name="shipmentPackageSeqId"/><parameter name="shippingGatewayConfigId" required="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not voiding/refunding label"/><return/></if><entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList"><econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/><econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/></entity-find><iterate list="packageRouteSegList" entry="packageRouteSeg"><if condition="!packageRouteSeg.gatewayLabelId"><message><![CDATA[Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} has no Shippo label, skipping package]]></message><continue/></if><if condition="packageRouteSeg.gatewayRefundId"><message><![CDATA[Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} Shippo label ${packageRouteSeg.gatewayLabelId} already has refund ${packageRouteSeg.gatewayRefundId}, skipping package]]></message><continue/></if><set field="requestMap" from="[transaction:packageRouteSeg.gatewayLabelId]"/><script><![CDATA[org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2018-02-08")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                            .retry(1.0F,2)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("refunds").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        continue
                    }
                    responseMap = restResponse.jsonObject()]]></script><if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj"><message><![CDATA[(${messageObj.source}:${messageObj.code}) ${messageObj.text}]]></message></iterate></if><set field="packageRouteSeg.gatewayRefundStatus" from="responseMap.status"/><set field="packageRouteSeg.gatewayRefundId" from="responseMap.object_id"/><entity-update value-field="packageRouteSeg"/><if condition="responseMap.status != 'SUCCESS'"><message><![CDATA[Shippo refund status ${responseMap.status} for package ${shipmentPackageSeqId}]]></message></if></iterate></actions></service>