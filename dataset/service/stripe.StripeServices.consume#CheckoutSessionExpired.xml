<!--Service Location stripe.StripeServices.consume#CheckoutSessionExpired--><service verb="consume" noun="CheckoutSessionExpired"><in-parameters><parameter name="systemMessage" type="EntityValue"/><parameter name="paymentGatewayConfig" type="EntityValue"/><parameter name="paymentGatewayConfigId"/><parameter name="messageObject" type="Map"/><parameter name="orderPart" type="EntityValue"/></in-parameters><out-parameters/><actions><set field="partyId" from="orderPart.customerPartyId"/><if condition="messageObject.data.object.customer"><if condition="partyId"><then><entity-find-one entity-name="mantle.party.PartyIdentification" value-field="partyIdentification" auto-field-map="[partyId:partyId,partyIdTypeEnumId:'PtidSci']" for-update="true"/><if condition="partyIdentification?.idValue && partyIdentification.idValue != messageObject.data.object.customer"><set field="partyIdentification.idValue" from="messageObject.data.object.customer"/><entity-update value-field="partyIdentification"/></if><if condition="partyIdentification && partyIdentification.expireDate <= new Timestamp(System.currentTimeMillis())"><set field="identificationPartyId" from="partyId"/></if></then><else><entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentificationList" limit="1"><econdition field-name="partyIdTypeEnumId" value="PtidSci"/><econdition field-name="idValue" from="messageObject.data.object.customer"/><econdition field-name="expireDate" operator="less-equals" from="new Timestamp(System.currentTimeMillis())"/><order-by field-name="-lastUpdatedStamp"/></entity-find><set field="identificationPartyId" from="partyIdentificationList.getFirst()?.partyId"/></else></if><if condition="identificationPartyId && partyId && identificationPartyId != partyId"><log level="warn" message="A partyId was found for the customer ${messageObject.data.object.customer} but it is not the same as the orderPart.customerPartyId ${partyId}"/></if><if condition="!partyId && identificationPartyId"><set field="partyId" from="identificationPartyId"/></if></if><if condition="partyId && !identificationPartyId"><service-call name="create#mantle.party.PartyIdentification" in-map="[partyId:partyId,                         partyIdTypeEnumId:'PtidSci',idValue:messageObject.data.object.customer]"/></if><set field="fullName" from="messageObject.data.object.customer_details?.name"/><set field="matcher" from="(fullName =~ /(\S+)\s+(.*)/)"/><if condition="matcher.matches()"><then><set field="firstName" from="matcher[0][1] ?: fullName"/><set field="lastName" from="matcher[0][2] ?: fullName"/></then><else><set field="firstName" from="fullName"/><set field="lastName" from="fullName"/></else></if><if condition="!firstName || !lastName"><set field="firstName" value="No"/><set field="lastName" value="Name"/></if><if condition="!partyId && messageObject.data.object.customer_details != null"><if condition="messageObject.data.object.customer_details?.address?.country"><entity-find entity-name="moqui.basic.Geo" list="countryGeoList" limit="1" cache="true"><econdition field-name="geoCodeAlpha2" from="messageObject.data.object.customer_details?.address.country"/></entity-find></if><service-call name="mantle.party.PartyServices.create#PersonCustomer" in-map="[createUserAccount:false,                             emailAddress:messageObject.data.object.customer_details?.email,                             firstName:firstName,                             lastName:lastName,                         ]" out-map="[partyId:context.partyId,postalContactMechId:context.postalContactMechId,telecomContactMechId:context.telecomContactMechId,emailContactMechId:context.emailContactMechId,paymentMethodId:context.paymentMethodId,userId:context.userId]"/></if><if condition="!orderPart.customerPartyId"><set field="orderPart.customerPartyId" from="partyId"/><entity-update value-field="orderPart"/></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="postalContactMech" auto-field-map="[contactMechId:postalContactMechId]" for-update="true"/><if condition="postalContactMech"><set field="postalContactMech.trustLevelEnumId" value="CmtlVerified"/><entity-update value-field="postalContactMech"/></if><if condition="!paymentMethodId && messageObject.data.object.customer_details != null"><if condition="!messageObject.data.object.payment_intent"><then><log level="warn" message="No payment intent found for checkout ${messageObject.data.object.id}."/></then><else><script><![CDATA[org.moqui.util.RestClient paymentIntentRestClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                                .basicAuth(systemMessage.remote.privateKey,"")
                        def paymentIntentUriBuilder = paymentIntentRestClient.uri().protocol("https").host("api.stripe.com").port(443)
                                .path("/v1/payment_intents/${messageObject.data.object.payment_intent}")
                        paymentIntentUriBuilder.build()

                        org.moqui.util.RestClient.RestResponse paymentIntentRestResponse = paymentIntentRestClient.call()
                        context.paymentIntentResponseMap = (Map) paymentIntentRestResponse.jsonObject()
                        if (paymentIntentRestResponse.statusCode < 200 || paymentIntentRestResponse.statusCode >= 300) {
                            ec.logger.warn("Could not get payment intent")
                            throw new org.moqui.BaseException("Got status code ${paymentIntentRestResponse.statusCode} from Stripe on a get payment intent for the parameter '${paymentIntentResponseMap.error.type}' and message '${paymentIntentResponseMap.error.message}'")
                            return
                        }]]></script><if condition="paymentIntentResponseMap.customer && messageObject.data.object.customer && paymentIntentResponseMap.customer != messageObject.data.object.customer"><return type="danger" error="true" message="The customer on the payment intent ${paymentIntentResponseMap.customer} does not match the customer on the checkout session ${messageObject.data.object.customer}."/></if><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList" for-update="true"><econdition field-name="ownerPartyId" from="orderPart.customerPartyId"/><econdition field-name="gatewayCimId" from="paymentIntentResponseMap.payment_method"/><econdition field-name="paymentGatewayConfigId"/><date-filter/></entity-find><set field="paymentMethod" from="paymentMethodList.getFirst()"/><set field="paymentMethodId" from="paymentMethod?.paymentMethodId"/><set field="origPaymentMethodId" from="paymentMethodId"/><set field="postalContactMechId" from="paymentMethod?.postalContactMechId"/><set field="telecomContactMechId" from="paymentMethod?.telecomContactMechId"/><set field="emailContactMechId" from="paymentMethod?.emailContactMechId"/><set field="paymentMethodTypeEnumId" value="PmtStripe"/><set field="emailAddress" from="messageObject.data.object.customer_details?.email"/><set field="toName" from="messageObject.data.object.customer_details?.name"/><set field="city" from="messageObject.data.object.customer_details?.address?.city"/><set field="countryGeoId" from="countryGeoList?.getFirst()?.geoId"/><set field="address1" from="messageObject.data.object.customer_details?.address?.line1?:' '"/><set field="address2" from="messageObject.data.object.customer_details?.address?.line2"/><set field="postalCode" from="messageObject.data.object.customer_details?.address?.postal_code"/><log level="warn" message="handle#Webhook messageObject.data.object.customer_details?.address?.state ${messageObject.data.object.customer_details?.address?.state}"/><if condition="messageObject.data.object.customer_details?.address?.state"><entity-find entity-name="moqui.basic.Geo" list="stateGeoList" cache="true"><econdition field-name="geoCodeAlpha2" from="messageObject.data.object.customer_details?.address?.state"/></entity-find><if condition="stateGeoList.size() > 1"><then><entity-find entity-name="moqui.basic.GeoAssoc" list="stateGeoAssocList" cache="true"><econdition field-name="geoId" from="countryGeoId"/><econdition field-name="toGeoId" operator="in" from="stateGeoList*.geoId"/></entity-find><set field="stateProvinceGeoId" from="stateGeoAssocList?.getFirst()?.toGeoId"/></then><else><set field="stateProvinceGeoId" from="stateGeoList?.getFirst()?.geoId"/></else></if></if><set field="contactNumber" from="messageObject.data.object.customer_details?.phone"/><set field="postalContactMechPurposeId" value="PostalBilling"/><set field="telecomContactMechPurposeId" value="PhoneBilling"/><set field="emailContactMechPurposeId" value="EmailBilling"/><set field="fromDate" from="new Timestamp(System.currentTimeMillis())"/><set field="trustLevelEnumId" value="CmtlVerified"/><if condition="paymentMethodId"><then><service-call name="mantle.party.ContactServices.store#PartyContactInfo" in-map="context" out-map="[postalContactMechId:context.postalContactMechId,telecomContactMechId:context.telecomContactMechId,emailContactMechId:context.emailContactMechId,webContactMechId:context.webContactMechId,otherContactMechId:context.otherContactMechId]"/></then><else><if condition="!postalContactMechId && address1"><service-call name="mantle.party.ContactServices.create#PostalAddress" out-map="[contactMechId:paOut.contactMechId]" in-map="context + [contactMechPurposeId:postalContactMechPurposeId]"/><set field="postalContactMechId" from="paOut.contactMechId"/></if><if condition="!telecomContactMechId && contactNumber"><service-call name="mantle.party.ContactServices.create#TelecomNumber" out-map="[contactMechId:tnOut.contactMechId,trustLevelEnumId:tnOut.trustLevelEnumId]" in-map="context + [contactMechPurposeId:telecomContactMechPurposeId]"/><set field="telecomContactMechId" from="tnOut.contactMechId"/></if><if condition="!emailContactMechId && emailAddress"><service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="[contactMechId:emOut.contactMechId]" in-map="context + [contactMechPurposeId:emailContactMechPurposeId]"/><set field="emailContactMechId" from="emOut.contactMechId"/></if></else></if><set field="firstNameOnAccount" from="firstName"/><set field="lastNameOnAccount" from="lastName"/><set field="gatewayCimId" from="paymentIntentResponseMap.payment_method"/><if condition="paymentMethodId"><then><service-call name="update#mantle.account.method.PaymentMethod" out-map="[paymentMethodId:context.paymentMethodId,paymentMethodTypeEnumId:context.paymentMethodTypeEnumId,purposeEnumId:context.purposeEnumId,ownerPartyId:context.ownerPartyId,description:context.description,fromDate:context.fromDate,thruDate:context.thruDate,thruDateSetAuto:context.thruDateSetAuto,openedDate:context.openedDate,titleOnAccount:context.titleOnAccount,firstNameOnAccount:context.firstNameOnAccount,middleNameOnAccount:context.middleNameOnAccount,lastNameOnAccount:context.lastNameOnAccount,suffixOnAccount:context.suffixOnAccount,companyNameOnAccount:context.companyNameOnAccount,ledgerBalance:context.ledgerBalance,availableBalance:context.availableBalance,balanceDate:context.balanceDate,loanPaymentAmount:context.loanPaymentAmount,loanPaymentPeriodUomId:context.loanPaymentPeriodUomId,currencyUomId:context.currencyUomId,postalContactMechId:context.postalContactMechId,telecomContactMechId:context.telecomContactMechId,emailContactMechId:context.emailContactMechId,gatewayCimId:context.gatewayCimId,paymentGatewayConfigId:context.paymentGatewayConfigId,imageUrl:context.imageUrl,trustLevelEnumId:context.trustLevelEnumId,paymentFraudEvidenceId:context.paymentFraudEvidenceId,glAccountId:context.glAccountId,finAccountId:context.finAccountId,originalPaymentMethodId:context.originalPaymentMethodId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="context+[ownerPartyId:orderPart.customerPartyId]"/></then><else><service-call name="create#mantle.account.method.PaymentMethod" out-map="[paymentMethodId:context.paymentMethodId,paymentMethodTypeEnumId:context.paymentMethodTypeEnumId,purposeEnumId:context.purposeEnumId,ownerPartyId:context.ownerPartyId,description:context.description,fromDate:context.fromDate,thruDate:context.thruDate,thruDateSetAuto:context.thruDateSetAuto,openedDate:context.openedDate,titleOnAccount:context.titleOnAccount,firstNameOnAccount:context.firstNameOnAccount,middleNameOnAccount:context.middleNameOnAccount,lastNameOnAccount:context.lastNameOnAccount,suffixOnAccount:context.suffixOnAccount,companyNameOnAccount:context.companyNameOnAccount,ledgerBalance:context.ledgerBalance,availableBalance:context.availableBalance,balanceDate:context.balanceDate,loanPaymentAmount:context.loanPaymentAmount,loanPaymentPeriodUomId:context.loanPaymentPeriodUomId,currencyUomId:context.currencyUomId,postalContactMechId:context.postalContactMechId,telecomContactMechId:context.telecomContactMechId,emailContactMechId:context.emailContactMechId,gatewayCimId:context.gatewayCimId,paymentGatewayConfigId:context.paymentGatewayConfigId,imageUrl:context.imageUrl,trustLevelEnumId:context.trustLevelEnumId,paymentFraudEvidenceId:context.paymentFraudEvidenceId,glAccountId:context.glAccountId,finAccountId:context.finAccountId,originalPaymentMethodId:context.originalPaymentMethodId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="context+[ownerPartyId:orderPart.customerPartyId]"/></else></if><if condition="postalContactMechId"><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="postalContactMech" auto-field-map="[contactMechId:postalContactMechId]" for-update="true"/><service-call name="update#mantle.party.contact.ContactMech" in-map="[contactMechId:postalContactMechId,trustLevelEnumId:'CmtlVerified']"/></if><if condition="origPaymentMethodId && origPaymentMethodId != paymentMethodId"><entity-find entity-name="mantle.account.payment.Payment" list="paymentList"><econdition field-name="paymentMethodId" from="origPaymentMethodId"/><econdition field-name="statusId" operator="in" value="PmntProposed,PmntPromised,PmntAuthorized,PmntDeclined"/><econdition field-name="paymentAuthCode" operator="is-null"/></entity-find><iterate list="paymentList" entry="payment"><set field="payment.paymentMethodId" from="paymentMethodId"/><entity-update value-field="payment"/><message><![CDATA[Updated Payment Method on Payment ${payment.paymentId}]]></message></iterate><entity-find entity-name="mantle.account.payment.Payment" list="toPaymentList"><econdition field-name="toPaymentMethodId" from="origPaymentMethodId"/><econdition field-name="statusId" operator="in" value="PmntProposed,PmntPromised,PmntAuthorized,PmntDeclined"/></entity-find><iterate list="toPaymentList" entry="toPayment"><set field="toPayment.toPaymentMethodId" from="paymentMethodId"/><entity-update value-field="toPayment"/><message><![CDATA[Updated To Payment Method on Payment ${toPayment.paymentId}]]></message></iterate></if></else></if></if><if condition="partyId && paymentMethodId"><service-call name="mantle.order.OrderServices.add#OrderPartPayment" in-map="[                             orderId:orderPart.orderId,orderPartSeqId:orderPart.orderPartSeqId,                             settlementTermId:'Immediate', paymentInstrumentEnumId:'PiStripe',paymentGatewayConfigId:paymentGatewayConfigId,                             entryDate:ec.user.nowTimestamp, paymentRefNum:messageObject.data.object.payment_intent,paymentMethodId:paymentMethodId]" out-map="[paymentId:context.paymentId]"/><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment" auto-field-map="[paymentId:paymentId]" for-update="true"/></if><entity-find entity-name="mantle.account.method.PaymentGatewayResponse" list="paymentGatewayResponseList"><econdition field-name="referenceNum" from="messageObject.id"/><order-by field-name="-transactionDate"/></entity-find><service-call name="store#mantle.account.method.PaymentGatewayResponse" out-map="[paymentGatewayResponseId:context.paymentGatewayResponseId,paymentGatewayConfigId:context.paymentGatewayConfigId,paymentOperationEnumId:context.paymentOperationEnumId,paymentId:context.paymentId,paymentMethodId:context.paymentMethodId,finAccountId:context.finAccountId,amount:context.amount,amountUomId:context.amountUomId,referenceNum:context.referenceNum,altReference:context.altReference,subReference:context.subReference,approvalCode:context.approvalCode,responseCode:context.responseCode,reasonCode:context.reasonCode,reasonMessage:context.reasonMessage,avsResult:context.avsResult,cvResult:context.cvResult,scoreResult:context.scoreResult,transactionDate:context.transactionDate,transactionStatus:context.transactionStatus,resultSuccess:context.resultSuccess,resultDeclined:context.resultDeclined,resultError:context.resultError,resultNsf:context.resultNsf,resultBadExpire:context.resultBadExpire,resultBadCardNumber:context.resultBadCardNumber,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[                         paymentGatewayResponseId:paymentGatewayResponseList.getFirst()?.paymentGatewayResponseId,                         paymentGatewayConfigId:paymentGatewayConfigId,                         paymentOperationEnumId:'PgoRelease',                         paymentId:payment?.paymentId,                         paymentMethodId:payment?.paymentMethodId,                         amount: (messageObject.data.object.amount_total as BigDecimal) / 100,                         amountUomId:messageObject.data.object.currency.toUpperCase(),                         finAccountId:payment?.finAccountId,                         transactionDate:new Timestamp(messageObject.data.object.created * 1000L),                         referenceNum:messageObject.id,                         altReference:messageObject.request.idempotency_key,                         subReference:messageObject.data.object.payment_intent,                         resultSuccess:'N',                         resultDeclined:'Y',                         resultError:'N',                         resultBadExpire:'N',                         resultBadCardNumber:'N']"/><if condition="payment"><set field="payment.statusId" value="PmntCancelled"/><entity-update value-field="payment"/></if><if condition="orderPart.statusId != 'OrderRejected' && orderPart.statusId != 'OrderCancelled'"><service-call name="mantle.order.OrderServices.reject#OrderPart" in-map="[orderId:orderPart.orderId,orderPartSeqId:orderPart.orderPartSeqId]"/></if></actions></service>