<!--Service Location mantle.shipment.ShipmentServices.create#OrderPartShipment--><service verb="create" noun="OrderPartShipment"><in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/><parameter name="createPackage" type="Boolean" default="false"/><parameter name="createRouteSegment" type="Boolean" default="true"/><parameter name="originFacilityId"/><parameter name="destinationFacilityId"/><parameter name="tryAutoPackage" type="Boolean" default="true"/><parameter name="shippingGatewayConfigId"/><parameter name="entryDate" type="Timestamp" default="ec.user.nowTimestamp"/></in-parameters><out-parameters><parameter name="shipmentId"/><parameter name="shipmentPackageSeqId"/></out-parameters><actions><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/><entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/><if condition="!(orderPart.statusId in ['OrderApproved', 'OrderSent'] || orderHeader.statusId in ['OrderApproved', 'OrderSent'])"><return type="danger" message="Cannot create Shipment for Order Part in status ${orderPart.statusId}"/></if><entity-find-related value-field="orderPart" relationship-name="mantle.order.OrderItem" list="orderItemList" order-by-list="['orderItemSeqId']"/><if condition="!orderItemList.find({ it.product?.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse', 'PtPickAssembly'] })"><return type="warning" message="Order ${orderId} part ${orderPartSeqId} has no shippable product items (type asset or asset use)"/></if><set field="totalQtyToShip" from="0.0"/><set field="activeShipmentIds" from="new TreeSet()"/><entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true"><econdition field-name="enumGroupEnumId" value="EngItemsProduct"/></entity-find><set field="productItemTypes" from="productItemTypeEgms*.enumId"/><iterate list="orderItemList" entry="orderItem"><if condition="!orderItem.productId || !productItemTypes.contains(orderItem.itemTypeEnumId)"><continue/></if><entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"><field-map field-name="productId" from="orderItem.productId"/></entity-find-one><if condition="!(product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse', 'PtPickAssembly'])"><continue/></if><set field="quantityNotShipped" from="(orderItem.quantity != null ? orderItem.quantity : 1.0) * (orderItem.selectedAmount ?: 1.0)"/><entity-find entity-name="mantle.shipment.ShipmentAndItemSource" list="existingSisList"><econdition field-name="orderId"/><econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/><econdition field-name="shipmentStatusId" operator="not-in" value="ShipRejected,ShipCancelled"/><econdition field-name="statusId" operator="not-equals" value="SisCancelled"/></entity-find><iterate list="existingSisList" entry="existingSis"><set field="quantityNotShipped" from="quantityNotShipped - existingSis.quantity"/><if condition="existingSis.quantity"><script><![CDATA[activeShipmentIds.add(existingSis.shipmentId)]]></script></if></iterate><if condition="quantityNotShipped <= 0"><continue/></if><set field="totalQtyToShip" from="totalQtyToShip + quantityNotShipped"/></iterate><if condition="totalQtyToShip == 0.0"><return type="warning" message="Order ${orderId} part ${orderPartSeqId} is already on shipments ${activeShipmentIds}"/></if><entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal"><field-map field-name="partyId" from="orderPart.customerPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one><set field="shipmentTypeEnumId" from="customerOrgInternal ? 'ShpTpPurchase' : 'ShpTpSales'"/><if condition="orderPart.facilityId"><if condition="customerOrgInternal"><then><set field="destinationFacilityId" from="destinationFacilityId ?: orderPart.facilityId"/></then><else><set field="originFacilityId" from="originFacilityId ?: orderPart.facilityId"/></else></if></if><if condition="!shippingGatewayConfigId && orderHeader.productStoreId && orderPart.carrierPartyId"><entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway" value-field="psShipGateway"><field-map field-name="productStoreId" from="orderHeader.productStoreId"/><field-map field-name="carrierPartyId" from="orderPart.carrierPartyId"/></entity-find-one><if condition="psShipGateway?.shippingGatewayConfigId"><set field="shippingGatewayConfigId" from="psShipGateway?.shippingGatewayConfigId"/></if></if><if condition="!shippingGatewayConfigId && orderPart.vendorPartyId"><service-call name="mantle.party.PartyServices.get#PartySettingValue" out-map="[settingValue:ptySettingOut.settingValue]" in-map="[partyId:orderPart.vendorPartyId, partySettingTypeId:'DefaultShipmentGatewayConfigId']"/><set field="shippingGatewayConfigId" from="ptySettingOut?.settingValue"/></if><if condition="!shippingGatewayConfigId"><set field="shippingGatewayConfigId" from="ec.user.getPreference('DefaultShipmentGatewayConfigId')"/></if><set field="signatureRequiredEnumId" from="orderPart.signatureRequiredEnumId"/><if condition="!signatureRequiredEnumId"><iterate list="orderItemList" entry="orderItem"><set field="oiProduct" from="orderItem.product"/><if condition="oiProduct == null"><continue/></if><if condition="oiProduct.signatureRequiredEnumId && oiProduct.signatureRequiredEnumId != 'PsrNone'"><set field="signatureRequiredEnumId" from="oiProduct.signatureRequiredEnumId"/><break/></if></iterate></if><if condition="!signatureRequiredEnumId && orderHeader.productStoreId"><iterate list="orderItemList" entry="orderItem"><entity-find-one entity-name="mantle.product.store.ProductStoreProduct" value-field="productStoreProduct"><field-map field-name="productStoreId" from="orderHeader.productStoreId"/><field-map field-name="productId" from="orderItem.productId"/></entity-find-one><if condition="productStoreProduct == null"><continue/></if><if condition="productStoreProduct.signatureRequiredEnumId && productStoreProduct.signatureRequiredEnumId != 'PsrNone'"><set field="signatureRequiredEnumId" from="productStoreProduct.signatureRequiredEnumId"/><break/></if></iterate></if><service-call name="create#mantle.shipment.Shipment" out-map="[shipmentId:context.shipmentId,shipmentTypeEnumId:context.shipmentTypeEnumId,statusId:context.statusId,fromPartyId:context.fromPartyId,toPartyId:context.toPartyId,binLocationNumber:context.binLocationNumber,productStoreId:context.productStoreId,priority:context.priority,entryDate:context.entryDate,shipAfterDate:context.shipAfterDate,shipBeforeDate:context.shipBeforeDate,estimatedReadyDate:context.estimatedReadyDate,estimatedShipDate:context.estimatedShipDate,estimatedArrivalDate:context.estimatedArrivalDate,latestCancelDate:context.latestCancelDate,packedDate:context.packedDate,pickContainerId:context.pickContainerId,shipWorkEffortId:context.shipWorkEffortId,receiveWorkEffortId:context.receiveWorkEffortId,assemblyWorkEffortId:context.assemblyWorkEffortId,estimatedShipCost:context.estimatedShipCost,costUomId:context.costUomId,addtlShippingCharge:context.addtlShippingCharge,addtlShippingChargeDesc:context.addtlShippingChargeDesc,signatureRequiredEnumId:context.signatureRequiredEnumId,handlingInstructions:context.handlingInstructions,otherPartyOrderId:context.otherPartyOrderId,systemMessageRemoteId:context.systemMessageRemoteId,externalId:context.externalId,originId:context.originId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[shipmentTypeEnumId:shipmentTypeEnumId, statusId:'ShipInput', entryDate:entryDate, priority:orderPart.priority,                         fromPartyId:orderPart.vendorPartyId, toPartyId:orderPart.customerPartyId,                         productStoreId:orderHeader.productStoreId, costUomId:orderHeader.currencyUomId,                         systemMessageRemoteId:orderHeader.systemMessageRemoteId, handlingInstructions:orderPart.shippingInstructions,                         signatureRequiredEnumId:signatureRequiredEnumId, otherPartyOrderId:orderPart.otherPartyOrderId,                         shipAfterDate:orderPart.shipAfterDate, shipBeforeDate:orderPart.shipBeforeDate,                         estimatedShipDate:orderPart.estimatedShipDate, estimatedArrivalDate:orderPart.estimatedDeliveryDate]"/><if condition="createRouteSegment"><service-call name="create#mantle.shipment.ShipmentRouteSegment" out-map="[shipmentId:context.shipmentId,shipmentRouteSegmentSeqId:context.shipmentRouteSegmentSeqId,deliveryId:context.deliveryId,shippingGatewayConfigId:context.shippingGatewayConfigId,originFacilityId:context.originFacilityId,originPostalContactMechId:context.originPostalContactMechId,originTelecomContactMechId:context.originTelecomContactMechId,returnPostalContactMechId:context.returnPostalContactMechId,destinationFacilityId:context.destinationFacilityId,destPostalContactMechId:context.destPostalContactMechId,destTelecomContactMechId:context.destTelecomContactMechId,carrierPartyId:context.carrierPartyId,shipmentMethodEnumId:context.shipmentMethodEnumId,tradeTermEnumId:context.tradeTermEnumId,customsCertify:context.customsCertify,customsCertifySigner:context.customsCertifySigner,customsContentsEnumId:context.customsContentsEnumId,customsNonDeliveryEnumId:context.customsNonDeliveryEnumId,statusId:context.statusId,carrierDeliveryZone:context.carrierDeliveryZone,carrierRestrictionCodes:context.carrierRestrictionCodes,carrierRestrictionDesc:context.carrierRestrictionDesc,billingWeight:context.billingWeight,billingWeightUomId:context.billingWeightUomId,actualTransportCost:context.actualTransportCost,actualServiceCost:context.actualServiceCost,actualOtherCost:context.actualOtherCost,actualCost:context.actualCost,costUomId:context.costUomId,actualStartDate:context.actualStartDate,actualArrivalDate:context.actualArrivalDate,estimatedStartDate:context.estimatedStartDate,estimatedArrivalDate:context.estimatedArrivalDate,masterTrackingCode:context.masterTrackingCode,masterTrackingUrl:context.masterTrackingUrl,homeDeliveryType:context.homeDeliveryType,homeDeliveryDate:context.homeDeliveryDate,thirdPartyAccountNumber:context.thirdPartyAccountNumber,thirdPartyPostalCode:context.thirdPartyPostalCode,thirdPartyCountryGeoCode:context.thirdPartyCountryGeoCode,highValueReport:context.highValueReport,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[shipmentId:shipmentId, carrierPartyId:orderPart.carrierPartyId,                             shipmentMethodEnumId:orderPart.shipmentMethodEnumId, shippingGatewayConfigId:shippingGatewayConfigId,                             destPostalContactMechId:orderPart.postalContactMechId, destTelecomContactMechId:orderPart.telecomContactMechId,                             originFacilityId:originFacilityId, destinationFacilityId:destinationFacilityId]"/></if><if condition="createPackage"><service-call name="create#mantle.shipment.ShipmentPackage" in-map="context" out-map="[shipmentId:context.shipmentId,shipmentPackageSeqId:context.shipmentPackageSeqId,shipmentBoxTypeId:context.shipmentBoxTypeId,weight:context.weight,weightUomId:context.weightUomId,gatewayPackageId:context.gatewayPackageId,lastUpdatedStamp:context.lastUpdatedStamp]"/></if><if condition="shipmentPackageSeqId && shipmentRouteSegmentSeqId"><service-call name="create#mantle.shipment.ShipmentPackageRouteSeg" in-map="[shipmentId:shipmentId, shipmentPackageSeqId:shipmentPackageSeqId,                                 shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/></if><service-call name="mantle.shipment.ShipmentServices.add#OrderPartToShipment" in-map="[shipmentId:shipmentId, orderId:orderId, orderPartSeqId:orderPartSeqId]"/><if condition="shippingGatewayConfigId && tryAutoPackage && !customerOrgInternal"><service-call name="mantle.shipment.ShipmentServices.create#ShipmentAutoPackages" in-map="[shipmentId:shipmentId, shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId]"/></if></actions></service>