<!--Service Location org.moqui.impl.SystemMessageServices.consume#ReceivedSystemMessage--><service verb="consume" noun="ReceivedSystemMessage"><in-parameters><parameter name="systemMessageId" required="true"/><parameter name="allowError" type="Boolean" default="false"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/><set field="initialStatusId" from="systemMessage.statusId"/><if condition="!(systemMessage.statusId == 'SmsgReceived' || (allowError && systemMessage.statusId == 'SmsgError'))"><return error="true" message="System message [${systemMessageId}] has status [${systemMessage.statusId}] and must be either SmsgReceived (or SmsgError if allowed), not consuming."/></if><if condition="!systemMessage.systemMessageTypeId"><return error="true" message="System message [${systemMessageId}] has no systemMessageTypeId, not consuming."/></if><set field="systemMessageType" from="systemMessage.'moqui.service.message.SystemMessageType'"/><if condition="!systemMessageType.consumeServiceName"><return error="true" message="While consuming system message [${systemMessageId}] system message type [${systemMessageType.systemMessageTypeId}] has no consumeServiceName, not consuming."/></if><service-call name="update#moqui.service.message.SystemMessage" transaction="force-new" in-map="[systemMessageId:systemMessageId, statusId:'SmsgConsuming', lastAttemptDate:ec.user.nowTimestamp]"/><script><![CDATA[try {]]></script><service-call name="${systemMessageType.consumeServiceName}" in-map="[systemMessageId:systemMessageId]" out-map="consumeOut" transaction="force-new" transaction-timeout="1800"/><script><![CDATA[} catch (Throwable t) { ec.message.addError(t.toString()) } finally {]]></script><set field="nowDate" from="ec.user.nowTimestamp"/><if condition="ec.message.hasError()"><then><set field="errorText" from="ec.message.getErrorsString()"/><script><![CDATA[ec.message.clearErrors()]]></script><service-call name="update#moqui.service.message.SystemMessage" transaction="force-new" in-map="[systemMessageId:systemMessageId, statusId:initialStatusId, lastAttemptDate:nowDate,                             failCount:((systemMessage.failCount ?: 0) + 1)]"/><service-call name="create#moqui.service.message.SystemMessageError" transaction="force-new" in-map="[systemMessageId:systemMessageId, errorDate:nowDate, attemptedStatusId:'SmsgConsumed',                             errorText:errorText]"/></then><else><if condition="!consumeOut.noStatusUpdate"><service-call name="update#moqui.service.message.SystemMessage" transaction="force-new" in-map="[systemMessageId:systemMessageId, statusId:'SmsgConsumed',                                 processedDate:nowDate, lastAttemptDate:nowDate]"/><if condition="systemMessageType.produceAckServiceName && systemMessageType.produceAckOnConsumed == 'Y'"><service-call name="${systemMessageType.produceAckServiceName}" in-map="[systemMessageId:systemMessageId]" transaction="force-new"/></if></if></else></if><script><![CDATA[}]]></script></actions></service>