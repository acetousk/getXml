<!--Service Location mantle.ledger.LedgerReportServices.get#PeriodSeriesSummary--><service verb="get" noun="PeriodSeriesSummary"><in-parameters><parameter name="organizationPartyId" required="true"/><parameter name="timePeriodGroups" type="List" required="true"><parameter name="timePeriodIds" type="List"><description><![CDATA[Summaries are calculated and returns in an array with an entry for each time period group.
                    If a period group has more than one period in it the total will be across all periods in the group.]]></description><parameter name="timePeriodId"/></parameter></parameter><parameter name="datasets" type="List" required="true"><parameter name="dataset" type="Map"><description><![CDATA[Describes the set of data to include in the results. All map entries are passed through for
                    convenience with 'data' entries added as a List of BigDecimal.]]></description><parameter name="datasetId"><description><![CDATA[If specified this dataset will be added to datasetsById]]></description></parameter><parameter name="label"/><parameter name="backgroundColor"/><parameter name="classes" type="List"><parameter name="glAccountClassEnumId"/></parameter><parameter name="classGroupEnumId"/><parameter name="negateDebit" type="Boolean" default="false"/><parameter name="negateCredit" type="Boolean" default="false"/><parameter name="negateClasses" type="List"><parameter name="glAccountClassEnumId"/></parameter><parameter name="totalBasis" default="PostedNoClosing"><description><![CDATA[Can be one of: Posted, PostedNoClosing, Ending.
                        Defaults to PostedNoClosing which is best for income statement accounts.]]></description></parameter></parameter></parameter></in-parameters><out-parameters><parameter name="periodLabels" type="List"><parameter name="label"/></parameter><parameter name="datasets" type="List"><parameter name="dataset" type="Map"><description><![CDATA[The original dataset Map plus a 'data' entry with results as a List of BigDecimal.]]></description><parameter name="label"/><parameter name="classSet" type="Set"><parameter name="glAccountClassEnumId"/></parameter><parameter name="data" type="List"><parameter name="amount" type="BigDecimal"/></parameter></parameter></parameter><parameter name="datasetsById" type="Map"/></out-parameters><actions><set field="defaultColors" from="['rgba(92, 184, 92, 0.5)','rgba(91, 192, 222, 0.5)','rgba(240, 173, 78, 0.5)','rgba(217, 83, 79, 0.5)',                            'rgba(60, 118, 61, 0.5)','rgba(49, 112, 143, 0.5)','rgba(138, 109, 59, 0.5)','rgba(169, 68, 66, 0.5)',                            'rgba(223, 240, 216, 0.5)','rgba(217, 237, 247, 0.5)','rgba(252, 248, 227, 0.5)','rgba(242, 222, 222, 0.5)']"/><set field="allPeriods" from="new HashSet()"/><set field="periodLabels" from="[]"/><iterate list="timePeriodGroups" entry="timePeriodIds"><entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="curPeriod"><field-map field-name="timePeriodId" from="timePeriodIds.last()"/></entity-find-one><script><![CDATA[periodLabels.add(curPeriod != null ? ec.l10n.format(curPeriod.thruDate, 'MMM yyyy') : "Period ${timePeriodIds_index}")
                    allPeriods.addAll(timePeriodIds)]]></script></iterate><set field="allClasses" from="new HashSet()"/><iterate list="datasets" entry="dataset"><set field="dataset.classSet" from="new HashSet()"/><if condition="dataset.negateClasses == null"><then><set field="dataset.negateClasses" from="[]"/></then><else><set field="newNegateClasses" from="new HashSet()"/><iterate list="dataset.negateClasses" entry="glAccountClassEnumId"><service-call name="org.moqui.impl.BasicServices.find#EnumerationByParent" out-map="[enumerationList:childOut.enumerationList,enumIdSet:childOut.enumIdSet]" out-map-add-to-existing="false" in-map="[parentEnumId:glAccountClassEnumId, includeNested:true]"/><script><![CDATA[newNegateClasses.addAll(childOut.enumIdSet)]]></script></iterate><iterate list="newNegateClasses" entry="enumId"><if condition="!dataset.negateClasses.contains(enumId)"><script><![CDATA[dataset.negateClasses.add(enumId)]]></script></if></iterate></else></if><iterate list="dataset.classes" entry="glAccountClassEnumId"><service-call name="org.moqui.impl.BasicServices.find#EnumerationByParent" out-map="[enumerationList:childOut.enumerationList,enumIdSet:childOut.enumIdSet]" out-map-add-to-existing="false" in-map="[parentEnumId:glAccountClassEnumId, includeNested:true]"/><script><![CDATA[dataset.classSet.addAll(childOut.enumIdSet); allClasses.addAll(childOut.enumIdSet)]]></script><if condition="dataset.negateCredit || dataset.negateDebit"><then><service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="[rootGlAccountClassEnumId:rootOut.rootGlAccountClassEnumId,ancestorClassEnumIdSet:rootOut.ancestorClassEnumIdSet,isContra:rootOut.isContra]" out-map-add-to-existing="false" in-map="[glAccountClassEnumId:glAccountClassEnumId]"/><if condition="(dataset.negateDebit && (rootOut.rootGlAccountClassEnumId == 'DEBIT' || (rootOut.rootGlAccountClassEnumId == 'CREDIT' && rootOut.isContra == 'Y'))) ||                                 (dataset.negateCredit && (rootOut.rootGlAccountClassEnumId == 'CREDIT' || (rootOut.rootGlAccountClassEnumId == 'DEBIT' && rootOut.isContra == 'Y')))"><script><![CDATA[dataset.negateClasses.addAll(childOut.enumIdSet)]]></script></if></then><else><iterate list="childOut.enumIdSet" entry="classEnumId"><entity-find-one entity-name="moqui.basic.Enumeration" value-field="classEnum"><field-map field-name="enumId" from="classEnumId"/></entity-find-one><if condition="classEnum.optionIndicator == 'Y'"><script><![CDATA[dataset.negateClasses.add(classEnumId)]]></script></if></iterate></else></if></iterate><if condition="dataset.classGroupEnumId"><if condition="!dataset.label"><entity-find-one entity-name="moqui.basic.Enumeration" value-field="classGroupEnum"><field-map field-name="enumId" from="dataset.classGroupEnumId"/></entity-find-one><set field="dataset.label" from="classGroupEnum?.description"/></if><entity-find entity-name="moqui.basic.EnumGroupMember" list="classMemberList"><econdition field-name="enumGroupEnumId" from="dataset.classGroupEnumId"/></entity-find><iterate list="classMemberList" entry="classMember"><service-call name="org.moqui.impl.BasicServices.find#EnumerationByParent" out-map="[enumerationList:childOut.enumerationList,enumIdSet:childOut.enumIdSet]" out-map-add-to-existing="false" in-map="[parentEnumId:classMember.enumId, includeNested:true]"/><script><![CDATA[dataset.classSet.addAll(childOut.enumIdSet); allClasses.addAll(childOut.enumIdSet)]]></script><if condition="'negate'.equalsIgnoreCase(classMember.memberInfo)"><then><script><![CDATA[dataset.negateClasses.addAll(childOut.enumIdSet)]]></script></then><else-if condition="dataset.negateCredit || dataset.negateDebit"><service-call name="mantle.ledger.LedgerServices.find#RootGlAccountClassEnum" out-map="[rootGlAccountClassEnumId:rootOut.rootGlAccountClassEnumId,ancestorClassEnumIdSet:rootOut.ancestorClassEnumIdSet,isContra:rootOut.isContra]" out-map-add-to-existing="false" in-map="[glAccountClassEnumId:classMember.enumId]"/><if condition="(dataset.negateDebit && (rootOut.rootGlAccountClassEnumId == 'DEBIT' || (rootOut.rootGlAccountClassEnumId == 'CREDIT' && rootOut.isContra == 'Y'))) ||                                     (dataset.negateCredit && (rootOut.rootGlAccountClassEnumId == 'CREDIT' || (rootOut.rootGlAccountClassEnumId == 'DEBIT' && rootOut.isContra == 'Y')))"><script><![CDATA[dataset.negateClasses.addAll(childOut.enumIdSet)]]></script></if></else-if><else><iterate list="childOut.enumIdSet" entry="classEnumId"><entity-find-one entity-name="moqui.basic.Enumeration" value-field="classEnum"><field-map field-name="enumId" from="classEnumId"/></entity-find-one><if condition="classEnum.optionIndicator == 'Y'"><script><![CDATA[dataset.negateClasses.add(classEnumId)]]></script></if></iterate></else></if></iterate></if><if condition="!dataset.backgroundColor && dataset_index < 12"><set field="dataset.backgroundColor" from="defaultColors.get(dataset_index)"/></if><if condition="!dataset.borderColor && dataset_index < 12"><set field="dataset.borderColor" from="defaultColors.get(dataset_index)?.replace('0.5', '1.0')"/></if></iterate><entity-find entity-name="mantle.ledger.report.GlAccountOrgTimePeriodSummary" list="periodClassSummaryList"><econdition field-name="organizationPartyId"/><econdition field-name="timePeriodId" operator="in" from="allPeriods"/><econdition field-name="glAccountClassEnumId" operator="in" from="allClasses"/><select-field field-name="timePeriodId,glAccountClassEnumId,isDebit"/><select-field field-name="postedDebitsNoClosing,postedCreditsNoClosing,beginningBalance,endingBalance"/></entity-find><set field="datasetsById" from="[:]"/><iterate list="datasets" entry="dataset"><set field="dataList" from="[]"/><set field="dataset.data" from="dataList"/><set field="byClassesList" from="periodClassSummaryList.cloneList().filterByAnd([glAccountClassEnumId:dataset.classSet])"/><iterate list="timePeriodGroups" entry="timePeriodIds"><set field="periodIdSet" from="new HashSet(timePeriodIds)"/><set field="negateClassIdSet" from="new HashSet(dataset.negateClasses)"/><set field="curTotal" from="0.0"/><iterate list="byClassesList" entry="gaotpSummary"><if condition="periodIdSet.contains(gaotpSummary.timePeriodId)"><set field="curAmount" from="0.0"/><if condition="'Posted'.equalsIgnoreCase(dataset.totalBasis)"><then><set field="curAmount" from="gaotpSummary.endingBalance - gaotpSummary.beginningBalance"/></then><else-if condition="'Ending'.equalsIgnoreCase(dataset.totalBasis)"><set field="curAmount" from="gaotpSummary.endingBalance"/></else-if><else><set field="curAmount" from="'Y'.equals(gaotpSummary.isDebit) ?                                         ((gaotpSummary.postedDebitsNoClosing ?: 0.0) - (gaotpSummary.postedCreditsNoClosing ?: 0.0)) :                                         ((gaotpSummary.postedCreditsNoClosing ?: 0.0) - (gaotpSummary.postedDebitsNoClosing ?: 0.0))"/></else></if><if condition="negateClassIdSet.contains(gaotpSummary.glAccountClassEnumId)"><set field="curAmount" from="-curAmount"/></if><set field="curTotal" from="curTotal + curAmount"/></if></iterate><script><![CDATA[dataList.add(curTotal)]]></script></iterate><if condition="dataset.datasetId"><script><![CDATA[datasetsById.put(dataset.datasetId, dataset)]]></script></if></iterate></actions></service>