<!--Service Location org.moqui.impl.SystemMessageServices.queue#AckSystemMessage--><service verb="queue" noun="AckSystemMessage"><in-parameters><parameter name="systemMessageId" required="true"/><parameter name="systemMessageRemoteId"><description><![CDATA[If not specified comes from SystemMessage.systemMessageRemoteId]]></description></parameter></in-parameters><out-parameters><parameter name="systemMessageId"/></out-parameters><actions><entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="origMessage"/><if condition="!systemMessageRemoteId"><set field="systemMessageRemoteId" from="origMessage.systemMessageRemoteId"/></if><if condition="origMessage.ackMessageId"><entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="ackMessage"><field-map field-name="systemMessageId" from="origMessage.ackMessageId"/></entity-find-one><if condition="ackMessage.statusId != 'SmsgCancelled'"><return error="true" message="Ack message already sent [${origMessage.ackMessageId}] for SystemMessage [${systemMessageId}]"/></if></if><if condition="!(origMessage.statusId in ['SmsgConsuming', 'SmsgConsumed', 'SmsgRejected', 'SmsgError'])"><return error="true" message="Cannot send ack for SystemMessage [${systemMessageId}], in status [${origMessage.statusId}] and must be in Consuming, Consumed, Rejected, or Error"/></if><set field="systemMessageType" from="origMessage.'moqui.service.message.SystemMessageType'"/><set field="produceAckServiceName" from="systemMessageType.produceAckServiceName"/><if condition="!produceAckServiceName"><return error="true" message="While queueing ack message for system message [${systemMessageId}], type [${systemMessageType.systemMessageTypeId}] has no produceAckServiceName, not queueing."/></if><service-call name="${produceAckServiceName}" out-map="produceOut" in-map="[systemMessageId:systemMessageId, systemMessageRemoteId:systemMessageRemoteId]"/><set field="systemMessageId" from="produceOut.systemMessageId"/><if condition="sendNow"><service-call name="org.moqui.impl.SystemMessageServices.send#ProducedSystemMessage" async="true" in-map="[systemMessageId:systemMessageId]"/></if></actions></service>