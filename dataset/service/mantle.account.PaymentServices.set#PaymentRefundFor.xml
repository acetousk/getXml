<!--Service Location mantle.account.PaymentServices.set#PaymentRefundFor--><service verb="set" noun="PaymentRefundFor"><in-parameters><parameter name="paymentId" required="true"/><parameter name="refundForPaymentId" required="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment" for-update="true"/><entity-find-one entity-name="mantle.account.payment.Payment" value-field="refundForPayment" for-update="true"><field-map field-name="paymentId" from="refundForPaymentId"/></entity-find-one><if condition="!(refundForPayment.statusId in ['PmntDelivered', 'PmntConfirmed'])"><return message="Original (refund for) Payment ${refundForPaymentId} must be in Delivered or Confirmed status, has status ${refundForPayment.status?.description}"/></if><if condition="refundForPayment.fromPartyId != payment.toPartyId"><return error="true" message="From Party ${refundForPayment.fromPartyId} on original (refund for) payment ${refundForPaymentId} does not match To Party ${payment.toPartyId} on refund payment ${paymentId}"/></if><if condition="refundForPayment.toPartyId != payment.fromPartyId"><return error="true" message="To Party ${refundForPayment.toPartyId} on original (refund for) payment ${refundForPaymentId} does not match From Party ${payment.fromPartyId} on refund payment ${paymentId}"/></if><entity-find entity-name="mantle.account.payment.Payment" list="otherRefundPaymentList"><econdition field-name="refundForPaymentId" from="refundForPaymentId"/><econdition field-name="paymentId" operator="not-equals" from="paymentId"/><econdition field-name="statusId" operator="not-in" value="PmntCancelled,PmntVoid,PmntDeclined"/><select-field field-name="paymentId,amount"/></entity-find><set field="otherRefundTotal" from="otherRefundPaymentList ? otherRefundPaymentList*.amount.sum() : 0.0"/><set field="refundRemaining" from="refundForPayment.amount - otherRefundTotal"/><if condition="payment.amount > refundRemaining"><return error="true" message="Refund amount ${payment.amount} is greater than refundable amount ${refundRemaining} for original payment ${refundForPaymentId} (original amount ${refundForPayment.amount}, other refunds ${otherRefundTotal})"/></if><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, refundForPaymentId:refundForPaymentId,                         paymentTypeEnumId:'PtRefund', paymentInstrumentEnumId:refundForPayment.paymentInstrumentEnumId,                         paymentMethodId:refundForPayment.toPaymentMethodId, toPaymentMethodId:refundForPayment.paymentMethodId,                         paymentGatewayConfigId:refundForPayment.paymentGatewayConfigId]"/></actions></service>