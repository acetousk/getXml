<!--Service Location mantle.shippo.ShippoServices.request#ShippingLabels--><service verb="request" noun="ShippingLabels"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="shipmentRouteSegmentSeqId" required="true"/><parameter name="shipmentPackageSeqId"/><parameter name="shippingGatewayConfigId" required="true"/><parameter name="shipmentMethodEnumId"><description><![CDATA[If not specified use shipmentMethodEnumId on route segment]]></description></parameter><parameter name="getReturnLabels" type="Boolean" default="false"><description><![CDATA[Get return labels for the shipment INSTEAD of standard outbound labels; populate the return* fields on ShipmentPackageRouteSeg]]></description></parameter></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not requesting label"/><return/></if><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="labelTypeOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoLabelType"/></entity-find-one><set field="label_file_type" from="labelTypeOpt?.optionValue ?: 'PDF'"/><entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/><if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if><entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/><if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if><set field="hasIssues" from="false"/><set field="fromPartyId" from="shipment.fromPartyId"/><if condition="!fromPartyId"><set field="hasIssues" from="true"/><message type="danger"><![CDATA[From party not set on shipment ${shipmentId}]]></message></if><set field="toPartyId" from="shipment.toPartyId"/><if condition="!toPartyId"><set field="hasIssues" from="true"/><message type="danger"><![CDATA[To party not set on shipment ${shipmentId}]]></message></if><set field="carrierPartyId" from="routeSegment.carrierPartyId"/><if condition="!carrierPartyId || carrierPartyId == '_NA_'"><set field="hasIssues" from="true"/><message type="danger"><![CDATA[Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}]]></message></if><set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: routeSegment.shipmentMethodEnumId"/><if condition="!shipmentMethodEnumId"><set field="hasIssues" from="true"/><message type="danger"><![CDATA[Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}]]></message></if><if condition="hasIssues"><message type="danger"><![CDATA[Issues found, not requesting Shippo labels]]></message><return/></if><service-call name="mantle.shippo.ShippoServices.make#ShipmentInfo" in-map="context" out-map="[productStoreId:context.productStoreId,overrideName:context.overrideName,overrideCompany:context.overrideCompany,address_from:context.address_from,address_return:context.address_return,address_to:context.address_to,carrier_account:context.carrier_account,servicelevel_token:context.servicelevel_token]"/><entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList"><econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/><econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/></entity-find><set field="futureInsuredAmountList" from="new ArrayList()"/><set field="rateInfoOut" from="null"/><if condition="'FedEx'.equalsIgnoreCase(carrierPartyId)"><set field="requestMapList" from="[]"/><set field="requestPackageIdList" from="[]"/><iterate list="packageRouteSegList" entry="packageRouteSeg"><service-call name="mantle.shippo.ShippoServices.make#ShipmentPackageInfo" in-map="context" out-map="[skipPackage:pkgInfoOut.skipPackage,parcel:pkgInfoOut.parcel,extraMap:pkgInfoOut.extraMap,shipmentMap:pkgInfoOut.shipmentMap,insuredAmount:pkgInfoOut.insuredAmount]" out-map-add-to-existing="false"/><if condition="pkgInfoOut.skipPackage"><continue/></if><script><![CDATA[futureInsuredAmountList.add(pkgInfoOut.insuredAmount)]]></script><set field="requestMap" from="pkgInfoOut.shipmentMap"/><set field="requestMap.carrier_accounts" from="[carrier_account]"/><script><![CDATA[requestMapList.add(requestMap); requestPackageIdList.add(packageRouteSeg.shipmentPackageSeqId)]]></script></iterate><set field="carrierMethodByServiceLevel" from="[(servicelevel_token):[carrierPartyId:carrierPartyId, shipmentMethodEnumId:shipmentMethodEnumId]]"/><service-call name="mantle.shippo.ShippoServices.request#ShipmentRateInfoInternal" in-map="context" out-map="[shippingRateInfoList:rateInfoOut.shippingRateInfoList,rateInfoByServiceLevelByPackage:rateInfoOut.rateInfoByServiceLevelByPackage]"/></if><set field="restClientFutureList" from="new ArrayList()"/><set field="futurePackageRouteSegList" from="new ArrayList()"/><iterate list="packageRouteSegList" entry="packageRouteSeg"><set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/><set field="requestMap" from="null"/><if condition="rateInfoOut != null"><set field="rateInfo" from="rateInfoOut.rateInfoByServiceLevelByPackage?.get(packageRouteSeg.shipmentPackageSeqId)?.get(servicelevel_token)"/><if condition="rateInfo?.shippoObjectId"><then><set field="requestMap" from="[rate:rateInfo.shippoObjectId, label_file_type:label_file_type, async:false]"/></then><else><message type="danger"><![CDATA[No rate info returned from Shippo for package ${shipmentId}:${packageRouteSeg.shipmentPackageSeqId} and service level ${servicelevel_token}, falling back to instant create]]></message></else></if></if><if condition="requestMap == null"><service-call name="mantle.shippo.ShippoServices.make#ShipmentPackageInfo" in-map="context" out-map="[skipPackage:pkgInfoOut.skipPackage,parcel:pkgInfoOut.parcel,extraMap:pkgInfoOut.extraMap,shipmentMap:pkgInfoOut.shipmentMap,insuredAmount:pkgInfoOut.insuredAmount]" out-map-add-to-existing="false"/><if condition="pkgInfoOut.skipPackage"><continue/></if><script><![CDATA[futureInsuredAmountList.add(pkgInfoOut.insuredAmount)]]></script><set field="requestMap" from="[shipment:pkgInfoOut.shipmentMap, carrier_account:carrier_account,                             servicelevel_token:servicelevel_token, label_file_type:label_file_type, async:false]"/></if><log level="info" message="Shippo transaction shipment ${shipmentId} package ${packageRouteSeg.shipmentPackageSeqId} request:\n${requestMap}"/><script><![CDATA[org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2018-02-08")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                            .retry(1.0F,2)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("transactions").build()
                    restClientFutureList.add(restClient.callFuture())
                    futurePackageRouteSegList.add(packageRouteSeg)]]></script></iterate><iterate list="restClientFutureList" entry="restClientFuture"><set field="packageRouteSeg" from="futurePackageRouteSegList.get(restClientFuture_index)"/><set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/><set field="rateInfo" from="rateInfoOut != null ? rateInfoOut.rateInfoByServiceLevelByPackage?.get(packageRouteSeg.shipmentPackageSeqId)?.get(servicelevel_token) : null"/><script><![CDATA[org.moqui.util.RestClient.RestResponse restResponse = restClientFuture.get()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        if (errMsg.length() > 255) errMsg = errMsg.substring(0, 255)
                        packageRouteSeg.gatewayMessage = errMsg
                        packageRouteSeg.update()
                        continue
                    }
                    responseMap = restResponse.jsonObject()]]></script><set field="gatewayMessage" value=""/><if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj"><message><![CDATA[(${messageObj.source}:${messageObj.code}) ${messageObj.text}]]></message><set field="gatewayMessage" value="${gatewayMessage}(${messageObj.source}:${messageObj.code}) ${messageObj.text} "/></iterate><if condition="gatewayMessage.length() > 255"><set field="gatewayMessage" from="gatewayMessage.substring(0,255)"/></if><if condition="getReturnLabels"><then><set field="packageRouteSeg.returnGatewayMessage" from="gatewayMessage"/></then><else><set field="packageRouteSeg.gatewayMessage" from="gatewayMessage"/></else></if></if><if condition="getReturnLabels"><then><set field="packageRouteSeg.returnGatewayStatus" from="responseMap.status"/><set field="packageRouteSeg.returnGatewayLabelId" from="responseMap.object_id"/><set field="packageRouteSeg.returnGatewayRateId" from="rateInfo != null ? rateInfo.shippoObjectId : responseMap.rate?.object_id"/><set field="packageRouteSeg.returnEstimatedAmount" from="rateInfo != null ? rateInfo.shippingTotal as BigDecimal : responseMap.rate?.amount as BigDecimal"/><set field="packageRouteSeg.returnBaseAmount" from="packageRouteSeg.returnEstimatedAmount"/><set field="packageRouteSeg.returnTrackingStatusEnumId" value="ShTsUnknown"/><set field="packageRouteSeg.returnTrackingCode" from="responseMap.tracking_number"/><set field="packageRouteSeg.returnTrackingUrl" from="responseMap.tracking_url_provider"/><set field="packageRouteSeg.returnLabelDate" from="ec.l10n.parseTimestamp(responseMap.object_created, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/><set field="packageRouteSeg.returnLabelUrl" from="responseMap.label_url"/></then><else><set field="packageRouteSeg.gatewayStatus" from="responseMap.status"/><set field="packageRouteSeg.gatewayLabelId" from="responseMap.object_id"/><set field="packageRouteSeg.gatewayRateId" from="rateInfo != null ? rateInfo.shippoObjectId : responseMap.rate?.object_id"/><set field="packageRouteSeg.estimatedAmount" from="rateInfo != null ? rateInfo.shippingTotal as BigDecimal : responseMap.rate?.amount as BigDecimal"/><set field="packageRouteSeg.baseAmount" from="packageRouteSeg.estimatedAmount"/><set field="packageRouteSeg.trackingStatusEnumId" value="ShTsUnknown"/><set field="packageRouteSeg.trackingCode" from="responseMap.tracking_number"/><set field="packageRouteSeg.trackingUrl" from="responseMap.tracking_url_provider"/><set field="packageRouteSeg.labelDate" from="ec.l10n.parseTimestamp(responseMap.object_created, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/><set field="packageRouteSeg.labelUrl" from="responseMap.label_url"/><set field="insuredAmount" from="futureInsuredAmountList.get(restClientFuture_index)"/><if condition="insuredAmount"><entity-find-one entity-name="mantle.product.store.ProductStoreShippingGateway" value-field="pssg"><field-map field-name="productStoreId"/><field-map field-name="carrierPartyId"/></entity-find-one><set field="packageRouteSeg.insuredAmount" from="insuredAmount"/><if condition="pssg?.insurancePercent"><set field="packageRouteSeg.insuranceAmount" from="new BigDecimal(pssg.insurancePercent).multiply(insuredAmount).divide(100.0, 2, BigDecimal.ROUND_HALF_UP)"/></if></if></else></if><entity-update value-field="packageRouteSeg"/><if condition="responseMap.status != 'SUCCESS'"><message><![CDATA[Shippo label status ${responseMap.status} for package ${shipmentPackageSeqId}]]></message></if></iterate></actions></service>