<!--Service Location mantle.account.OfxServices.import#OfxVersion1--><service verb="import" noun="OfxVersion1"><in-parameters><parameter name="paymentMethodId" required="true"/><parameter name="ofxString" required="true" allow-html="any"/></in-parameters><out-parameters/><actions><set field="sgmlReader" from="new org.moqui.impl.util.SimpleSgmlReader(ofxString)"/><set field="header" from="sgmlReader.getHeader()"/><set field="ofxNode" from="sgmlReader.getRoot()"/><entity-find-one entity-name="mantle.account.method.PaymentMethod" value-field="paymentMethod"/><entity-find-one entity-name="mantle.account.method.BankAccount" value-field="bankAccount"/><set field="STMTRS" from="ofxNode.BANKMSGSRSV1?.getAt(0)?.STMTTRNRS?.getAt(0)?.STMTRS?.getAt(0)"/><if condition="!STMTRS"><return error="true" message="Invalid OFX file, could not find STMTRS element"/></if><if condition="bankAccount"><set field="BANKACCTFROM" from="STMTRS.BANKACCTFROM?.getAt(0)"/><if condition="BANKACCTFROM"><set field="BANKID" from="BANKACCTFROM.BANKID[0].text()"/><if condition="bankAccount.routingNumber != BANKID"><message error="true"><![CDATA[OFX BANKID [${BANKID}] does not match routing number [${bankAccount.routingNumber}] on Bank Account [${paymentMethodId}]]]></message></if><set field="ACCTID" from="BANKACCTFROM.ACCTID[0].text()"/><if condition="!ACCTID.contains(bankAccount.accountNumber)"><message error="true"><![CDATA[OFX ACCTID [${ACCTID}] does not match (or contain) account number [${bankAccount.accountNumber}] on Bank Account [${paymentMethodId}]]]></message></if></if><set field="CURDEF" from="STMTRS.CURDEF?.getAt(0)?.text()"/><if condition="CURDEF && paymentMethod.currencyUomId"><if condition="CURDEF != paymentMethod.currencyUomId"><message error="true"><![CDATA[OFX currency (CURDEF) [${CURDEF}] does not match account currency [${paymentMethod.currencyUomId}] on Bank Account [${paymentMethodId}]]]></message></if></if></if><check-errors/><set field="BANKTRANLIST" from="STMTRS.BANKTRANLIST?.getAt(0)"/><iterate list="BANKTRANLIST?.STMTTRN" entry="STMTTRN"><set field="fitId" from="STMTTRN.FITID[0].text()"/><entity-find-one entity-name="mantle.account.method.PaymentMethodTrans" value-field="paymentMethodTrans"><field-map field-name="paymentMethodId"/><field-map field-name="fitId"/></entity-find-one><if condition="paymentMethodTrans"><continue/></if><set field="postedDate" from="sgmlReader.parseOfxDateTime(STMTTRN.DTPOSTED[0].text())"/><set field="TRNAMT" from="STMTTRN.TRNAMT[0].text()"/><if condition="TRNAMT.contains(',')"><set field="TRNAMT" from="TRNAMT.replace(',', '.')"/></if><set field="transAmount" from="new BigDecimal(TRNAMT)"/><set field="transName" from="STMTTRN.NAME?.getAt(0)?.text() ?: STMTTRN.PAYEE?.getAt(0)?.text()"/><set field="transCode" from="STMTTRN.TRNTYPE[0].text()"/><set field="transType" from="transCode"/><entity-find-one entity-name="moqui.basic.Enumeration" value-field="transTypeEnum"><field-map field-name="enumTypeId" value="PaymentMethodTransType"/><field-map field-name="enumCode" from="transType"/></entity-find-one><if condition="transTypeEnum"><set field="transType" from="transTypeEnum.enumId"/></if><service-call name="create#mantle.account.method.PaymentMethodTrans" in-map="[paymentMethodId:paymentMethodId,                         fitId:fitId, transType:transType, transCode:transCode, postedDate:postedDate,                         transAmount:transAmount, transName:transName, transMemo:STMTTRN.MEMO?.getAt(0)?.text(),                         checkNumber:STMTTRN.CHECKNUM?.getAt(0)?.text(), refNumber:STMTTRN.REFNUM?.getAt(0)?.text()]"/></iterate><set field="LEDGERBAL" from="STMTRS.LEDGERBAL?.getAt(0)"/><if condition="LEDGERBAL"><set field="BALAMT" from="LEDGERBAL.BALAMT[0].text()"/><if condition="BALAMT.contains(',')"><set field="BALAMT" from="BALAMT.replace(',', '.')"/></if><set field="ledgerBalance" from="new BigDecimal(BALAMT)"/><set field="balanceDate" from="sgmlReader.parseOfxDateTime(LEDGERBAL.DTASOF[0].text())"/></if><set field="AVAILBAL" from="STMTRS.AVAILBAL?.getAt(0)"/><if condition="AVAILBAL"><set field="BALAMT" from="AVAILBAL.BALAMT[0].text()"/><if condition="BALAMT.contains(',')"><set field="BALAMT" from="BALAMT.replace(',', '.')"/></if><set field="availableBalance" from="new BigDecimal(BALAMT)"/><set field="balanceDate" from="balanceDate ?: sgmlReader.parseOfxDateTime(LEDGERBAL.DTASOF[0].text())"/></if><if condition="balanceDate && (!paymentMethod.balanceDate || balanceDate > paymentMethod.balanceDate)"><service-call name="mantle.account.PaymentMethodServices.update#PaymentMethodMutable" in-map="[paymentMethodId:paymentMethodId, ledgerBalance:ledgerBalance,                             availableBalance:availableBalance, balanceDate:balanceDate]"/></if></actions></service>