<!--Service Location mantle.shipment.ShipmentServices.print#ShipmentLabels--><service verb="print" noun="ShipmentLabels"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="networkPrinterId"/><parameter name="shipmentRouteSegmentSeqId"/><parameter name="shipmentPackageSeqId"/><parameter name="makeDefaultPrinter" type="Boolean" default="false"/><parameter name="returnLabels" type="Boolean" default="false"><description><![CDATA[Print return labels instead of standard/outgoing labels]]></description></parameter></in-parameters><out-parameters><parameter name="printJobIdList" type="List"><parameter name="printJobId"/></parameter></out-parameters><actions><if condition="!networkPrinterId"><set field="networkPrinterId" from="ec.user.getPreference('Shipment.networkPrinterId.default')"/></if><if condition="!networkPrinterId"><return error="true" message="No networkPrinterId specified and no Shipment.networkPrinterId.default preference found"/></if><if condition="makeDefaultPrinter"><script><![CDATA[ec.user.setPreference('Shipment.networkPrinterId.default', networkPrinterId)]]></script></if><entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList"><econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId" ignore-if-empty="true"/><econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/><order-by field-name="shipmentRouteSegmentSeqId,shipmentPackageSeqId"/></entity-find><iterate list="packageRouteSegList" entry="packageRouteSeg"><set field="labelUrl" from="returnLabels ? packageRouteSeg.returnLabelUrl : packageRouteSeg.labelUrl"/><set field="labelImage" from="returnLabels ? packageRouteSeg.getSerialBlob('returnLabelImage') : packageRouteSeg.getSerialBlob('labelImage')"/><if condition="!labelUrl && labelImage == null"><message><![CDATA[Package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId} has no ${returnLabels ? 'return' : 'outgoing'} label URL or image]]></message><continue/></if><if condition="labelImage == null"><script><![CDATA[byte[] labelBytes = null
                    contentType = null
                    try {
                        org.moqui.context.ExecutionContext ec = context.ec
                        org.moqui.util.RestClient.RestResponse labelResponse = ec.service.rest().method("GET").uri((String) labelUrl).call()
                        if (labelResponse.statusCode == 200) {
                            labelBytes = labelResponse.bytes()
                            contentType = labelResponse.getContentType()
                            if (labelBytes == null || labelBytes.length == 0)
                                ec.message.addMessage("Got empty response downloading label for package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId}")
                        } else {
                            ec.message.addMessage("Error downloading label for package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId}: ${labelResponse.getReasonPhrase()}")
                        }
                    } catch (Exception e) {
                        ec.logger.log(ec.logger.ERROR_INT, "Error downloading label for package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId} at ${labelUrl}: ${e.toString()}", e)
                        ec.message.addMessage("Error downloading label for package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId}: ${e.toString()}")
                    }
                    if (labelBytes != null && labelBytes.length > 0) labelImage = new javax.sql.rowset.serial.SerialBlob(labelBytes)]]></script></if><if condition="labelImage == null"><continue/></if><set field="jobName" value="ShipmentLabel${shipmentId}-${packageRouteSeg.shipmentRouteSegmentSeqId}-${packageRouteSeg.shipmentPackageSeqId}"/><service-call name="org.moqui.impl.PrintServices.print#Document" out-map="[printJobId:printOut.printJobId,jobId:printOut.jobId]" out-map-add-to-existing="false" in-map="[networkPrinterId:networkPrinterId, jobName:jobName, serialBlob:labelImage, contentType:contentType]"/><message><![CDATA[Printed label for package ${packageRouteSeg.shipmentPackageSeqId} route segment ${packageRouteSeg.shipmentRouteSegmentSeqId}, print job ${printOut.printJobId} CUPS job ${printOut.jobId}]]></message></iterate></actions></service>