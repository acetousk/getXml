<!--Service Location org.moqui.impl.UserServices.create#UserAccount--><service verb="create" noun="UserAccount"><in-parameters><parameter name="username" type="java.lang.String" required="true" allow-html="none" entity-name="moqui.security.UserAccount" field-name="username"/><parameter name="userFullName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="userFullName"/><parameter name="passwordHint" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="passwordHint"/><parameter name="publicKey" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="publicKey"/><parameter name="disabled" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="disabled" default-value="N"/><parameter name="terminateDate" type="java.sql.Timestamp" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="terminateDate"/><parameter name="requirePasswordChange" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="requirePasswordChange" default-value="N"/><parameter name="currencyUomId" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="currencyUomId"/><parameter name="locale" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="locale"/><parameter name="timeZone" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="timeZone"/><parameter name="externalUserId" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="externalUserId"/><parameter name="emailAddress" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="emailAddress"><text-email/></parameter><parameter name="ipAllowed" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="ipAllowed"/><parameter name="partyId" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="partyId"/><parameter name="lastUpdatedStamp" type="java.sql.Timestamp" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="lastUpdatedStamp"/><parameter name="newPassword" required="true"/><parameter name="newPasswordVerify" required="true"/></in-parameters><out-parameters><parameter name="userId" required="true" entity-name="moqui.security.UserAccount" field-name="userId"/></out-parameters><actions><entity-find entity-name="moqui.security.UserAccount" list="existingUaList"><econdition field-name="username" ignore-case="true"/></entity-find><if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if><if condition="emailAddress"><entity-find entity-name="moqui.security.UserAccount" list="existingUaList"><econdition field-name="emailAddress" ignore-case="true"/></entity-find><if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if></if><service-call name="create#moqui.security.UserAccount" out-map="[userId:context.userId,username:context.username,userFullName:context.userFullName,currentPassword:context.currentPassword,resetPassword:context.resetPassword,passwordSalt:context.passwordSalt,passwordHashType:context.passwordHashType,passwordBase64:context.passwordBase64,passwordSetDate:context.passwordSetDate,passwordHint:context.passwordHint,publicKey:context.publicKey,hasLoggedOut:context.hasLoggedOut,disabled:context.disabled,disabledDateTime:context.disabledDateTime,terminateDate:context.terminateDate,successiveFailedLogins:context.successiveFailedLogins,requirePasswordChange:context.requirePasswordChange,currencyUomId:context.currencyUomId,locale:context.locale,timeZone:context.timeZone,externalUserId:context.externalUserId,emailAddress:context.emailAddress,ipAllowed:context.ipAllowed,partyId:context.partyId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="context"/><service-call name="org.moqui.impl.UserServices.update#PasswordInternal" out-map="[passwordIssues:updateOut.passwordIssues,updateSuccessful:updateOut.updateSuccessful]" in-map="[userId:userId, newPassword:newPassword, newPasswordVerify:newPasswordVerify,                     requirePasswordChange:requirePasswordChange]"/><if condition="updateOut.updateSuccessful && !ec.message.hasError()"><then><message public="true" type="success"><![CDATA[Account created with username ${username}]]></message></then><else-if condition="updateOut.passwordIssues"><message public="true" type="danger"><![CDATA[Because of password issues not creating account with username ${username}]]></message><return error="true" message="Removed temporary account with username ${username} for password issues"/></else-if></if></actions></service>