<!--Service Location mantle.account.PositivePayServices.generate#PmftWellsFargoArp--><service verb="generate" noun="PmftWellsFargoArp"><in-parameters><parameter name="paymentMethodFileId" required="true"/><parameter name="bankAccount" type="Map" required="true"/><parameter name="paymentList" type="List" required="true"/><parameter name="thruDate" type="Timestamp" required="true"/><parameter name="fileDate" type="Timestamp" required="true"/><parameter name="entryCount" type="Long" required="true"/><parameter name="debitAmountTotal" type="BigDecimal" required="true"/><parameter name="debitAmountTotalWithCancels" type="BigDecimal" required="true"/><parameter name="checkNumberSum" type="Long" required="true"/></in-parameters><out-parameters><parameter name="fileText"/></out-parameters><actions><if condition="!bankAccount.posPayBankNumber || bankAccount.posPayBankNumber.length() > 5"><return error="true" message="Pos. Pay Bank Number must be set and 5 digits or less (for bank account [${bankAccount.paymentMethodId}])"/></if><script><![CDATA[import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityValue
                ExecutionContext ec = context.ec

                // Handy output checking lines, paste below to line up output
                // 0        10        20        30        40        50        60        70        80
                // 123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+

                String accountNumber =  bankAccount.accountNumber
                if (accountNumber.length() > 15) accountNumber = accountNumber.substring(accountNumber.length() - 15, accountNumber.length())

                List<StringBuilder> lines = []

                // Header
                StringBuilder fileHeader = new StringBuilder(80)
                // 01-03: Constant = '*03'
                fileHeader.append('*03')
                // 04-08: Bank ID, assigned by bank (5 digits, left 0 pad)
                fileHeader.append(bankAccount.posPayBankNumber.padLeft(5, '0'))
                // 09-23: Account Number (15 digits, left 0 padded)
                fileHeader.append(accountNumber.padLeft(15, '0'))
                // 24-24: File status (always 0)
                fileHeader.append('0')

                lines.add(fileHeader)

                // Account number in detail lines is only 10 chars
                if (accountNumber.length() > 10) accountNumber = accountNumber.substring(accountNumber.length() - 10, accountNumber.length())

                for (Map payment in paymentList) {
                    // Get amount String (10 chars, last 2 are cents)
                    String amountStr = payment.getBigDecimal("amount").movePointRight(2).longValue() as String

                    boolean isVoid = payment.statusId == 'PmntVoid'
                    boolean isCancel = payment.statusId == 'PmntCancelled'

                    String payeeName = ""
                    EntityValue otherParty = payment.toPartyId ? ec.entity.find("mantle.party.PartyDetail").condition("partyId", payment.toPartyId).one() : null
                    if (otherParty) {
                        payeeName = otherParty.firstName ? otherParty.firstName + " " + otherParty.lastName : otherParty.organizationName
                        if (payeeName.length() > 40) payeeName = payeeName.substring(0, 40)
                    }

                    // Detail Line
                    StringBuilder detailLine = new StringBuilder(80)
                    // 01-10: Check number (10 digits, left 0 padded)
                    detailLine.append(payment.paymentRefNum.padLeft(10, '0'))
                    // 11-16: Date of issue (MMddyy)
                    detailLine.append(ec.l10n.format(payment.effectiveDate, 'MMddyy'))
                    // 17-26: Account number (same as header, but 10 digits)
                    detailLine.append(accountNumber.padLeft(10, '0'))
                    /* 27-29: Transaction code:
                        Supported:
                        320 check register
                        370 cancelled register with dollar amount.
                        430 void register with zero amount
                        Note for Future:
                        525 delete issue notices not received (INNRs)
                        620 Stop Payment Request
                        630 Release Stop Payment (Cancellation)
                        640 Stop Payment Renewal Cancellation
                     */
                    detailLine.append(isVoid ? '430' : (isCancel ? '370' : '320'))
                    // 30-39: Check amount (10 numbers, last 2 are cents, left 0 padded); for voids enter all 0s
                    detailLine.append((isVoid ? '0' : amountStr).padLeft(10, '0'))
                    // 40-79: Additional data; Payee information (40 chars; pad right with spaces)
                    detailLine.append(payeeName.padRight(40, ' '))

                    lines.add(detailLine)
                }

                // Get amount String (10 chars, last 2 are cents)
                String debitAmountTotalWithCancelsStr = debitAmountTotalWithCancels.movePointRight(2).longValue() as String

                // Trailer
                StringBuilder fileTrailer = new StringBuilder(80)
                // 01-01: Trailer Constant = '&'
                fileTrailer.append('&')
                // 02-15: Spaces (15)
                fileTrailer.append(' '.padRight(15, ' '))
                // 16-20: Number of detail records (5 digits, left 0 pad)
                fileTrailer.append((entryCount as String).padLeft(5, '0'))
                // 21-23: Blanks (3)
                fileTrailer.append(' '.padRight(3, ' '))
                // 24-33: Sum of check amounts (issues and cancels; 10 numbers, last 2 are cents, left 0 padded)
                fileTrailer.append(debitAmountTotalWithCancelsStr.padLeft(10, '0'))
                // 34-80: Blanks (47)
                fileTrailer.append(" ".padRight(47, ' '))

                lines.add(fileTrailer)

                // combine the lines
                StringBuilder ftSb = new StringBuilder(81 * lines.size())
                for (StringBuilder line in lines) {
                    // NOTE: lines don't have to be exactly 80 chars in this case
                    ftSb.append(line).append('\n')
                }
                // get the String value
                fileText = ftSb.toString()]]></script></actions></service>