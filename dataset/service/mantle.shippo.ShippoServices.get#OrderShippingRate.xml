<!--Service Location mantle.shippo.ShippoServices.get#OrderShippingRate--><service verb="get" noun="OrderShippingRate"><in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId" required="true"/><parameter name="shippingGatewayConfigId" required="true"/><parameter name="createOrderItem" type="Boolean" default="true"/><parameter name="carrierPartyId"><description><![CDATA[Overrides OrderPart.carrierPartyId if specified]]></description></parameter><parameter name="shipmentMethodEnumId"><description><![CDATA[Overrides OrderPart.shipmentMethodEnumId if specified]]></description></parameter><parameter name="postalContactMechId"><description><![CDATA[Overrides OrderPart.postalContactMechId if specified]]></description></parameter><parameter name="packageInfoList" type="List"><description><![CDATA[See get#AutoPackageInfo interface for details]]></description><parameter name="packageInfo" type="Map"/></parameter></in-parameters><out-parameters><parameter name="shippingTotal" required="true"/><parameter name="orderItemSeqId"><description><![CDATA[Return if an OrderItem record was created]]></description></parameter><parameter name="postalContactMechId"><description><![CDATA[Return if address was validated and replaced]]></description></parameter></out-parameters><actions><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not getting rates"/><return/></if><if condition="!packageInfoList"><return message="No package info found, not getting Shippo shipping rates"/></if><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/><entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/><set field="fromPartyId" from="orderPart.vendorPartyId"/><if condition="!fromPartyId"><return message="Vendor party not set on order part ${orderId}:${orderPartSeqId}"/></if><set field="toPartyId" from="orderPart.customerPartyId"/><if condition="!toPartyId"><return message="To party not set on order part ${orderId}:${orderPartSeqId}"/></if><set field="carrierPartyId" from="carrierPartyId ?: orderPart.carrierPartyId"/><if condition="!carrierPartyId || carrierPartyId == '_NA_'"><return message="Carrier not set on order part ${orderId}:${orderPartSeqId}"/></if><set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: orderPart.shipmentMethodEnumId"/><if condition="!shipmentMethodEnumId"><return message="Shipment method not set on order part ${orderId}:${orderPartSeqId}"/></if><if condition="!orderPart.facilityId"><return message="Facility not set on order part ${orderId}:${orderPartSeqId}"/></if><service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="[postalContactMechId:facOriginOut.postalContactMechId,telecomContactMechId:facOriginOut.telecomContactMechId]" in-map="[facilityId:orderPart.facilityId]"/><if condition="!facOriginOut.postalContactMechId"><return message="Facility ${orderPart.facilityId} on order part ${orderId}:${orderPartSeqId} has no ship origin address"/></if><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="facOriginOut.postalContactMechId"/></entity-find-one><if condition="!originPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:fromValidateOut.contactMechId]" in-map="[contactMechId:facOriginOut.postalContactMechId, partyId:fromPartyId, facilityId:orderPart.facilityId,                             shippingGatewayConfigId:shippingGatewayConfigId]"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress"><field-map field-name="contactMechId" from="fromValidateOut.contactMechId"/></entity-find-one></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech"><field-map field-name="contactMechId" from="originPostalAddress.contactMechId"/></entity-find-one><if condition="originPostalAddress.shipGatewayAddressId && originContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_from" from="originPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:originAddrOut.addressMap]" in-map="[postalAddress:originPostalAddress, partyId:fromPartyId, isOrigin:true]"/><set field="address_from" from="originAddrOut.addressMap"/></else></if><if condition="!orderPart.postalContactMechId"><return message="Address not set on order part ${orderId}:${orderPartSeqId}"/></if><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one><if condition="!destPostalAddress.shipGatewayAddressId"><service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="[contactMechId:toValidateOut.contactMechId]" in-map="[contactMechId:orderPart.postalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/><set field="postalContactMechId" from="toValidateOut.contactMechId"/><set field="orderPart.postalContactMechId" from="postalContactMechId"/><entity-update value-field="orderPart"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress"><field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one></if><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech"><field-map field-name="contactMechId" from="destPostalAddress.contactMechId"/></entity-find-one><if condition="destPostalAddress.shipGatewayAddressId && destContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified']"><then><set field="address_to" from="destPostalAddress.shipGatewayAddressId"/></then><else><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:destAddrOut.addressMap]" in-map="[postalAddress:destPostalAddress, partyId:toPartyId, isOrigin:false]"/><set field="address_to" from="destAddrOut.addressMap"/></else></if><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier"/><set field="carrier_account" from="gatewayCarrier?.gatewayAccountId"/><if condition="!carrier_account"><return message="No Shippo account ID found for carrier ${carrierPartyId} in gateway ${shippingGatewayConfigId}"/></if><entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierShipmentMethod"/><set field="servicelevel_token" from="carrierShipmentMethod?.gatewayServiceCode"/><if condition="!servicelevel_token"><return message="No Shippo service level code found for carrier ${carrierPartyId} method ${shipmentMethodEnumId}"/></if><set field="shippingTotal" from="0.0"/><set field="servicelevelMap" from="null"/><iterate list="packageInfoList" entry="packageInfo"><entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType"><field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one><if condition="boxType == null"><message><![CDATA[Package has no box type, skipping]]></message><continue/></if><set field="dimUom" from="boxType.dimensionUom"/><if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null"><message><![CDATA[Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package]]></message><continue/></if><entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom"><field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one><set field="weight" from="packageInfo.weight ?: boxType.defaultGrossWeight"/><if condition="!weight || weightUom == null"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package]]></message><continue/></if><set field="distance_unit" from="dimUom.abbreviation"/><if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package]]></message><continue/></if><set field="mass_unit" from="weightUom.abbreviation"/><if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])"><message><![CDATA[Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package]]></message><continue/></if><set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,                             distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/><set field="parcels" from="[parcel]"/><service-call name="mantle.shipment.CarrierServices.get#GeneralPackageRequiresInsurance" out-map="[insuranceRequired:insuranceReqOut.insuranceRequired,packageTotalCost:insuranceReqOut.packageTotalCost,contentDescription:insuranceReqOut.contentDescription]" out-map-add-to-existing="false" in-map="[quantityByProductId:packageInfo.quantityByProductId, currencyUomId:orderHeader.currencyUomId,                             productStoreId:orderHeader.productStoreId, vendorPartyId:orderPart.vendorPartyId]"/><if condition="insuranceReqOut.insuranceRequired && insuranceReqOut.packageTotalCost"><set field="parcel.extra" from="[insurance:[amount:insuranceReqOut.packageTotalCost, currency:currencyUomId,                             content:insuranceReqOut.contentDescription]]"/></if><set field="requestMap" from="[address_from:address_from, address_to:address_to,                     parcels:parcels, carrier_accounts:[carrier_account], async:false, extra:[bypass_address_validation:true]]"/><script><![CDATA[org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2018-02-08")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                            .retry(1.0F,2)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("shipments").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error")
                        ec.message.addMessage(errMsg)
                        return
                    }
                    responseMap = restResponse.jsonObject()]]></script><if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj"><message><![CDATA[(${messageObj.source}:${messageObj.code}) ${messageObj.text}]]></message></iterate></if><if condition="responseMap.status != 'SUCCESS'"><message><![CDATA[Shippo rate status ${responseMap.status} for package]]></message></if><iterate list="responseMap.rates" entry="rateMap"><if condition="rateMap?.servicelevel?.token == servicelevel_token"><set field="curShippingTotal" from="rateMap.amount as BigDecimal"/><set field="shippingTotal" from="shippingTotal + curShippingTotal"/><set field="servicelevelMap" from="rateMap.servicelevel"/><break/></if></iterate></iterate><if condition="createOrderItem && shippingTotal > 0.0"><entity-find-one entity-name="mantle.party.Party" value-field="carrierParty"><field-map field-name="partyId" from="carrierPartyId"/></entity-find-one><entity-find-one entity-name="moqui.basic.Enumeration" value-field="shipmentMethodEnum"><field-map field-name="enumId" from="orderPart.shipmentMethodEnumId"/></entity-find-one><set field="itemDescription" value="${carrierParty.pseudoId} ${servicelevelMap.name ?: shipmentMethodEnum.description}"/><set field="comments" value=""/><iterate list="parcels" entry="parcel"><if condition="comments"><set field="comments" from="comments + ', '"/></if><set field="comments" value="${comments}${parcel.length}x${parcel.width}x${parcel.height}${parcel.distance_unit} ${parcel.weight}${parcel.mass_unit}"/></iterate><service-call name="create#mantle.order.OrderItem" out-map="[orderId:context.orderId,orderItemSeqId:context.orderItemSeqId,orderPartSeqId:context.orderPartSeqId,parentItemSeqId:context.parentItemSeqId,itemTypeEnumId:context.itemTypeEnumId,productId:context.productId,productFeatureId:context.productFeatureId,otherPartyProductId:context.otherPartyProductId,productParameterSetId:context.productParameterSetId,itemDescription:context.itemDescription,comments:context.comments,quantity:context.quantity,quantityUomId:context.quantityUomId,quantityCancelled:context.quantityCancelled,selectedAmount:context.selectedAmount,priority:context.priority,requiredByDate:context.requiredByDate,unitAmount:context.unitAmount,unitListPrice:context.unitListPrice,isModifiedPrice:context.isModifiedPrice,standardCost:context.standardCost,externalItemSeqId:context.externalItemSeqId,fromAssetId:context.fromAssetId,productPriceId:context.productPriceId,productCategoryId:context.productCategoryId,isPromo:context.isPromo,promoQuantity:context.promoQuantity,promoTimesUsed:context.promoTimesUsed,storePromotionId:context.storePromotionId,promoCodeId:context.promoCodeId,promoCodeText:context.promoCodeText,subscriptionId:context.subscriptionId,finAccountId:context.finAccountId,finAccountTransId:context.finAccountTransId,overrideGlAccountId:context.overrideGlAccountId,salesOpportunityId:context.salesOpportunityId,sourceReferenceId:context.sourceReferenceId,sourcePercentage:context.sourcePercentage,amountAlreadyIncluded:context.amountAlreadyIncluded,exemptAmount:context.exemptAmount,customerReferenceId:context.customerReferenceId,taxAuthorityId:context.taxAuthorityId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,                         itemTypeEnumId:'ItemShipping', quantity:1, unitAmount:shippingTotal, itemDescription:itemDescription, comments:comments]"/></if></actions></service>