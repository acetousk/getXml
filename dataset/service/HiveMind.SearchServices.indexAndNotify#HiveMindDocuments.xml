<!--Service Location HiveMind.SearchServices.indexAndNotify#HiveMindDocuments--><service verb="indexAndNotify" noun="HiveMindDocuments"><in-parameters><parameter name="dataFeedId" entity-name="moqui.entity.feed.DataFeed" field-name="dataFeedId"/><parameter name="feedStamp" type="Timestamp"/><parameter name="documentList" type="List" required="true"><parameter name="document" type="Map"><parameter name="_id" required="true"><description><![CDATA[The combined PK field values of the primary
                        entity in the DataDocument. If there is more than one PK field the values are separated with a
                        double-colon ("::").]]></description></parameter><parameter name="_type" required="true"><description><![CDATA[The DataDocument.dataDocumentId that defines
                        the document structure, etc.]]></description></parameter><parameter name="_index"><description><![CDATA[From DataDocument.indexName, if specified.]]></description></parameter><parameter name="_timestamp"><description><![CDATA[Document timestamp in the format yyyy-MM-dd'T'HH:mm:ss]]></description></parameter></parameter></parameter></in-parameters><out-parameters/><actions><script><![CDATA[import org.moqui.entity.EntityList
                import org.moqui.entity.EntityValue
                import org.slf4j.Logger
                import org.slf4j.LoggerFactory
                import org.moqui.context.ExecutionContext
                ExecutionContext ec = context.ec
                Logger logger = LoggerFactory.getLogger("HiveMind_receive_DataFeed")

                // call the indexing service
                Map indexResults = ec.service.sync().name("org.moqui.search.SearchServices.index#DataDocuments")
                        .parameters((Map) context).parameter("getOriginalDocuments", true).call()
                if (indexResults == null) return

                // send email notifications
                List documentList = context.documentList
                List originalDocumentList = (List) indexResults.originalDocumentList

                for (int i = 0; i < documentList.size(); i++) {
                    Map document = (Map) documentList.get(i)
                    Map originalDocument = (Map) originalDocumentList.get(i)

                    if (!originalDocument || document != originalDocument) {
                        // send document updated notification

                        if (document._type == "MantleWikiPage") {
                            // TODO: also check to see if fields shown in email are actually changed, otherwise don't send email

                            // send WikiPage updated notification
                            StringBuilder toAddresses = new StringBuilder()
                            EntityList wikiSpaceUserList = ec.entity.find("moqui.resource.wiki.WikiSpaceUser")
                                    .condition([wikiSpaceId:document.WikiPage.wikiSpaceId,  receiveNotifications:"Y"]).list()
                            if (wikiSpaceUserList) for (EntityValue wikiSpaceUser in wikiSpaceUserList) {
                                String emailAddress = ec.entity.find("moqui.security.UserAccount")
                                        .condition("userId", wikiSpaceUser.userId).one()?.emailAddress
                                if (emailAddress) { if (toAddresses) toAddresses.append(",");  toAddresses.append(emailAddress) }
                            }
                            EntityList wikiPageUserList = ec.entity.find("moqui.resource.wiki.WikiPageUser")
                                    .condition([wikiPageId:document._id,  receiveNotifications:"Y"]).list()
                            if (wikiPageUserList) for (EntityValue wikiPageUser in wikiPageUserList) {
                                String emailAddress = ec.entity.find("moqui.security.UserAccount")
                                        .condition("userId", wikiPageUser.userId).one()?.emailAddress
                                if (emailAddress) { if (toAddresses) toAddresses.append(",");  toAddresses.append(emailAddress) }
                            }

                            Map bodyParameters = [document: document, originalDocument: originalDocument]

                            if (toAddresses) {
                                ec.service.async().name("org.moqui.impl.EmailServices.send#EmailTemplate")
                                        .parameters([emailTemplateId: "HM_WIKI_PAGE_UPDATE",
                                        toAddresses: toAddresses.toString(), bodyParameters: bodyParameters])
                                        .call()
                            }
                        }

                        if (document._type == "MantleTask") {
                            // TODO: also check to see if fields shown in email are actually changed, otherwise don't send email

                            // send task updated notification
                            StringBuilder toAddresses = new StringBuilder()
                            EntityList workEffortPartyList = ec.entity.find("mantle.work.effort.WorkEffortParty")
                                    .condition([workEffortId:document._id,  receiveNotifications:"Y"])
                                    .conditionDate(null, null, null).list()
                            if (workEffortPartyList) for (EntityValue workEffortParty in workEffortPartyList) {
                                Map emailAddressMap = ec.service.sync().name("mantle.party.ContactServices.get#PrimaryEmailAddress")
                                        .parameter("partyId", workEffortParty.partyId).call()
                                if (emailAddressMap.emailAddress) {
                                    if (toAddresses) toAddresses.append(",")
                                    toAddresses.append(emailAddressMap.emailAddress)
                                }
                            }

                            Map bodyParameters = [document: document, originalDocument: originalDocument]

                            if (toAddresses) {
                                ec.service.async().name("org.moqui.impl.EmailServices.send#EmailTemplate")
                                        .parameters([emailTemplateId: "HM_TASK_UPDATE",
                                        toAddresses: toAddresses.toString(), bodyParameters: bodyParameters])
                                        .call()
                            }
                        }
                    }
                }]]></script></actions></service>