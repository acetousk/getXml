<!--Service Location org.moqui.impl.UserServices.validate#UserAuthcFactorCode--><service verb="validate" noun="UserAuthcFactorCode"><in-parameters><parameter name="userId" required="true"/><parameter name="code" required="true"/></in-parameters><out-parameters><parameter name="verified" type="Boolean"/><parameter name="factorId"/></out-parameters><actions><set field="verified" from="false"/><script><![CDATA[import dev.samstevens.totp.time.*
                import dev.samstevens.totp.code.*
                TimeProvider timeProvider = new SystemTimeProvider()
                CodeGenerator codeGenerator = new DefaultCodeGenerator()
                CodeVerifier verifier = new DefaultCodeVerifier(codeGenerator, timeProvider)]]></script><entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList"><date-filter/><econdition field-name="userId"/><econdition field-name="factorTypeEnumId" operator="not-equals" value="UafEmail"/></entity-find><iterate list="userAuthcFactorList" entry="userAuthcFactor"><if condition="userAuthcFactor.factorTypeEnumId == 'UafSingleUse'"><then><if condition="userAuthcFactor.factorOption == ec.ecfi.getSimpleHash(code, 'SaltySalt')"><set field="factorId" from="userAuthcFactor.factorId"/><set field="verified" from="true"/><service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId,thruDate:ec.user.nowTimestamp]"/><if condition="userAuthcFactor.fromFactorId"><service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.fromFactorId,needsValidation:'N']"/></if></if></then><else-if condition="userAuthcFactor.factorTypeEnumId == 'UafTotp'"><if condition="verifier.isValidCode(userAuthcFactor.factorOption, code)"><set field="factorId" from="userAuthcFactor.factorId"/><set field="verified" from="true"/><service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId,needsValidation:'N']"/></if></else-if></if></iterate></actions></service>