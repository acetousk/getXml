<!--Service Location mantle.shipment.ShipmentServices.deliver#Shipment--><service verb="deliver" noun="Shipment"><in-parameters><parameter name="shipmentId" required="true" entity-name="mantle.shipment.Shipment" field-name="shipmentId"/><parameter name="actualArrivalDate" type="Timestamp"/></in-parameters><out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters><actions><entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/><if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if><set field="shipmentTypeEnum" from="shipment.'ShipmentType#moqui.basic.Enumeration'"/><set field="isIncoming" from="shipmentTypeEnum?.enumId == 'ShpTpIncoming' || shipmentTypeEnum?.parentEnumId == 'ShpTpIncoming'"/><if condition="isIncoming"><service-call name="mantle.shipment.ShipmentServices.reduce#QuantitiesToHandled" in-map="[shipmentId:shipmentId]"/></if><service-call name="update#mantle.shipment.Shipment" in-map="[shipmentId:shipmentId, statusId:'ShipDelivered']" out-map="[shipmentId:context.shipmentId,shipmentTypeEnumId:context.shipmentTypeEnumId,statusId:context.statusId,fromPartyId:context.fromPartyId,toPartyId:context.toPartyId,binLocationNumber:context.binLocationNumber,productStoreId:context.productStoreId,priority:context.priority,entryDate:context.entryDate,shipAfterDate:context.shipAfterDate,shipBeforeDate:context.shipBeforeDate,estimatedReadyDate:context.estimatedReadyDate,estimatedShipDate:context.estimatedShipDate,estimatedArrivalDate:context.estimatedArrivalDate,latestCancelDate:context.latestCancelDate,packedDate:context.packedDate,pickContainerId:context.pickContainerId,shipWorkEffortId:context.shipWorkEffortId,receiveWorkEffortId:context.receiveWorkEffortId,assemblyWorkEffortId:context.assemblyWorkEffortId,estimatedShipCost:context.estimatedShipCost,costUomId:context.costUomId,addtlShippingCharge:context.addtlShippingCharge,addtlShippingChargeDesc:context.addtlShippingChargeDesc,signatureRequiredEnumId:context.signatureRequiredEnumId,handlingInstructions:context.handlingInstructions,otherPartyOrderId:context.otherPartyOrderId,systemMessageRemoteId:context.systemMessageRemoteId,externalId:context.externalId,originId:context.originId,lastUpdatedStamp:context.lastUpdatedStamp]"/><entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="shipmentRouteSegmentList"><econdition field-name="shipmentId"/><order-by field-name="shipmentRouteSegmentSeqId"/></entity-find><if condition="shipmentRouteSegmentList"><then><set field="lastRouteSegment" from="shipmentRouteSegmentList.get(shipmentRouteSegmentList.size()-1)"/><service-call name="update#mantle.shipment.ShipmentRouteSegment" in-map="[shipmentId:shipmentId, shipmentRouteSegmentSeqId:lastRouteSegment.shipmentRouteSegmentSeqId,                              actualArrivalDate:(actualArrivalDate ?: lastRouteSegment.actualArrivalDate ?: ec.user.nowTimestamp)]"/></then><else><log level="warn" message="No ShipmentRouteSegment found for Shipment ${shipmentId}, not setting actualStartDate"/></else></if></actions></service>