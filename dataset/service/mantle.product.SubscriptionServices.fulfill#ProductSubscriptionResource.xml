<!--Service Location mantle.product.SubscriptionServices.fulfill#ProductSubscriptionResource--><service verb="fulfill" noun="ProductSubscriptionResource"><in-parameters><parameter name="orderId" required="true"/><parameter name="orderItemSeqId" required="true"/><parameter name="productId" required="true" entity-name="mantle.product.subscription.ProductSubscriptionResource" field-name="productId"/><parameter name="subscriptionResourceId" required="true" entity-name="mantle.product.subscription.ProductSubscriptionResource" field-name="subscriptionResourceId"/><parameter name="fromDate" type="Timestamp" required="false" entity-name="mantle.product.subscription.ProductSubscriptionResource" field-name="fromDate"/></in-parameters><out-parameters><parameter name="subscriptionId"/></out-parameters><actions><entity-find-one entity-name="mantle.product.subscription.SubscriptionResource" value-field="subscriptionResource"/><entity-find-one entity-name="mantle.product.subscription.ProductSubscriptionResource" value-field="psr"/><entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem"/><set field="orderPart" from="orderItem.'mantle.order.OrderPart'"/><set field="customerPartyId" from="orderPart.customerPartyId"/><entity-find entity-name="mantle.product.subscription.Subscription" list="existingSubscriptionList"><econdition field-name="subscriptionResourceId" from="subscriptionResourceId"/><econdition field-name="subscriberPartyId" from="customerPartyId"/><econdition field-name="resourceInstanceId" ignore-if-empty="true"/><order-by field-name="-thruDate"/></entity-find><if condition="fromDate == null"><set field="fromDate" from="existingSubscriptionList?.first?.thruDate ?: ec.user.nowTimestamp"/></if><if condition="!resourceInstanceId && existingSubscriptionList"><set field="resourceInstanceId" from="existingSubscriptionList[0].resourceInstanceId"/></if><script><![CDATA[int thruOffset = (orderItem.quantity ?: 1) * (psr.availableTime ?: 1)
            thruDateCal = ec.user.getNowCalendar()
            thruDateCal.setTimeInMillis(fromDate.getTime())
            thruDateCal.add(getCalendarFieldFromUomId(psr.availableTimeUomId ?: 'TF_mon'), thruOffset)
            thruDate = new java.sql.Timestamp(thruDateCal.getTimeInMillis())]]></script><log level="info" message="Creating Subscription for customer [${customerPartyId}], resource [${subscriptionResourceId}], order item [${ec.resource.expand('OrderItemNameTemplate','')}], fromDate: ${fromDate}, thruDate: ${thruDate}"/><service-call name="create#mantle.product.subscription.Subscription" out-map="[subscriptionId:context.subscriptionId,subscriptionTypeEnumId:context.subscriptionTypeEnumId,subscriptionResourceId:context.subscriptionResourceId,subscriberPartyId:context.subscriberPartyId,deliverToContactMechId:context.deliverToContactMechId,orderId:context.orderId,orderItemSeqId:context.orderItemSeqId,productId:context.productId,externalSubscriptionId:context.externalSubscriptionId,resourceInstanceId:context.resourceInstanceId,description:context.description,fromDate:context.fromDate,thruDate:context.thruDate,purchaseFromDate:context.purchaseFromDate,purchaseThruDate:context.purchaseThruDate,availableTime:context.availableTime,availableTimeUomId:context.availableTimeUomId,useTime:context.useTime,useTimeUomId:context.useTimeUomId,useCountLimit:context.useCountLimit,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[subscriptionTypeEnumId:'StProduct', subscriptionResourceId:subscriptionResourceId,                     subscriberPartyId:customerPartyId, deliverToContactMechId:null,                     orderId:orderId, orderItemSeqId:orderItemSeqId, productId:productId,                     fromDate:fromDate, thruDate:thruDate, resourceInstanceId:resourceInstanceId,                     availableTime:psr.availableTime, availableTimeUomId:psr.availableTimeUomId, useTime:psr.useTime,                     useTimeUomId:psr.useTimeUomId, useCountLimit:psr.useCountLimit]"/><log level="warn" message="Created Subscription ${subscriptionId} tx cache active ${ec.transaction.isTransactionCacheActive()}, tx ${ec.transaction.getTransactionManager().getTransaction()}"/><if condition="existingSubscriptionList"><then><if condition="subscriptionResource?.renewServiceName"><service-call name="${subscriptionResource.renewServiceName}" out-map="renewOut" in-map="[subscriptionId:subscriptionId]"/></if><if condition="subscriptionResource?.restoreAccessServiceName"><service-call name="${subscriptionResource.restoreAccessServiceName}" out-map="restoreOut" in-map="[subscriptionId:subscriptionId]"/></if></then><else><if condition="subscriptionResource?.initServiceName"><service-call name="${subscriptionResource.initServiceName}" out-map="initOut" in-map="[subscriptionId:subscriptionId]"/></if></else></if></actions></service>