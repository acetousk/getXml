<!--Service Location mantle.sales.SalesReportServices.get#SalesOrderSummary--><service verb="get" noun="SalesOrderSummary"><in-parameters><parameter name="interval" default-value="M"/><parameter name="intervalCount" type="Integer" default="13"/><parameter name="thruDate" type="Date" default="new java.sql.Date(ec.user.nowTimestamp.time)"/><parameter name="offset"/><parameter name="maPeriods" type="Integer" default="0"/><parameter name="vendorPartyIds" type="List"><parameter name="vendorPartyId"/></parameter><parameter name="customerPartyIds" type="List"><parameter name="customerPartyId"/></parameter><parameter name="productStoreIds" type="List"><parameter name="productStoreId"/></parameter><parameter name="customerClassificationIds" type="List"><parameter name="customerClassificationId"/></parameter><parameter name="productIds" type="List"><parameter name="productId"/></parameter><parameter name="dateFormat" default-value="dd MMM yyyy"/><parameter name="indexName" default-value="mantle_sales"/><parameter name="documentType" default-value="MantleSalesOrderItem"/><parameter name="dateField" default-value="placedDate"/><parameter name="clusterName" default-value="default"/></in-parameters><out-parameters><parameter name="salesOrderSummaryList" type="List"><parameter name="result" type="Map"/></parameter><parameter name="ordersThis" type="Map"/><parameter name="ordersLast" type="Map"/><parameter name="ordersPrior" type="Map"/><parameter name="ordersAverage" type="Map"/><parameter name="ordersTotal" type="Map"/></out-parameters><actions><script><![CDATA[import groovy.json.JsonOutput
            import java.time.temporal.ChronoUnit
            import java.time.temporal.TemporalUnit
            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec

            def elasticClient = ec.factory.elastic.getClient((String) clusterName)
            if (elasticClient == null) { ec.message.addMessage("No ElasticClient found for cluster ${clusterName}", "danger"); return }
            String intervalName = elasticClient.isEsVersionUnder7() ? "interval" : "calendar_interval"

            int maInt = maPeriods
            if (maInt < 0) maInt = 0
            int displayIntervalCount = interval == 'q' ? (intervalCount * 3) : intervalCount
            int searchIntervalCount = displayIntervalCount + maInt

            Map<String, TemporalUnit> tempUnits = [d:ChronoUnit.DAYS, w:ChronoUnit.WEEKS, M:ChronoUnit.MONTHS, q:ChronoUnit.MONTHS, y:ChronoUnit.YEARS]
            Map<String, String> perMap = [d:'day', w:'week', M:'month', q:'quarter', y:'year']
            ArrayList<Timestamp> curPer = ec.user.getPeriodRange(perMap.get(interval), 0, thruDate)
            Timestamp thruTimestamp = curPer.get(1)
            def fromDateDt = java.time.ZonedDateTime.ofInstant(java.time.Instant.ofEpochMilli(curPer[0].time), TimeZone.getDefault().toZoneId())
            fromDateDt = fromDateDt.minus(searchIntervalCount, tempUnits.get(interval))
            // ec.logger.warn("from ${fromDateDt} thru ${thruTimestamp}")

            List filterList = [
                    [range: [(dateField): [gte:(fromDateDt.toInstant().toEpochMilli() as String), lt:(thruTimestamp.time as String), format: 'epoch_millis']]],
                    [terms: [partStatusId: ['OrderPlaced', 'OrderProcessing', 'OrderApproved', 'OrderSent', 'OrderCompleted', 'OrderHold']]],
                    [terms: [statusId: ['OrderPlaced', 'OrderProcessing', 'OrderApproved', 'OrderSent', 'OrderCompleted', 'OrderHold']]]
            ]
            if (vendorPartyIds) filterList.add([terms: [vendorPartyId: vendorPartyIds]])
            if (customerPartyIds) filterList.add([terms: [customerPartyId: customerPartyIds]])
            if (productStoreIds) filterList.add([terms: [productStoreId: productStoreIds]])
            if (customerClassificationIds) filterList.add([terms: [customerClassId: customerClassificationIds]])
            if (productIds) filterList.add([terms: [productId: productIds]])
            Map queryMap = [bool: [filter: filterList]]

            if (!offset && interval == 'w') {
                // default to offset based on user's firstDayOfWeek relative to the ElasticSearch default of Monday for weekly date histogram
                int userFirstDay = ec.user.getCalendarSafe().getFirstDayOfWeek()
                int userMondayOffset = userFirstDay - Calendar.MONDAY
                offset = (userMondayOffset < 0 ? '-' : '+') + Math.abs(userMondayOffset) + 'd'
            }

            // AggregationBuilder aggBuilder = AggregationBuilders.dateHistogram("DateOuter").field((String) dateField)
            //         .order(BucketOrder.key(false)).timeZone(DateTimeZone.forTimeZone(TimeZone.getDefault()))
            //         .dateHistogramInterval(new DateHistogramInterval("1" + (String) interval)).format((String) dateFormat)
            // if (offset) aggBuilder.offset((String) offset)
            Map histoMap = [field:dateField, (intervalName):("1" + (String) interval), time_zone:TimeZone.default.getID(),
                    format:dateFormat, order:[_key:"desc"]]
            if (offset) histoMap.offset = offset

            Map subAggsMap = [:]
            Map aggsMap = [DateOuter:[date_histogram:histoMap, aggs:subAggsMap]]


            // order count
            // aggBuilder.subAggregation(AggregationBuilders.cardinality("orderCount").field("orderId"))
            subAggsMap.orderCount = [cardinality:[field:'orderId', precision_threshold:40000]]

            // total sales (itemSaleTotal, no item type restriction)
            // aggBuilder.subAggregation(AggregationBuilders.sum("totalSales").field("itemSaleTotal"))
            subAggsMap.totalSales = [sum:[field:'itemSaleTotal']]

            // product only sums
            // AggregationBuilder itemProductFilter = AggregationBuilders.filter("ItemProduct",
            //         QueryBuilders.wrapperQuery(JsonOutput.toJson([term:[itemTypeEnumId:"ItemProduct"]])))
            // aggBuilder.subAggregation(itemProductFilter)
            Map itemProductSubAggs = [:]
            subAggsMap.ItemProduct = [filter:[term:[itemTypeEnumId:'ItemProduct']], aggs:itemProductSubAggs]

            // total product sales (itemSaleTotal; itemTypeEnumId = ItemProduct)
            // itemProductFilter.subAggregation(AggregationBuilders.sum("productSaleTotal").field("itemSaleTotal"))
            itemProductSubAggs.productSaleTotal = [sum:[field:'itemSaleTotal']]
            // total product shipped (issuedSaleTotal; itemTypeEnumId = ItemProduct)
            //itemProductFilter.subAggregation(AggregationBuilders.sum("productIssuedTotal").field("issuances.issuedSaleTotal"))
            itemProductSubAggs.productIssuedTotal = [sum:[field:'issuances.issuedSaleTotal']]
            // product cost total (issuedCostTotal)
            // itemProductFilter.subAggregation(AggregationBuilders.sum("productCostTotal").field("issuances.issuedCostTotal"))
            itemProductSubAggs.productCostTotal = [sum:[field:'issuances.issuedCostTotal']]
            // product quantity total
            // itemProductFilter.subAggregation(AggregationBuilders.sum("productQuantityTotal").field("orderQuantity"))
            itemProductSubAggs.productQuantityTotal = [sum:[field:'orderQuantity']]

            // total discounts (itemSaleTotal for discount itemTypeEnumId)
            List discountTypes = ['ItemDiscount', 'ItemPromptDiscount', 'ItemCouponCredit', 'ItemPromoDiscount', 'ItemFreeFills', 'ItemSlottingFees', 'ItemAdjAdvertising', 'ItemAdjJointAdv']
            // AggregationBuilder itemDiscountFilter = AggregationBuilders.filter("ItemDiscount",
            //         QueryBuilders.wrapperQuery(JsonOutput.toJson([terms:[itemTypeEnumId:discountTypes]])))
            // itemDiscountFilter.subAggregation(AggregationBuilders.sum("discountTotal").field("itemSaleTotal"))
            // aggBuilder.subAggregation(itemDiscountFilter)
            subAggsMap.ItemDiscount = [filter:[terms:[itemTypeEnumId:discountTypes]], aggs:[discountTotal:[sum:[field:'itemSaleTotal']]]]

            // new customer order count
            // AggregationBuilder newCustFilter = AggregationBuilders.filter("NewCustomer",
            //         QueryBuilders.wrapperQuery(JsonOutput.toJson([term:[isNewCustomer:'Y']])))
            // newCustFilter.subAggregation(AggregationBuilders.cardinality("newCustomerOrderCount").field("orderId"))
            // aggBuilder.subAggregation(newCustFilter)
            subAggsMap.NewCustomer = [filter:[term:[isNewCustomer:'Y']], aggs:[newCustomerOrderCount:[cardinality:[field:'orderId', precision_threshold:40000]]]]

            // do the search
            // SearchResponse sr = ElasticSearchUtil.aggregationSearch(indexName, [documentType], null, queryMap, aggBuilder, ec)
            String orderIdx = org.moqui.impl.context.ElasticFacadeImpl.ddIdToEsIndex((String) documentType)
            Map resultMap = elasticClient.search(orderIdx, [query:queryMap, aggs:aggsMap])

            Map aggregationsMap = (Map) resultMap.aggregations
            // ec.logger.error("aggregationsMap:\n${JsonOutput.prettyPrint(JsonOutput.toJson(aggregationsMap))}")

            salesOrderSummaryList = []
            ordersTotal = [dateKey:"Prior Total"]
            for (Map dateBucket in (List<Map>) aggregationsMap.DateOuter.buckets) {
                Map prodAgg = (Map) dateBucket.ItemProduct
                Map discAgg = (Map) dateBucket.ItemDiscount
                Map newCustAgg = (Map) dateBucket.NewCustomer
                BigDecimal orderCount = dateBucket.orderCount?.value as BigDecimal
                BigDecimal newCustomerOrderCount = newCustAgg.newCustomerOrderCount?.value as BigDecimal
                BigDecimal productSaleTotal = prodAgg.productSaleTotal?.value as BigDecimal
                BigDecimal productIssuedTotal = prodAgg.productIssuedTotal?.value as BigDecimal
                BigDecimal productCostTotal = prodAgg.productCostTotal?.value as BigDecimal
                BigDecimal discountTotal = discAgg.discountTotal?.value as BigDecimal
                Map curLine = [dateKey:dateBucket.key_as_string,
                        orderCount:orderCount, newCustomerOrderCount:newCustomerOrderCount,
                        newCustomerPercent:(orderCount ? (newCustomerOrderCount/orderCount) : 0.0),
                        totalSales:dateBucket.totalSales.value as BigDecimal,
                        productSaleTotal:productSaleTotal, productIssuedTotal:productIssuedTotal, productCostTotal:productCostTotal,
                        productQuantityTotal:prodAgg.productQuantityTotal?.value as BigDecimal,
                        discountTotal:discountTotal, netSales:(productSaleTotal + discountTotal),
                        discountPercent:(productSaleTotal ? (-discountTotal/productSaleTotal) : 0.0),
                        costPercent:(productIssuedTotal ? (productCostTotal/productIssuedTotal) : 0.0),
                        orderCountMa:0.0, newCustomerOrderCountMa:0.0, newCustomerPercentMa:0.0, productQuantityTotalMa:0.0,
                        productSaleTotalMa:0.0, discountPercentMa:0.0, netSalesMa:0.0]
                salesOrderSummaryList.add(curLine)
                // don't include the first (most recent) period in the total and average
                if (salesOrderSummaryList.size() > 1) addBigDecimalsInMap(ordersTotal, curLine)
            }

            // get the this, last, prior periods before reversing list
            ordersThis = salesOrderSummaryList.size() > 0 ? salesOrderSummaryList[0] : null
            ordersLast = salesOrderSummaryList.size() > 1 ? salesOrderSummaryList[1] : null
            ordersPrior = salesOrderSummaryList.size() > 2 ? salesOrderSummaryList[2] : null

            // reverse the list (comes back from ES newest first)
            salesOrderSummaryList.reverse(true)

            // calculate moving averages
            if (maInt > 0 && salesOrderSummaryList.size() > maInt) {
                BigDecimal maBd = new BigDecimal(maInt)
                // NOTE: buckets originally come back newest to oldest so for MA reverse, then reverse after
                List originalList = new ArrayList(salesOrderSummaryList)
                // trim list for maInt so it has only display periods
                salesOrderSummaryList = new ArrayList(originalList.subList(maInt, originalList.size()))
                for (int idx = 0; idx < salesOrderSummaryList.size(); idx++) {
                    Map curLine = (Map) salesOrderSummaryList.get(idx)
                    List lookbackList = originalList.subList(idx, idx + maInt)
                    curLine.orderCountMa = lookbackList*.orderCount.sum() / maBd
                    curLine.newCustomerOrderCountMa = lookbackList*.newCustomerOrderCount.sum() / maBd
                    curLine.newCustomerPercentMa = lookbackList*.newCustomerPercent.sum() / maBd
                    curLine.productQuantityTotalMa = lookbackList*.productQuantityTotal.sum() / maBd
                    curLine.productSaleTotalMa = lookbackList*.productSaleTotal.sum() / maBd
                    curLine.discountPercentMa = lookbackList*.discountPercent.sum() / maBd
                    curLine.netSalesMa = lookbackList*.netSales.sum() / maBd
                }
            }

            ordersTotal.newCustomerPercent = null
            ordersTotal.discountPercent = null
            ordersTotal.costPercent = null

            BigDecimal avgCount = new BigDecimal(salesOrderSummaryList.size())
            ordersAverage = new LinkedHashMap(ordersTotal)
            divideBigDecimalsInMap(ordersAverage, avgCount)
            ordersAverage.dateKey = "Prior Average"
            ordersAverage.newCustomerPercent = (ordersAverage.orderCount ? (ordersAverage.newCustomerOrderCount/ordersAverage.orderCount) : 0.0)
            ordersAverage.discountPercent = (ordersAverage.productSaleTotal ? (-ordersAverage.discountTotal/ordersAverage.productSaleTotal) : 0.0)
            ordersAverage.costPercent = (ordersAverage.productIssuedTotal ? (ordersAverage.productCostTotal/ordersAverage.productIssuedTotal) : 0.0)

            salesOrderSummaryList.add(ordersAverage)
            salesOrderSummaryList.add(ordersTotal)]]></script></actions></service>