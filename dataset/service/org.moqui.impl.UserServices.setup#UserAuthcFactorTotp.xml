<!--Service Location org.moqui.impl.UserServices.setup#UserAuthcFactorTotp--><service verb="setup" noun="UserAuthcFactorTotp"><in-parameters><parameter name="factorId"/><parameter name="userId" required="true"/><parameter name="thruDate"/></in-parameters><out-parameters><parameter name="qrLabel"/><parameter name="qrIssuer"/><parameter name="qrSecret"/><parameter name="qrUri"/><parameter name="dataUri"/><parameter name="needsValidation"/></out-parameters><actions><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount"><field-map field-name="userId" from="userId"/></entity-find-one><if condition="!factorId"><then><service-call name="org.moqui.impl.UserServices.create#UserAuthcFactorTotp" in-map="[userId:userId, thruDate:thruDate]" out-map="[factorId:userFactor.factorId,factorOption:userFactor.factorOption]"/></then><else><entity-find-one entity-name="moqui.security.UserAuthcFactor" value-field="userFactor"><field-map field-name="factorId"/><field-map field-name="userId"/></entity-find-one></else></if><set field="factorOption" from="userFactor.factorOption"/><script><![CDATA[import dev.samstevens.totp.qr.*
                import dev.samstevens.totp.code.HashingAlgorithm
                import dev.samstevens.totp.util.Utils
                QrData data = new QrData.Builder().label(userAccount.username).secret(factorOption).issuer(ec.web.getHostName(false))
                    .algorithm(HashingAlgorithm.SHA1).digits(6).period(30).build()
                QrGenerator generator = new ZxingPngQrGenerator()]]></script><set field="qrLabel" from="data.label"/><set field="qrIssuer" from="data.issuer"/><set field="qrSecret" from="data.secret"/><set field="dataUri" from="Utils.getDataUriForImage(generator.generate(data), generator.getImageMimeType())"/><set field="needsValidation" from="userFactor.needsValidation"/></actions></service>