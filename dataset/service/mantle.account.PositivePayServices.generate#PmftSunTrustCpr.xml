<!--Service Location mantle.account.PositivePayServices.generate#PmftSunTrustCpr--><service verb="generate" noun="PmftSunTrustCpr"><in-parameters><parameter name="paymentMethodFileId" required="true"/><parameter name="bankAccount" type="Map" required="true"/><parameter name="paymentList" type="List" required="true"/><parameter name="thruDate" type="Timestamp" required="true"/><parameter name="fileDate" type="Timestamp" required="true"/><parameter name="entryCount" type="Long" required="true"/><parameter name="debitAmountTotal" type="BigDecimal" required="true"/><parameter name="debitAmountTotalWithCancels" type="BigDecimal" required="true"/><parameter name="checkNumberSum" type="Long" required="true"/></in-parameters><out-parameters><parameter name="fileText"/></out-parameters><actions><if condition="!bankAccount.posPayBankNumber || bankAccount.posPayBankNumber.length() != 3"><return error="true" message="Pos. Pay Bank Number must be set and 3 characters long (for bank account [${bankAccount.paymentMethodId}])"/></if><script><![CDATA[import org.moqui.context.ExecutionContext
                import org.moqui.entity.EntityValue
                ExecutionContext ec = context.ec

                // Handy output checking lines, paste below to line up output
                // 0        10        20        30        40        50        60        70        80        90        100       110       120
                // 123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+

                String accountNumber =  bankAccount.accountNumber
                if (accountNumber.length() > 10) accountNumber = accountNumber.substring(accountNumber.length() - 10, accountNumber.length())

                List<StringBuilder> lines = []

                // Account Batch Header Record
                StringBuilder fileHeader = new StringBuilder(240)
                // 01-03: Record Type Code = '*00'
                fileHeader.append('*00')
                // 04-13: Account Number (10 digits, left 0 padded)
                fileHeader.append(accountNumber.padLeft(10, '0'))
                // 14-23: Serial Number (could use file ID, but seems to want all 0s; 10 digits, left 0 pad)
                fileHeader.append('0'.padLeft(10, '0'))
                // 24-26: Bank Number, assigned by bank (3 digits)
                fileHeader.append(bankAccount.posPayBankNumber)
                // 27-32: Issue (file) date (MMddyy)
                fileHeader.append(ec.l10n.format(fileDate, 'MMddyy'))
                // 33-240: Filler, 208 spaces
                fileHeader.append(" ".padRight(208, ' '))
                lines.add(fileHeader)

                for (Map payment in paymentList) {
                    // Get amount String (11 chars, last 2 are cents)
                    String amountStr = payment.getBigDecimal("amount").movePointRight(2).longValue() as String

                    boolean isVoid = payment.statusId == 'PmntVoid'
                    boolean isCancel = payment.statusId == 'PmntCancelled'

                    String payeeName = ""
                    EntityValue otherParty = payment.toPartyId ? ec.entity.find("mantle.party.PartyDetail").condition("partyId", payment.toPartyId).one() : null
                    if (otherParty) {
                        payeeName = otherParty.firstName ? otherParty.firstName + " " + otherParty.lastName : otherParty.organizationName
                        if (payeeName.length() > 40) payeeName = payeeName.substring(0, 40)
                    }

                    // FUTURE: Stop Item (*22)
                    if (isVoid || isCancel) {
                        // Detail Line - Cancel/Void Item
                        StringBuilder detailLine = new StringBuilder(240)
                        // 01-03: Transaction code (for Cancel/Void Item *26)
                        detailLine.append('*26')
                        // 04-13: Account number (same as header, 10 digits)
                        detailLine.append(accountNumber.padLeft(10, '0'))
                        // 14-23: Check number (10 digits, left 0 padded)
                        detailLine.append(payment.paymentRefNum.padLeft(10, '0'))
                        // 24-29: Transaction Date (MMddyy)
                        detailLine.append(ec.l10n.format(payment.effectiveDate, 'MMddyy'))
                        // 30-240: Filler (211 spaces)
                        detailLine.append("".padRight(211, ' '))

                        lines.add(detailLine)
                    } else {
                        // Detail Line - Issue Item
                        StringBuilder detailLine = new StringBuilder(240)
                        // 01-03: Transaction code (for Issue Item *10)
                        detailLine.append('*10')
                        // 04-13: Account number (same as header, 10 digits)
                        detailLine.append(accountNumber.padLeft(10, '0'))
                        // 14-23: Check number (10 digits, left 0 padded)
                        detailLine.append(payment.paymentRefNum.padLeft(10, '0'))
                        // 24-34: Check amount (11 digits, last 2 are cents, left 0 padded)
                        detailLine.append(amountStr.padLeft(11, '0'))
                        // 35-49: Additional information (15 chars; all spaces)
                        detailLine.append("".padRight(15, ' '))
                        // 50-58: Funding source (no separate funding source, so use 9 1s)
                        detailLine.append("1".padRight(9, '1'))
                        // 59-80: Filler (22 spaces)
                        detailLine.append("".padRight(22, ' '))

                        // Chars 81-160 on the detail record for the Payee Name (first)
                        // 81-83: Transaction code (for Payee Name *61)
                        detailLine.append('*61')
                        // 84-93: Account number (same as header, 10 digits)
                        detailLine.append(accountNumber.padLeft(10, '0'))
                        // 94-103: Check number (10 digits, left 0 padded)
                        detailLine.append(payment.paymentRefNum.padLeft(10, '0'))
                        // 104-114: Check amount (11 digits, last 2 are cents, left 0 padded); for voids enter all 0s
                        detailLine.append(amountStr.padLeft(11, '0'))
                        // 115-154: Payee information (40 chars; pad right with spaces)
                        detailLine.append(payeeName.padRight(40, ' '))
                        // 155-160: Filler (6 spaces)
                        detailLine.append("".padRight(6, ' '))

                        // Chars 161-240 all blanks as there is no second Payee Name (80 spaces)
                        detailLine.append("".padRight(80, ' '))

                        lines.add(detailLine)
                    }
                }

                // Get amount String (11 chars, last 2 are cents)
                String debitAmountTotalStr = debitAmountTotal.movePointRight(2).longValue() as String

                // Account Batch Trailer
                StringBuilder batchTrailer = new StringBuilder(240)
                // 01-03: Transaction Code = '*98'
                batchTrailer.append('*98')
                // 04-13: Account Number (10 digits, left 0 padded)
                batchTrailer.append(accountNumber.padLeft(10, '0'))
                // 14-23: Serial Number (seems want constant '9999999998'; 10 digits, left 0 pad)
                batchTrailer.append('9999999998')
                // 24-25: Number Batches (always 01)
                batchTrailer.append('01')
                // 26-34: Number of Items, including lines, batch header/trailer (9 numbers, left 0 pad)
                batchTrailer.append(((entryCount + 2) as String).padLeft(9, '0'))
                // 35-45: Sum of check amounts (issues only, NOT including cancels; 11 numbers, last 2 are cents, left 0 padded)
                batchTrailer.append(debitAmountTotalStr.padLeft(11, '0'))
                // 46-240: Blanks (195)
                batchTrailer.append(" ".padRight(195, ' '))
                lines.add(batchTrailer)

                // File Trailer
                StringBuilder fileTrailer = new StringBuilder(240)
                // 01-03: Transaction Code = '*99'
                fileTrailer.append('*99')
                // 04-13: Account Number (10 digits, left 0 padded)
                fileTrailer.append(accountNumber.padLeft(10, '0'))
                // 14-23: Serial Number (seems to want constant '9999999999'; 10 digits, left 0 pad)
                fileTrailer.append('9999999999')
                // 24-25: Number Batches (always 01)
                fileTrailer.append('01')
                // 26-34: Number of Items, including lines, batch header/trailer, and file trailer (9 numbers, left 0 pad)
                fileTrailer.append(((entryCount + 3) as String).padLeft(9, '0'))
                // 35-45: Sum of check amounts (issues only, NOT including cancels; 11 numbers, last 2 are cents, left 0 padded)
                fileTrailer.append(debitAmountTotalStr.padLeft(11, '0'))
                // 46-240: Blanks (195)
                fileTrailer.append(" ".padRight(195, ' '))
                lines.add(fileTrailer)

                // NOTE: this is a really weird block size, but part of the spec
                // if not a multiple of 113 lines add lines of all spaces until it is
                while (lines.size() % 113 != 0) {
                    StringBuilder sb = new StringBuilder(240)
                    for (int i = 0; i < 240; i++) sb.append(' ')
                    lines.add(sb)
                }

                // combine the lines
                StringBuilder ftSb = new StringBuilder(241 * lines.size())
                for (StringBuilder line in lines) {
                    if (line.length() != 240) ec.message.addError(ec.resource.expand('Generated line (${line.length()} chars) does not have exactly 240 chars: ${line}',''))
                    // NOTE: not clear in spec but may not use line endings
                    ftSb.append(line).append('\n')
                }
                // get the String value
                fileText = ftSb.toString()]]></script></actions></service>