<!--Service Location mantle.account.InvoiceServices.send#InvoiceStoreEmail--><service verb="send" noun="InvoiceStoreEmail"><in-parameters><parameter name="invoiceId" required="true"/><parameter name="emailTypeEnumId" required="true"/><parameter name="toAddresses"><text-email/></parameter><parameter name="toAddressList" type="List"><parameter name="toAddress"><text-email/></parameter></parameter><parameter name="alsoPrimaryEmails" type="Boolean" default="false"/><parameter name="setFinalizedInvoiceSent" type="Boolean" default="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.account.invoice.Invoice" value-field="invoice"/><service-call name="mantle.account.InvoiceServices.find#InvoiceProductStores" in-map="context" out-map="[productStoreIdSet:context.productStoreIdSet]"/><if condition="!productStoreIdSet"><return/></if><entity-find entity-name="mantle.product.store.ProductStoreEmail" list="storeEmailList"><date-filter/><econdition field-name="productStoreId" operator="in" from="productStoreIdSet"/><econdition field-name="emailTypeEnumId"/></entity-find><if condition="storeEmailList"><set field="toPartyId" from="invoice.toPartyId"/><set field="toAddressesList" from="toAddressList ?: []"/><if condition="toAddresses"><script><![CDATA[toAddressesList.addAll(toAddresses.split(',').collect({ it.trim() }))]]></script></if><if condition="!toAddressesList"><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="[postalAddressList:emailInfo.postalAddressList,telecomNumberList:emailInfo.telecomNumberList,emailAddressList:emailInfo.emailAddressList,webAddressList:emailInfo.webAddressList]" in-map="[partyId:toPartyId, emailContactMechPurposeId:'EmailBilling', alsoIncludePrimaryPurpose:alsoPrimaryEmails]"/><set field="toAddressesList" from="emailInfo.emailAddressList*.emailAddress"/><entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1"><econdition field-name="partyId" from="toPartyId"/></entity-find><if condition="userAccountList"><set field="toUserId" from="userAccountList[0].userId"/></if></if><if condition="!toAddressesList"><return type="warning" message="No email addresses specified or found"/></if><iterate list="storeEmailList" entry="storeEmail"><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"><field-map field-name="productStoreId" from="storeEmail.productStoreId"/></entity-find-one><set field="bodyParameters" from="[invoiceId:invoiceId, orderIdSet:orderIdSet,                             storeDomain:productStore.storeDomain, profileUrlPath:productStore.profileUrlPath,                             headerImagePath:storeEmail.headerImagePath, detailLinkPath:storeEmail.detailLinkPath]"/><if condition="!storeEmail.emailTemplateId"><continue/></if><iterate list="toAddressesList" entry="toAddressesCur"><service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" out-map="[messageId:sendOut.messageId,emailMessageId:sendOut.emailMessageId]" out-map-add-to-existing="false" in-map="[emailTemplateId:storeEmail.emailTemplateId, emailTypeEnumId:emailTypeEnumId,                                     toAddresses:toAddressesCur, bodyParameters:bodyParameters, toUserId:toUserId]"/><if condition="sendOut.emailMessageId"><script><![CDATA[ec.service.sync().name("create#mantle.account.invoice.InvoiceEmailMessage")
                                .parameter("invoiceId", invoiceId).parameter("emailMessageId", sendOut.emailMessageId).disableAuthz().call()
                            if (setFinalizedInvoiceSent && invoice.statusId == 'InvoiceFinalized') {
                                ec.service.sync().name("update#mantle.account.invoice.Invoice")
                                    .parameter("invoiceId", invoiceId).parameter("statusId", "InvoiceSent").disableAuthz().call()
                                // only try to change status once
                                setFinalizedInvoiceSent = false
                            }]]></script></if><message><![CDATA[Email sent to ${toAddressesCur}${sendOut.emailMessageId ? ', message ID ' + sendOut.emailMessageId : ''}]]></message></iterate></iterate></if></actions></service>