<!--Service Location mantle.shipment.CarrierServices.request#ShipmentLabels--><service verb="request" noun="ShipmentLabels"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="shipmentPackageSeqId"><description><![CDATA[If not specified gets labels for all packages]]></description></parameter><parameter name="shipmentRouteSegmentSeqId"><description><![CDATA[Defaults to the first route segment]]></description></parameter><parameter name="shipmentMethodEnumId"><description><![CDATA[Optional, defaults to shipmentMethodEnumId on route segment]]></description></parameter><parameter name="getReturnLabels" type="Boolean" default="false"><description><![CDATA[Get return labels for the shipment INSTEAD of standard outbound labels; populate the return* fields on ShipmentPackageRouteSeg]]></description></parameter></in-parameters><out-parameters/><actions><service-call name="mantle.shipment.CarrierServices.get#ShipmentGatewayDetails" in-map="context" out-map="[shipmentRouteSegmentSeqId:context.shipmentRouteSegmentSeqId,routeSegment:context.routeSegment,shippingGatewayConfigId:context.shippingGatewayConfigId,shippingGatewayConfig:context.shippingGatewayConfig]"/><set field="requestLabelsServiceName" from="shippingGatewayConfig.requestLabelsServiceName"/><if condition="!requestLabelsServiceName"><log level="error" message="No ShippingGatewayConfig with ID ${shippingGatewayConfigId} has no requestLabelsServiceName, not validating address"/><return/></if><service-call name="${requestLabelsServiceName}" out-map="context" in-map="[shipmentId:shipmentId, shipmentRouteSegmentSeqId:shipmentRouteSegmentSeqId,                         shipmentPackageSeqId:shipmentPackageSeqId, shippingGatewayConfigId:shippingGatewayConfigId,                         shipmentMethodEnumId:shipmentMethodEnumId, getReturnLabels:getReturnLabels]"/><entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment"/><if condition="shipment.productStoreId"><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"><field-map field-name="productStoreId" from="shipment.productStoreId"/></entity-find-one></if><if condition="productStore?.markupShipmentShipLabels == 'Y' || ec.user.getPreference('AllStoresMarkupLabelShipment') == 'true'"><entity-find entity-name="mantle.shipment.ShipmentRouteSegment" list="srsList"><econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId" ignore-if-empty="true"/></entity-find><entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="allPackageRouteSegList"><econdition field-name="shipmentId"/><econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/></entity-find><iterate list="srsList" entry="routeSegment"><service-call name="mantle.shipment.CarrierServices.get#ShipLabelMarkup" out-map="[markupAmount:markupOut.markupAmount,markupPercent:markupOut.markupPercent,markupMultiplier:markupOut.markupMultiplier,markedUpAmount:markupOut.markedUpAmount]" out-map-add-to-existing="false" in-map="[productStoreId:productStore.productStoreId, carrierPartyId:routeSegment.carrierPartyId, shipmentMethodEnumId:routeSegment.shipmentMethodEnumId]"/><set field="markupAmount" from="markupOut?.markupAmount ?: 0.0"/><set field="markupMultiplier" from="markupOut?.markupMultiplier ?: 0.0"/><if condition="markupMultiplier != 0.0 || markupAmount != 0.0"><filter-map-list list="allPackageRouteSegList" to-list="packageRouteSegList"><field-map field-name="shipmentRouteSegmentSeqId" from="routeSegment.shipmentRouteSegmentSeqId"/></filter-map-list><iterate list="packageRouteSegList" entry="packageRouteSeg"><if condition="packageRouteSeg.estimatedAmount != null || packageRouteSeg.baseAmount != null"><if condition="packageRouteSeg.estimatedAmount == null"><set field="packageRouteSeg.estimatedAmount" from="packageRouteSeg.baseAmount"/></if><if condition="packageRouteSeg.baseAmount == null"><set field="packageRouteSeg.baseAmount" from="packageRouteSeg.estimatedAmount"/></if><set field="packageRouteSeg.estimatedAmount" from="packageRouteSeg.baseAmount + markupAmount +                                         (markupMultiplier as BigDecimal).multiply(packageRouteSeg.baseAmount).setScale(2, BigDecimal.ROUND_HALF_UP)"/></if><if condition="packageRouteSeg.returnEstimatedAmount != null || packageRouteSeg.returnBaseAmount != null"><if condition="packageRouteSeg.returnEstimatedAmount == null"><set field="packageRouteSeg.returnEstimatedAmount" from="packageRouteSeg.returnBaseAmount"/></if><if condition="packageRouteSeg.returnBaseAmount == null"><set field="packageRouteSeg.returnBaseAmount" from="packageRouteSeg.returnEstimatedAmount"/></if><set field="packageRouteSeg.returnEstimatedAmount" from="packageRouteSeg.returnBaseAmount + markupAmount +                                         (markupMultiplier as BigDecimal).multiply(packageRouteSeg.returnBaseAmount).setScale(2, BigDecimal.ROUND_HALF_UP)"/></if><entity-update value-field="packageRouteSeg"/></iterate></if></iterate></if></actions></service>