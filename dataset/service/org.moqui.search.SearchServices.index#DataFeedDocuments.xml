<!--Service Location org.moqui.search.SearchServices.index#DataFeedDocuments--><service verb="index" noun="DataFeedDocuments"><in-parameters><parameter name="dataFeedId" required="true"/><parameter name="dataDocumentId"/><parameter name="fromUpdateStamp" type="Timestamp"/><parameter name="thruUpdateStamp" type="Timestamp"/><parameter name="batchSize" type="Integer" default="1000"/><parameter name="clusterName" default-value="default"/></in-parameters><out-parameters><parameter name="documentsIndexed" type="Integer"/></out-parameters><actions><set field="startTime" from="System.currentTimeMillis()"/><entity-find-one entity-name="moqui.entity.feed.DataFeed" value-field="df" cache="true"/><if condition="df == null"><return error="true" message="No DataFeed found for ID ${dataFeedId}"/></if><entity-find entity-name="moqui.entity.feed.DataFeedDocument" list="dfDocList" cache="true"><econdition field-name="dataFeedId"/><econdition field-name="dataDocumentId" ignore-if-empty="true"/></entity-find><if condition="!dfDocList"><return error="true" message="No DataDocuments found for DataFeed ID ${dataFeedId}${dataDocumentId ? ' and DataDocument ID ' + dataDocumentId : ''}"/></if><set field="documentsIndexed" from="0"/><script><![CDATA[import org.moqui.context.ExecutionContext
                import java.util.concurrent.Future

                ExecutionContext ec = context.ec
                def elasticClient = ec.factory.elastic.getClient(clusterName)
                if (elasticClient == null) {
                    ec.message.addMessage("No Elastic Client found for cluster name ${clusterName}, not indexing documents", "danger")
                    return
                }
                String feedReceiveServiceName = df.feedReceiveServiceName ?: 'org.moqui.search.SearchServices.index#DataDocuments'

                for (Map dfDoc in dfDocList) {
                    // make sure the index exists
                    Map dataDocument = ec.entity.fastFindOne("moqui.entity.document.DataDocument", true, false, dfDoc.dataDocumentId)
                    if (dataDocument?.indexName) elasticClient.checkCreateDataDocumentIndexes((String) dataDocument.indexName)

                    int docListSize = ec.entity.entityDataDocument.feedDataDocuments(dfDoc.dataDocumentId, null,
                            fromUpdateStamp, thruUpdatedStamp, feedReceiveServiceName, batchSize)
                    documentsIndexed += docListSize
                }]]></script><message><![CDATA[Indexed ${documentsIndexed} documents for feed ${dataFeedId} in ${System.currentTimeMillis() - startTime}ms]]></message></actions></service>