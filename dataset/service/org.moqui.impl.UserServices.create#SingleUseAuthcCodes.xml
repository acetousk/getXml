<!--Service Location org.moqui.impl.UserServices.create#SingleUseAuthcCodes--><service verb="create" noun="SingleUseAuthcCodes"><in-parameters><parameter name="userId" required="true"/><parameter name="fromFactorId" default=""/><parameter name="thruDate" type="Timestamp" default="ec.user.nowTimestamp + 365"/><parameter name="numberOfCodes" type="Integer" default="6"/></in-parameters><out-parameters><parameter name="singleUseCodes" type="List"/></out-parameters><actions><if condition="numberOfCodes > 21"><return error="true" message="Cannot create more than 21 codes at a time"/></if><set field="factorTypeEnumId" value="UafSingleUse"/><set field="fromDate" from="ec.user.nowTimestamp"/><entity-find entity-name="moqui.security.UserAuthcFactor" list="userAuthcFactorList"><date-filter/><econdition field-name="userId"/><econdition field-name="fromFactorId"/><econdition field-name="factorTypeEnumId" value="UafSingleUse"/></entity-find><iterate list="userAuthcFactorList" entry="userAuthcFactor"><service-call name="update#moqui.security.UserAuthcFactor" in-map="[factorId:userAuthcFactor.factorId, thruDate:ec.user.nowTimestamp]"/></iterate><set field="singleUseCodes" from="[]"/><script><![CDATA[for (int i = 0; i < numberOfCodes; i++)
                    singleUseCodes.add(new java.security.SecureRandom().nextInt(99999999).toString().padLeft(8,'0'))]]></script><iterate list="singleUseCodes" entry="code"><set field="factorOption" from="ec.ecfi.getSimpleHash(code, 'SaltySalt')"/><service-call name="create#moqui.security.UserAuthcFactor" in-map="context"/></iterate></actions></service>