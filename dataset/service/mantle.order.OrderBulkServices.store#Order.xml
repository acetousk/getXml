<!--Service Location mantle.order.OrderBulkServices.store#Order--><service verb="store" noun="Order"><in-parameters><parameter name="header" type="Map"><description><![CDATA[Fields from OrderHeader and OrderPart, ie a single-part order.]]></description><parameter name="externalId"><description><![CDATA[May be customer's PO number or a document number maintained
                    in an integration system]]></description></parameter><parameter name="externalRevision"><description><![CDATA[A revision number for the order, to avoid updating to
                    older revisions; updates to existing orders identified by externalId OR otherPartyOrderId]]></description></parameter><parameter name="otherPartyOrderId"><description><![CDATA[The customer's PO number]]></description></parameter><parameter name="placedDate" type="Timestamp"/><parameter name="shipmentMethodEnumId"/><parameter name="estimatedDeliveryDate" type="Timestamp"/><parameter name="shipBeforeDate" type="Timestamp"/><parameter name="estimatedPickUpDate" type="Timestamp"/><parameter name="customerPartyId"><description><![CDATA[If not specified (to avoid having to know internal IDs)
                    uses party with Customer role]]></description></parameter><parameter name="vendorPartyId"><description><![CDATA[If not specified (to avoid having to know internal IDs)
                    uses party with Vendor role]]></description></parameter><parameter name="postalContactMechId"><description><![CDATA[If not specified (to avoid having to know internal
                    IDs) uses address from CustomerShipTo party]]></description></parameter><parameter name="salesChannelEnumId"/><parameter name="systemMessageRemoteId"/></parameter><parameter name="parties" type="List"><parameter name="partyEntry" type="Map"><parameter name="idValue"/><parameter name="partyIdTypeEnumId"/><parameter name="roleTypeId"/><parameter name="organizationName"/><parameter name="address" type="Map"><parameter name="contactMechPurposeId"/><parameter name="address1"/><parameter name="address2"/><parameter name="city"/><parameter name="stateProvinceGeoId"/><parameter name="countryGeoId"/><parameter name="postalCode"/><parameter name="postalCodeExt"/></parameter></parameter></parameter><parameter name="notes" type="List"><parameter name="noteEntry" type="Map"><parameter name="noteText"/></parameter></parameter><parameter name="items" type="List"><parameter name="noteEntry" type="Map"><description><![CDATA[Can include any field from OrderItem entity]]></description><parameter name="productId"/><parameter name="otherPartyProductId"/><parameter name="itemTypeEnumId"/><parameter name="externalItemSeqId"><description><![CDATA[Used to match items for update]]></description></parameter><parameter name="quantity" type="BigDecimal"/><parameter name="unitAmount" type="BigDecimal"/><parameter name="itemDescription"/><parameter name="comments"/></parameter></parameter><parameter name="removeMissingItems" type="Boolean" default="true"/></in-parameters><out-parameters><parameter name="orderId"/><parameter name="orderPartSeqId"/><parameter name="orderRevision" type="Long"/></out-parameters><actions><iterate list="parties" entry="party"><set field="partyId" from="null"/><if condition="party.partyIdTypeEnumId == 'PtidVend'"><entity-find-one entity-name="mantle.party.Party" value-field="foundParty"><field-map field-name="partyId" from="party.idValue"/></entity-find-one><set field="partyId" from="foundParty?.partyId"/></if><if condition="!partyId"><entity-find entity-name="mantle.party.PartyIdentification" list="partyIdentList"><econdition field-name="partyIdTypeEnumId" from="party.partyIdTypeEnumId"/><econdition field-name="idValue" from="party.idValue"/></entity-find><set field="partyId" from="partyIdentList?.getAt(0)?.partyId"/></if><if condition="!partyId"><then><service-call name="mantle.party.PartyServices.create#Organization" out-map="[partyId:createOrgOut.partyId]" in-map="[organizationName:party.organizationName, roleTypeId:roleTypeId]"/><set field="partyId" from="createOrgOut.partyId"/><service-call name="create#mantle.party.PartyIdentification" in-map="[partyId:partyId, partyIdTypeEnumId:party.partyIdTypeEnumId, idValue:party.idValue]"/></then><else><service-call name="mantle.party.PartyServices.ensure#PartyRole" in-map="[partyId:partyId, roleTypeId:party.roleTypeId]"/></else></if><set field="ppaOut" from="null"/><if condition="party.address && partyId"><service-call name="mantle.party.ContactServices.findOrCreate#PartyPostalAddress" out-map="[contactMechId:ppaOut.contactMechId]" in-map="party.address + [partyId:partyId]"/><set field="party.address.contactMechId" from="ppaOut.contactMechId"/></if><set field="party.partyId" from="partyId"/><if condition="party.roleTypeId == 'Customer' && !header.customerPartyId"><set field="header.customerPartyId" from="partyId"/></if><if condition="party.roleTypeId == 'Vendor' && !header.vendorPartyId"><set field="header.vendorPartyId" from="partyId"/></if><if condition="party.roleTypeId == 'CustomerShipTo' && !header.postalContactMechId && ppaOut"><set field="header.postalContactMechId" from="ppaOut.contactMechId"/></if></iterate><if condition="header.externalId || header.otherPartyOrderId"><entity-find entity-name="mantle.order.OrderHeaderAndPart" list="existingOrderList"><econditions combine="or"><econdition field-name="externalId" from="header.externalId" ignore-if-empty="true"/><econdition field-name="otherPartyOrderId" from="header.otherPartyOrderId" ignore-if-empty="true"/></econditions><econdition field-name="customerPartyId" from="header.customerPartyId"/></entity-find><set field="existingOrder" from="existingOrderList ? existingOrderList[0] : null"/><set field="orderId" from="existingOrder?.orderId"/><set field="orderPartSeqId" from="existingOrder?.orderPartSeqId"/></if><iterate list="items" entry="item"><entity-find-one entity-name="mantle.product.Product" value-field="product"><field-map field-name="productId" from="item.productId"/></entity-find-one><if condition="!product"><set field="item.comments" value="Product [${item.productId}] from message does not exist"/><set field="item.productId" from="null"/></if></iterate><set field="isCreate" from="orderId ? false : true"/><if condition="isCreate"><then><service-call name="mantle.order.OrderServices.create#Order" out-map="[orderId:orderOut.orderId,orderPartSeqId:orderOut.orderPartSeqId]" in-map="header"/><set field="orderId" from="orderOut.orderId"/><set field="orderPartSeqId" from="orderOut.orderPartSeqId"/><iterate list="items" entry="item"><set field="item.orderId" from="orderId"/><set field="item.orderPartSeqId" from="orderPartSeqId"/><service-call name="mantle.order.OrderServices.create#OrderItem" in-map="item" out-map="[orderItemSeqId:createItemOut.orderItemSeqId]"/></iterate></then><else><log message="============ ${existingOrder.externalRevision},  ${header.externalRevision}\n${existingOrder}"/><set field="curRevision" from="ec.l10n.parseNumber(existingOrder.externalRevision ?: '1', '')"/><set field="newRevision" from="ec.l10n.parseNumber(header.externalRevision ?: '1', '')"/><if condition="newRevision <= curRevision"><return error="true" message="Newer or same revision (${existingOrder.externalRevision}) order ${orderId} found for customer ID ${header.customerPartyId}, other party order ID ${header.otherPartyOrderId}, external order ID ${header.externalId}; attempted revision ${header.externalRevision}"/></if><if condition="existingOrder.statusId in ['OrderCompleted', 'OrderRejected', 'OrderCancelled']"><entity-find-one entity-name="moqui.basic.StatusItem" value-field="statusItem"><field-map field-name="statusId" from="existingOrder.statusId"/></entity-find-one><return error="true" message="Found order [${orderId}] in status ${statusItem.description}, cannot be updated"/></if><set field="header.orderId" from="orderId"/><set field="header.orderPartSeqId" from="orderPartSeqId"/><service-call name="mantle.order.OrderServices.update#OrderHeader" in-map="header"/><service-call name="mantle.order.OrderServices.update#OrderPart" in-map="header"/><entity-find entity-name="mantle.order.OrderItem" list="orderItemList"><econdition field-name="orderId"/></entity-find><set field="itemSeqIdSeenList" from="[]"/><iterate list="items" entry="item"><set field="item.orderId" from="orderId"/><set field="item.orderPartSeqId" from="orderPartSeqId"/><set field="orderItem" from="orderItemList.find({ it.externalItemSeqId == item.externalItemSeqId })"/><if condition="orderItem"><then><script><![CDATA[itemSeqIdSeenList.add(orderItem.orderItemSeqId)]]></script><set field="item.orderItemSeqId" from="orderItem.orderItemSeqId"/><service-call name="mantle.order.OrderServices.update#OrderItem" in-map="item" out-map="[]"/></then><else><service-call name="mantle.order.OrderServices.create#OrderItem" in-map="item" out-map="[orderItemSeqId:createItemOut.orderItemSeqId]"/></else></if></iterate><set field="itemMissingList" from="orderItemList.findAll({ !(it.orderItemSeqId in itemSeqIdSeenList) })"/><iterate list="itemMissingList" entry="itemMissing"><service-call name="mantle.order.OrderServices.delete#OrderItem" in-map="itemMissing"/></iterate></else></if><iterate list="parties" entry="party"><set field="oppMap" from="[orderId:orderId, orderPartSeqId:orderPartSeqId,                         partyId:party.partyId, roleTypeId:party.roleTypeId]"/><if condition="!isCreate"><entity-find-one entity-name="mantle.order.OrderPartParty" value-field="existingOpp" auto-field-map="oppMap"/></if><if condition="isCreate || !existingOpp"><service-call name="create#mantle.order.OrderPartParty" in-map="oppMap"/></if></iterate><set field="curNoteTime" from="ec.user.nowTimestamp.time"/><iterate list="notes" entry="note"><if condition="!isCreate"><entity-find entity-name="mantle.order.OrderNote" list="existingNoteList"><econdition field-name="orderId"/><econdition field-name="noteText" from="note.noteText"/></entity-find></if><if condition="isCreate || !existingNoteList"><service-call name="create#mantle.order.OrderNote" in-map="[orderId:orderId,                             noteDate:new Timestamp(curNoteTime), noteText:note.noteText]"/><set field="curNoteTime" from="curNoteTime + 1000"/></if></iterate><entity-find-one entity-name="mantle.order.OrderHeader" value-field="afterHeader"/><set field="orderRevision" from="afterHeader.orderRevision"/></actions></service>