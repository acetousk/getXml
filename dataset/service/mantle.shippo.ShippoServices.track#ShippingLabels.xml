<!--Service Location mantle.shippo.ShippoServices.track#ShippingLabels--><service verb="track" noun="ShippingLabels"><in-parameters><parameter name="shipmentId" required="true"/><parameter name="shipmentRouteSegmentSeqId" required="true"/><parameter name="shipmentPackageSeqId"/><parameter name="shippingGatewayConfigId" required="true"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not tracking shipment"/><return/></if><entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList"><econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/><econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/></entity-find><iterate list="packageRouteSegList" entry="packageRouteSeg"><if condition="!packageRouteSeg.gatewayLabelId"><message><![CDATA[Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} has no Shippo label, skipping package]]></message><continue/></if><script><![CDATA[org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.GET)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2018-02-08")
                            .addHeader("Content-Type", "application/json")
                            .retry(1.0F,2)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("transactions").path((String) packageRouteSeg.gatewayLabelId).build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        continue
                    }
                    responseMap = restResponse.jsonObject()]]></script><if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj"><message><![CDATA[(${messageObj.source}:${messageObj.code}) ${messageObj.text}]]></message></iterate></if><if condition="responseMap.tracking_number != packageRouteSeg.trackingCode"><message><![CDATA[Tracking number from Shippo ${responseMap.tracking_number} did not match locally stored number ${packageRouteSeg.trackingCode}, updated local to match]]></message><set field="packageRouteSeg.trackingCode" from="responseMap.tracking_number"/></if><set field="trackingStatus" from="responseMap.tracking_status"/><set field="statusMap" from="null"/><if condition="trackingStatus instanceof Map"><then><set field="statusString" from="trackingStatus.status"/><set field="statusMap" from="trackingStatus"/></then><else><set field="statusString" from="trackingStatus?.toString()"/></else></if><if condition="statusString"><then><set field="trackingStatusEnumId" from="[UNKNOWN:'ShTsUnknown', DELIVERED:'ShTsDelivered',                         TRANSIT:'ShTsTransit', FAILURE:'ShTsFailure', RETURNED:'ShTsReturned'].get(statusString)"/><set field="trackingStatusDate" from="ec.l10n.parseTimestamp(statusMap?.status_date, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/><set field="originalEta" from="packageRouteSeg.trackingOrigEta ?: responseMap.original_eta ?: responseMap.eta"/><service-call name="update#mantle.shipment.ShipmentPackageRouteSeg" in-map="[shipmentId:packageRouteSeg.shipmentId,                             shipmentPackageSeqId:packageRouteSeg.shipmentPackageSeqId, shipmentRouteSegmentSeqId:packageRouteSeg.shipmentRouteSegmentSeqId,                             gatewayMessage:(statusMap?.status_details ?: packageRouteSeg.gatewayMessage),                             trackingStatusEnumId:trackingStatusEnumId, trackingStatusDate:trackingStatusDate,                             trackingEta:responseMap.eta, trackingOrigEta:originalEta]"/><message><![CDATA[Package ${shipmentPackageSeqId} tracking number ${responseMap.tracking_number} current status ${statusString} on ${ec.l10n.format(trackingStatusDate, null)}]]></message></then><else><message><![CDATA[Package ${shipmentPackageSeqId} tracking number ${responseMap.tracking_number} current status unknown (not yet picked up by carrier)]]></message></else></if><iterate list="responseMap.tracking_history" entry="historyMap"><set field="trackingStatusDate" from="ec.l10n.parseTimestamp(historyMap.status_date, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/><message><![CDATA[History: (${historyMap.status}) ${historyMap.status_details} on ${ec.l10n.format(trackingStatusDate, null)}]]></message></iterate></iterate></actions></service>