<!--Service Location coarchy.ReportServices.prepare#EvaluationStoryReport--><service verb="prepare" noun="EvaluationStoryReport"><in-parameters><parameter name="organizationId" required="true"/><parameter name="filterProductIds" type="List"/><parameter name="filterProductEvaluationIds" type="List"/><parameter name="thruDate" type="Timestamp"/></in-parameters><out-parameters><parameter name="processStoryIdSet" type="Set"/><parameter name="outList" type="List"><parameter name="entry" type="Map"><parameter name="processStoryId" type="String"/><parameter name="processStoryName" type="String"/><parameter name="activityList" type="List"/></parameter></parameter></out-parameters><actions><entity-find entity-name="coarchy.product.ProductEvaluationAndProduct" list="productEvaluationList"><econdition field-name="organizationId"/><econdition field-name="statusId" value="PeCompleted"/><econdition field-name="productId" operator="in" from="filterProductIds" ignore-if-empty="true"/><econdition field-name="productEvaluationId" operator="in" from="filterProductEvaluationIds" ignore-if-empty="true"/><econdition field-name="completedDate" operator="less-equals" ignore-if-empty="true"/></entity-find><set field="productEvaluationIds" from="productEvaluationList*.productEvaluationId"/><set field="productIdSet" from="new TreeSet(productEvaluationList*.productId)"/><entity-find entity-name="coarchy.product.ProductEvaluationStory" list="evalStoryList"><econdition field-name="productEvaluationId" operator="in" from="productEvaluationIds"/><econdition field-name="organizationId"/><order-by field-name="processStoryId"/></entity-find><set field="processStoryIdSet" from="new TreeSet(evalStoryList*.processStoryId)"/><entity-find entity-name="coarchy.product.ProductEvaluationActivity" list="evalActivityList"><econdition field-name="productEvaluationId" operator="in" from="productEvaluationIds"/><econdition field-name="processStoryId" operator="in" from="processStoryIdSet"/><econdition field-name="organizationId"/><econdition field-name="excludeFlag" value="N" or-null="true"/><order-by field-name="processStoryId,activityId"/></entity-find><set field="activityIdList" from="new TreeSet(evalActivityList*.activityId)"/><entity-find entity-name="coarchy.product.ProductEvaluationResponse" list="evaluationResponseList"><econdition field-name="organizationId"/><econdition field-name="productEvaluationId" operator="in" from="productEvaluationIds"/><econdition field-name="activityId" operator="in" from="activityIdList"/><econdition field-name="organizationId"/><order-by field-name="evaluationByEnumId"/></entity-find><script><![CDATA[def ensureEndsWith (text, suffix) {
                        return text?.endsWith(suffix) ? text : text + suffix
                    }

                    def formatActivity (activityDetail){
                        def condition = activityDetail.condition?ensureEndsWith(activityDetail.condition.capitalize(), ","):''
                        def actorNames = activityDetail.actorNames?.join(", ")?:''
                        def action = activityDetail.action?ensureEndsWith(activityDetail.action, '.'):''

                        return "${condition}${condition?' ':''}${actorNames}${actorNames?' ':''}${action}"
                    }

                    def reduceActivity (activityDetail, index, prefix='') {
                        def sequence = "${prefix}.${index}"
                        def activityText = formatActivity(activityDetail)

                        def activityResponses = evaluationResponseList.clone().findAll{it.activityId == activityDetail.activityId}
                        def activitiesFlat = [
                                [sequence: sequence, activityId:activityDetail.activityId, activityText: activityText, 
                                activityResponses: activityResponses.collect{it->[evaluationByEnumId:it.evaluationByEnum?.description, 
                                rating:it.rating, implementationStatusEnumId:it.implementationStatusEnum?.description, comments:it.comments, 
                                productName:it.evaluation?.product?.productName, evaluationName:it.evaluation?.evaluationName] }]
                            ];

                        if (activityDetail.detailProcessStoryActivityList){
                            activityDetail.detailProcessStoryActivityList.eachWithIndex{ subActivity, jIndex ->
                                activitiesFlat.addAll(reduceActivity(subActivity, jIndex+1, sequence))
                            }
                        }
                        
                        return activitiesFlat;                   
                    }]]></script><set field="outList" from="[]"/><iterate list="processStoryIdSet" entry="processStoryId"><entity-find-one entity-name="coarchy.ProcessStory" value-field="processStory" cache="true"/><set field="activityList" from="[]"/><service-call name="coarchy.ProductEvaluationServices.find#ProcessStoryActivityList" in-map="[productEvaluationId:productEvaluationIds.join(','), processStoryId:processStory.processStoryId, organizationId:organizationId, onlyIncluded:true,showSubstories:true]" out-map="[processStoryActivityList:activityOut.processStoryActivityList]" out-map-add-to-existing="false"/><script><![CDATA[activityList.addAll(activityOut.processStoryActivityList)]]></script><script><![CDATA[outList.add([
                            processStoryId: processStoryId, 
                            processStoryName: processStory.name, 
                            activityList: (activityList.withIndex().collect{activityDetail,index -> reduceActivity(activityDetail, index+1,processStoryId_index+1)}).flatten(),
                        ])]]></script></iterate></actions></service>