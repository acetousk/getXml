<!--Service Location mantle.order.OrderServices.place#Order--><service verb="place" noun="Order"><in-parameters><parameter name="orderId" required="true"/><parameter name="orderPartSeqId"/><parameter name="placedDate" type="Timestamp" default="ec.user.nowTimestamp"/><parameter name="requireInventory" type="Boolean"><description><![CDATA[If true make sure inventory is available, if false don't check. If null defer to ProductStore.requireInventory setting.]]></description></parameter></in-parameters><out-parameters><parameter name="oldStatusId"/><parameter name="statusChanged" type="Boolean"/></out-parameters><actions><service-call name="mantle.order.OrderServices.update#OrderStatus" out-map="[oldStatusId:context.oldStatusId,statusChanged:context.statusChanged]" in-map="context + [statusId:'OrderPlaced', placedDate:placedDate]"/><if condition="requireInventory == null"><if condition="orderHeader == null"><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/></if><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore" cache="true"><field-map field-name="productStoreId" from="orderHeader.productStoreId"/></entity-find-one><set field="requireInventory" from="productStore?.requireInventory == 'Y'"/></if><if condition="requireInventory"><entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true"><econdition field-name="enumGroupEnumId" value="EngItemsProduct"/></entity-find><set field="productItemTypes" from="productItemTypeEgms*.enumId"/><if condition="orderHeader == null"><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/></if><entity-find entity-name="mantle.order.OrderItem" list="orderItemList"><econdition field-name="orderId"/><econdition field-name="orderPartSeqId" ignore-if-empty="true"/><econdition field-name="productId" operator="is-not-null"/><order-by field-name="productId"/></entity-find><set field="allInventoryAvailable" from="true"/><iterate list="orderItemList" entry="orderItem"><set field="isProductItem" from="productItemTypes.contains(orderItem.itemTypeEnumId) && orderItem.productId"/><if condition="!isProductItem"><continue/></if><entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"><field-map field-name="productId" from="orderItem.productId"/></entity-find-one><if condition="!(product?.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse', 'PtPickAssembly'])"><continue/></if><service-call name="mantle.product.AssetServices.get#AvailableForOrder" out-map="[availableToPromiseTotal:availOut.availableToPromiseTotal]" out-map-add-to-existing="false" in-map="[productId:orderItem.productId, orderId:orderId, orderPartSeqId:orderItem.orderPartSeqId,                                 orderItemSeqId:orderItem.orderItemSeqId, orderHeader:orderHeader]"/><set field="availableToPromiseTotal" from="availOut.availableToPromiseTotal"/><if condition="availableToPromiseTotal < orderItem.quantity"><set field="allInventoryAvailable" from="false"/><if condition="availableToPromiseTotal <= 0.0"><then><message public="true" type="warning"><![CDATA[OrderInventoryNotAvailable]]></message></then><else><message public="true" type="warning"><![CDATA[OrderInventoryInsufficient]]></message></else></if></if></iterate><if condition="!allInventoryAvailable"><return error="true" message="Inventory required but not all available, not placing order ${orderId}"/></if></if><entity-find entity-name="mantle.order.OrderPart" list="orderPartList" for-update="true"><econdition field-name="orderId"/><econdition field-name="orderPartSeqId" ignore-if-empty="true"/></entity-find><set field="customerPartyId" from="orderPartList ? orderPartList[0].customerPartyId : null"/><if condition="!customerPartyId"><return/></if><set field="includeStatuses" from="['OrderPlaced', 'OrderProcessing', 'OrderApproved', 'OrderSent', 'OrderCompleted', 'OrderHold']"/><entity-find-count entity-name="mantle.order.OrderHeaderAndPart" count-field="ordersCount"><econdition field-name="customerPartyId"/><econdition field-name="orderId" operator="not-equals"/><econdition field-name="statusId" operator="in" from="includeStatuses"/></entity-find-count><if condition="ordersCount == 0"><iterate list="orderPartList" entry="orderPart"><set field="orderPart.isNewCustomer" value="Y"/><entity-update value-field="orderPart"/></iterate></if></actions></service>