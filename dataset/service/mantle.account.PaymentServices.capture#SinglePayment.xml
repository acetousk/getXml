<!--Service Location mantle.account.PaymentServices.capture#SinglePayment--><service verb="capture" noun="SinglePayment"><in-parameters><parameter name="paymentId" required="true"/><parameter name="payment" type="EntityValue"/><parameter name="amount" type="BigDecimal"/></in-parameters><out-parameters><parameter name="paymentGatewayResponseId"/><parameter name="paymentGatewayResponse" type="EntityValue"/></out-parameters><actions><if condition="payment == null"><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if><if condition="payment == null"><return message="Payment ${paymentId} not found"/></if><if condition="amount == null"><set field="amount" from="payment.amount"/></if><set field="justDidAuthorize" from="false"/><set field="paymentGatewayConfigId" from="payment.paymentGatewayConfigId"/><if condition="!paymentGatewayConfigId"><service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" out-map="[paymentGatewayResponse:authRespOut.paymentGatewayResponse]" in-map="[paymentId:paymentId]"/><if condition="authRespOut.paymentGatewayResponse != null"><set field="paymentGatewayConfigId" from="authRespOut.paymentGatewayResponse.paymentGatewayConfigId"/></if></if><if condition="!paymentGatewayConfigId && payment.paymentMethodId"><set field="paymentMethod" from="payment.method"/><set field="paymentGatewayConfigId" from="paymentMethod?.paymentGatewayConfigId"/></if><if condition="!paymentGatewayConfigId && payment.paymentInstrumentEnumId == 'PiFinancialAccount'"><set field="paymentGatewayConfigId" value="FinancialAccountLocal"/></if><if condition="!paymentGatewayConfigId"><log message="Not capturing Payment ${paymentId}, no gateway config found"/><return/></if><entity-find-one entity-name="mantle.account.method.PaymentGatewayConfig" value-field="paymentGatewayConfig" cache="true"/><if condition="paymentGatewayConfig == null"><return error="true" message="Not capturing Payment ${paymentId}, could not find PaymentGatewayConfig"/></if><if condition="!paymentGatewayConfig.captureServiceName"><log message="Not capturing Payment ${paymentId}, no captureServiceName in PaymentGatewayConfig ${paymentGatewayConfigId}"/><return/></if><if condition="!payment.paymentGatewayConfigId"><set field="payment.paymentGatewayConfigId" from="paymentGatewayConfigId"/><entity-update value-field="payment"/></if><if condition="payment.statusId == 'PmntPromised'"><service-call name="mantle.account.PaymentServices.authorize#SinglePayment" in-map="[paymentId:paymentId, payment:payment, paymentGatewayConfigId:paymentGatewayConfigId]"/><set field="justDidAuthorize" from="true"/><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></if><if condition="payment.statusId != 'PmntAuthorized'"><return message="Not capturing Payment ${paymentId}, is in ${payment.statusId} and not the Authorized status"/></if><if condition="!payment.paymentRefNum"><if condition="authRespOut?.paymentGatewayResponse == null"><service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" out-map="[paymentGatewayResponse:authRespOut.paymentGatewayResponse]" in-map="[paymentId:paymentId]"/></if><if condition="authRespOut?.paymentGatewayResponse?.referenceNum"><then><set field="payment.paymentRefNum" from="authRespOut.paymentGatewayResponse.referenceNum"/><entity-update value-field="payment"/></then><else><service-call name="mantle.account.PaymentServices.authorize#SinglePayment" out-map="[paymentGatewayResponseId:authOut.paymentGatewayResponseId,paymentGatewayResponse:authOut.paymentGatewayResponse]" in-map="[paymentId:paymentId, payment:payment, paymentGatewayConfigId:paymentGatewayConfigId]"/><set field="justDidAuthorize" from="true"/><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></else></if></if><if condition="!payment.paymentRefNum"><return message="Not capturing Payment ${paymentId}, has no transaction ID (reference number)"/></if><if condition="!justDidAuthorize && paymentGatewayConfig.detailsServiceName"><service-call name="${paymentGatewayConfig.detailsServiceName}" out-map="detailOut" in-map="[paymentId:paymentId, payment:payment, paymentGatewayConfigId:paymentGatewayConfigId]"/><if condition="detailOut.gatewayStatusId == 'PmntPromised'"><then><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntPromised']"/><service-call name="mantle.account.PaymentServices.authorize#SinglePayment" out-map="[paymentGatewayResponseId:authOut.paymentGatewayResponseId,paymentGatewayResponse:authOut.paymentGatewayResponse]" in-map="[paymentId:paymentId, paymentGatewayConfigId:paymentGatewayConfigId]"/><entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/></then><else-if condition="detailOut.gatewayStatusId == 'PmntDelivered'"><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, effectiveDate:(payment.effectiveDate ?: ec.user.nowTimestamp), statusId:'PmntDelivered']"/><return message="Gateway reports Payment ${paymentId} was already captured"/></else-if><else-if condition="detailOut.gatewayStatusId == 'PmntConfirmed'"><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntDelivered',                             effectiveDate:(payment.effectiveDate ?: detailOut.effectiveDate ?: detailOut.settlementDate ?: ec.user.nowTimestamp)]"/><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntConfirmed',                             settlementDate:(detailOut.settlementDate ?: payment.settlementDate)]"/><return message="Gateway reports Payment ${paymentId} was already settled"/></else-if><else-if condition="detailOut.gatewayStatusId == 'PmntDeclined'"><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntDeclined']"/><return message="Gateway reports Payment ${paymentId} was declined"/></else-if><else-if condition="detailOut.gatewayStatusId == 'PmntVoid'"><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntVoid']"/><return message="Gateway reports Payment ${paymentId} has been voided"/></else-if></if></if><service-call name="${paymentGatewayConfig.captureServiceName}" out-map="captOut" in-map="[paymentId:payment.paymentId, amount:amount, paymentGatewayConfigId:paymentGatewayConfig.paymentGatewayConfigId]"/><set field="paymentGatewayResponseId" from="captOut.paymentGatewayResponseId"/><if condition="!paymentGatewayResponseId"><then><log level="warn" message="Call to ${paymentGatewayConfig.captureServiceName} did not return a paymentGatewayResponseId (for Payment ${payment.paymentId})"/><entity-find entity-name="mantle.account.method.PaymentGatewayResponse" list="paymentGatewayResponseList"><econdition field-name="paymentMethodId" from="payment.paymentMethodId"/><order-by field-name="-transactionDate"/></entity-find><if condition="paymentGatewayResponseList && (paymentGatewayResponseList[0].transactionDate.time + 60000) > ec.user.nowTimestamp.time"><set field="paymentGatewayResponse" from="paymentGatewayResponseList[0]"/><set field="paymentGatewayResponseId" from="paymentGatewayResponse.paymentGatewayResponseId"/></if></then><else><entity-find-one entity-name="mantle.account.method.PaymentGatewayResponse" value-field="paymentGatewayResponse"><field-map field-name="paymentGatewayResponseId"/></entity-find-one></else></if><if condition="paymentGatewayResponse == null"><log level="error" message="No PaymentGatewayResponse found after call to ${paymentGatewayConfig.captureServiceName} (for Payment ${payment.paymentId})"/></if><if condition="paymentGatewayResponse?.resultSuccess == 'Y'"><then><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, effectiveDate:(payment.effectiveDate ?: ec.user.nowTimestamp), statusId:'PmntDelivered']"/></then><else-if condition="paymentGatewayResponse?.resultDeclined == 'Y'"><service-call name="update#mantle.account.payment.Payment" in-map="[paymentId:paymentId, statusId:'PmntDeclined']"/></else-if></if></actions></service>