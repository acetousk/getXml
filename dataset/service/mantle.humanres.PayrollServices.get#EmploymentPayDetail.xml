<!--Service Location mantle.humanres.PayrollServices.get#EmploymentPayDetail--><service verb="get" noun="EmploymentPayDetail"><in-parameters><parameter name="partyRelationshipId" entity-name="mantle.humanres.employment.EmploymentPayDetail" field-name="partyRelationshipId"/><parameter name="employment" type="Map"/><parameter name="timePeriodId" required="true"/><parameter name="payDate" type="Date" entity-name="mantle.humanres.employment.EmploymentPayDetail" field-name="payDate"><description><![CDATA[Defaults to TimePeriod.thruDate]]></description></parameter><parameter name="currencyUomId"/></in-parameters><out-parameters><parameter name="payAmount" type="BigDecimal"/><parameter name="currencyUomId"/><parameter name="salaryFlag"/><parameter name="timeEntryList" type="List"/><parameter name="employment" type="Map" required="true"/><parameter name="employee" type="Map" required="true"/><parameter name="homePostalAddress" type="Map"/><parameter name="emplPosition" type="Map" required="true"/><parameter name="timePeriod" type="Map" required="true"/><parameter name="payDate" type="Date" entity-name="mantle.humanres.employment.EmploymentPayDetail" field-name="payDate"/><parameter name="adjustmentList" type="List"><description><![CDATA[List of Maps with out parameters from calculate#Adjustment interface]]></description></parameter><parameter name="netPayAmount" type="BigDecimal"/><parameter name="taxablePayAmount" type="BigDecimal"/><parameter name="socialTaxablePayAmount" type="BigDecimal"/><parameter name="medicalTaxablePayAmount" type="BigDecimal"/><parameter name="disposablePayAmount" type="BigDecimal"/><parameter name="taxableYtdIncome" type="BigDecimal"/><parameter name="socialTaxableYtdIncome" type="BigDecimal"/><parameter name="medicalTaxableYtdIncome" type="BigDecimal"/></out-parameters><actions><service-call name="mantle.humanres.PayrollServices.get#EmploymentPayAmount" in-map="context" out-map="[payAmount:context.payAmount,currencyUomId:context.currencyUomId,salaryFlag:context.salaryFlag,timeEntryList:context.timeEntryList,employment:context.employment,employee:context.employee,emplPosition:context.emplPosition,timePeriod:context.timePeriod,fromTimestamp:context.fromTimestamp,thruTimestamp:context.thruTimestamp]"/><if condition="payDate == null"><set field="payDate" from="timePeriod.thruDate"/></if><set field="payTimestamp" from="ec.l10n.parseTimestamp("${payDate} 12:00:00.000", '')"/><set field="socialMedicalExempt" from="emplPosition.taxExemptEnumId == 'EtxForeignAg'"/><set field="taxablePayAmount" from="payAmount"/><set field="socialTaxablePayAmount" from="socialMedicalExempt ? 0.0 : payAmount"/><set field="medicalTaxablePayAmount" from="socialMedicalExempt ? 0.0 : payAmount"/><set field="taxableYtdIncome" from="0.0"/><set field="socialTaxableYtdIncome" from="0.0"/><set field="medicalTaxableYtdIncome" from="0.0"/><set field="thisYearList" from="ec.user.getPeriodRange('year', '0')"/><set field="yearStart" from="new java.sql.Date(thisYearList[0].time)"/><set field="yearEnd" from="new java.sql.Date(thisYearList[1].time)"/><entity-find entity-name="mantle.humanres.employment.EmploymentPayHistory" list="payHistoryList"><econdition field-name="partyRelationshipId"/><econdition field-name="payDate" operator="greater-equals" from="yearStart"/><econdition field-name="payDate" operator="less" from="yearEnd"/></entity-find><iterate list="payHistoryList" entry="payHistory"><set field="taxableYtdIncome" from="taxableYtdIncome + payHistory.taxablePayAmount"/><set field="socialTaxableYtdIncome" from="socialTaxableYtdIncome + payHistory.socialTaxablePayAmount"/><set field="medicalTaxableYtdIncome" from="medicalTaxableYtdIncome + payHistory.medicalTaxablePayAmount"/></iterate><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="[postalContactMechId:employeeHomeContactInfo.postalContactMechId,postalContactMech:employeeHomeContactInfo.postalContactMech,postalContactMechPurposeId:employeeHomeContactInfo.postalContactMechPurposeId,postalAddress:employeeHomeContactInfo.postalAddress,postalAddressStateGeo:employeeHomeContactInfo.postalAddressStateGeo,postalAddressCountryGeo:employeeHomeContactInfo.postalAddressCountryGeo,postalAddressGeoPoint:employeeHomeContactInfo.postalAddressGeoPoint,postalTrustLevelEnum:employeeHomeContactInfo.postalTrustLevelEnum,telecomContactMechId:employeeHomeContactInfo.telecomContactMechId,telecomContactMech:employeeHomeContactInfo.telecomContactMech,telecomPartyContactMech:employeeHomeContactInfo.telecomPartyContactMech,telecomContactMechPurposeId:employeeHomeContactInfo.telecomContactMechPurposeId,telecomNumber:employeeHomeContactInfo.telecomNumber,faxContactMechId:employeeHomeContactInfo.faxContactMechId,faxContactMech:employeeHomeContactInfo.faxContactMech,faxPartyContactMech:employeeHomeContactInfo.faxPartyContactMech,faxContactMechPurposeId:employeeHomeContactInfo.faxContactMechPurposeId,faxTelecomNumber:employeeHomeContactInfo.faxTelecomNumber,emailContactMechId:employeeHomeContactInfo.emailContactMechId,emailContactMech:employeeHomeContactInfo.emailContactMech,emailPartyContactMech:employeeHomeContactInfo.emailPartyContactMech,emailContactMechPurposeId:employeeHomeContactInfo.emailContactMechPurposeId,emailAddress:employeeHomeContactInfo.emailAddress,webContactMechId:employeeHomeContactInfo.webContactMechId,webContactMech:employeeHomeContactInfo.webContactMech,webPartyContactMech:employeeHomeContactInfo.webPartyContactMech,webContactMechPurposeId:employeeHomeContactInfo.webContactMechPurposeId,webAddress:employeeHomeContactInfo.webAddress,otherContactMechId:employeeHomeContactInfo.otherContactMechId,otherContactMech:employeeHomeContactInfo.otherContactMech,otherContactMechPurposeId:employeeHomeContactInfo.otherContactMechPurposeId,otherInfoString:employeeHomeContactInfo.otherInfoString]" in-map="[partyId:employee.partyId, postalContactMechId:employee.taxHomeContactMechId,                         postalContactMechPurposeId:'PostalHome']"/><set field="homePostalAddress" from="employeeHomeContactInfo.postalAddress"/><set field="adjustmentList" from="[]"/><entity-find entity-name="mantle.humanres.employment.PayrollAdjustment" list="allPayrollAdjustmentList"><econdition field-name="fromDate" operator="less-equals" from="payDate"/><econdition field-name="thruDate" operator="greater-equals" from="payDate" or-null="true"/><econdition field-name="organizationPartyId" from="employment.toPartyId" or-null="true"/><econdition field-name="partyRelationshipId" or-null="true"/><econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId" or-null="true"/></entity-find><set field="exclusiveEmploymentAdjustmentList" from="allPayrollAdjustmentList.findAll(                 { (it.exclusiveByItemType == 'Y') && it.partyRelationshipId != null })"/><set field="exclusiveEmploymentPrAdjItemTypes" from="exclusiveEmploymentAdjustmentList.itemTypeEnumId"/><set field="exclusiveEmployerAdjustmentList" from="allPayrollAdjustmentList.findAll(                 { (it.exclusiveByItemType == 'Y') && it.organizationPartyId != null && it.partyRelationshipId == null })"/><set field="exclusiveEmployerPrAdjItemTypes" from="exclusiveEmployerAdjustmentList.itemTypeEnumId"/><set field="applicablePayrollAdjustmentList" from="[]"/><iterate list="allPayrollAdjustmentList" entry="prAdj"><if condition="prAdj.itemTypeEnumId in exclusiveEmploymentPrAdjItemTypes"><then><if condition="prAdj.partyRelationshipId != null && prAdj.exclusiveByItemType != 'Y'"><continue/></if></then><else-if condition="prAdj.itemTypeEnumId in exclusiveEmployerPrAdjItemTypes"><if condition="prAdj.partyRelationshipId == null"><if condition="prAdj.organizationPartyId != null && prAdj.exclusiveByItemType != 'Y'"><continue/></if></if></else-if></if><script><![CDATA[applicablePayrollAdjustmentList.add(prAdj)]]></script></iterate><set field="phaseEnumIdList" from="['PrphBonus', 'PrphBreak', 'PrphOvertime', 'PrphDeductible', null, 'PrphTax', 'PrphGarnish', 'PrphExpenses']"/><set field="timeEntryRiskClassInfoList" from="[]"/><iterate list="timeEntryList" entry="timeEntry"><service-call name="mantle.work.TimeServices.get#TimeEntryRiskClassInfo" in-map="[timeEntryId:timeEntry.timeEntryId, timeEntry:timeEntry,                                        employment:employment, employee:employee,                                        dftRiskClassEnumId:(timeEntryRiskClassInfoList ? timeEntryRiskClassInfoList[0].dftRiskClassEnumId : null),                                        dftRiskClassOverride:(timeEntryRiskClassInfoList ? timeEntryRiskClassInfoList[0].dftRiskClassOverride : null)]" out-map="[timeEntryId:rcInfo.timeEntryId,timeEntry:rcInfo.timeEntry,facilityId:rcInfo.facilityId,facility:rcInfo.facility,rateTypeEnumId:rcInfo.rateTypeEnumId,workTypeEnumId:rcInfo.workTypeEnumId,riskClassEnumId:rcInfo.riskClassEnumId,stateGeoId:rcInfo.stateGeoId,dftRiskClassEnumId:rcInfo.dftRiskClassEnumId,dftRiskClassOverride:rcInfo.dftRiskClassOverride]" out-map-add-to-existing="false"/><script><![CDATA[timeEntryRiskClassInfoList.add(rcInfo)]]></script></iterate><set field="calcAdjParameters" from="[                     partyRelationshipId:partyRelationshipId, employment:employment, employee:employee,                     timePeriod:timePeriod, timeEntryList:timeEntryList, currencyUomId:currencyUomId,                     timeEntryRiskClassInfoList:timeEntryRiskClassInfoList,                     timePeriodTypeId:timePeriod.timePeriodTypeId,                     payTimestamp:payTimestamp, payAmount:payAmount, homePostalAddress:homePostalAddress]"/><iterate list="phaseEnumIdList" entry="payrollPhaseEnumId"><if condition="payrollPhaseEnumId == 'PrphTax'"><set field="taxableYtdIncome" from="taxableYtdIncome + taxablePayAmount"/><set field="socialTaxableYtdIncome" from="socialTaxableYtdIncome + socialTaxablePayAmount"/><set field="medicalTaxableYtdIncome" from="medicalTaxableYtdIncome + medicalTaxablePayAmount"/></if><set field="phaseAdjList" from="applicablePayrollAdjustmentList.findAll({ it.payrollPhaseEnumId == payrollPhaseEnumId })"/><iterate list="phaseAdjList" entry="payrollAdjustment"><service-call name="mantle.humanres.PayrollServices.calculate#PayrollAdjustment" out-map="[adjustmentApplies:calcOut.adjustmentApplies,isEmployerPaid:calcOut.isEmployerPaid,payrollAdjustmentId:calcOut.payrollAdjustmentId,adjCalcServiceId:calcOut.adjCalcServiceId,itemTypeEnumId:calcOut.itemTypeEnumId,overrideGlAccountId:calcOut.overrideGlAccountId,description:calcOut.description,quantity:calcOut.quantity,quantityUomId:calcOut.quantityUomId,amount:calcOut.amount,adjustmentBasisAmount:calcOut.adjustmentBasisAmount,stdDeductionAmount:calcOut.stdDeductionAmount,allowanceDeductionAmount:calcOut.allowanceDeductionAmount,allowanceExemptionAmount:calcOut.allowanceExemptionAmount,taxAuthorityId:calcOut.taxAuthorityId,payeePartyId:calcOut.payeePartyId,payeeDueDays:calcOut.payeeDueDays,payeeReference:calcOut.payeeReference,garnishDisposablePercent:calcOut.garnishDisposablePercent,garnishPriority:calcOut.garnishPriority,deductFromDisposable:calcOut.deductFromDisposable]" out-map-add-to-existing="false" in-map="[payrollAdjustmentId:payrollAdjustment.payrollAdjustmentId, payrollAdjustment:payrollAdjustment,                                 payrollPhaseEnumId:payrollPhaseEnumId, taxablePayAmount:taxablePayAmount,                                 socialTaxablePayAmount:socialTaxablePayAmount, medicalTaxablePayAmount:medicalTaxablePayAmount,                                 taxableYtdIncome:taxableYtdIncome, socialTaxableYtdIncome:socialTaxableYtdIncome,                                 medicalTaxableYtdIncome:medicalTaxableYtdIncome, priorAdjustmentList:adjustmentList] + calcAdjParameters"/><if condition="!calcOut.adjustmentApplies"><continue/></if><script><![CDATA[adjustmentList.add(calcOut)]]></script><if condition="!calcOut.quantity"><set field="calcOut.quantity" from="1.0"/></if><set field="amountTotal" from="calcOut.quantity * calcOut.amount"/><if condition="payrollPhaseEnumId == 'PrphBonus' && payrollAdjustment.isEmployerPaid == 'Y'"><set field="payAmount" from="payAmount + amountTotal"/><set field="calcAdjParameters.payAmount" from="payAmount"/></if><if condition="payrollAdjustment.isTaxable == 'Y' && payrollAdjustment.isEmployerPaid != 'Y'"><set field="taxablePayAmount" from="taxablePayAmount + amountTotal"/></if><if condition="payrollAdjustment.isSocialTaxable == 'Y' && payrollAdjustment.isEmployerPaid != 'Y'"><set field="socialTaxablePayAmount" from="socialTaxablePayAmount + amountTotal"/></if><if condition="payrollAdjustment.isMedicalTaxable == 'Y' && payrollAdjustment.isEmployerPaid != 'Y'"><set field="medicalTaxablePayAmount" from="medicalTaxablePayAmount + amountTotal"/></if></iterate><entity-find entity-name="mantle.humanres.employment.PayrollAdjCalcService" list="adjCalcServiceList" cache="true"><econdition field-name="organizationPartyId" from="employment.toPartyId" or-null="true"/><econdition field-name="payrollPhaseEnumId"/><order-by field-name="sequenceNum"/></entity-find><script><![CDATA[for (adjCalcService in adjCalcServiceList) { try {
                    Map parmMap = new HashMap([adjCalcServiceId:adjCalcService.adjCalcServiceId,
                            description:adjCalcService.description, payrollPhaseEnumId:payrollPhaseEnumId,
                            taxablePayAmount:taxablePayAmount, socialTaxablePayAmount:socialTaxablePayAmount,
                            medicalTaxablePayAmount:medicalTaxablePayAmount, taxableYtdIncome:taxableYtdIncome,
                            socialTaxableYtdIncome:socialTaxableYtdIncome, medicalTaxableYtdIncome:medicalTaxableYtdIncome,
                            priorAdjustmentList:adjustmentList])
                    parmMap.putAll(calcAdjParameters)
                    List adjParameterList = adjCalcService.parameters
                    for (adjParameter in adjParameterList) parmMap.put(adjParameter.parameterName, adjParameter.parameterValue)

                    Map serviceRegister = adjCalcService.serviceRegister
                    Map result = ec.service.sync().name(serviceRegister.serviceName).parameters(parmMap).disableAuthz().call()
                    if (!ec.message.hasError()) ec.context.putAll(result)
                } catch (Throwable t) {
                    ec.logger.log(300, "Error calling payroll adjustment calc service ${adjCalcService.adjCalcServiceId}", t)
                } }]]></script></iterate><set field="disposablePayAmount" from="payAmount"/><iterate list="adjustmentList" entry="adjustment"><if condition="adjustment.deductFromDisposable == 'Y' && adjustment.isEmployerPaid != 'Y'"><set field="disposablePayAmount" from="disposablePayAmount + adjustment.amount"/></if></iterate><entity-find entity-name="mantle.humanres.employment.PayrollGarnishMinWage" list="garnishMinWageList"><date-filter/><econdition field-name="stateOrCountryGeoId" from="homePostalAddress.stateProvinceGeoId"/><econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/></entity-find><if condition="!garnishMinWageList"><entity-find entity-name="mantle.humanres.employment.PayrollGarnishMinWage" list="garnishMinWageList"><date-filter/><econdition field-name="stateOrCountryGeoId" from="homePostalAddress.countryGeoId"/><econdition field-name="timePeriodTypeId" from="timePeriod.timePeriodTypeId"/></entity-find></if><if condition="garnishMinWageList"><set field="garnishMinWage" from="garnishMinWageList[0]"/></if><set field="disposableRemaining" from="disposablePayAmount"/><order-map-list list="adjustmentList"><order-by field-name="garnishPriority"/></order-map-list><iterate list="adjustmentList" entry="adjustment"><if condition="adjustment.payrollPhaseEnumId != 'PrphGarnish'"><continue/></if><if condition="adjustment.garnishDisposablePercent"><then><set field="garnishDisposableRatio" from="adjustment.garnishDisposablePercent / 100"/></then><else><set field="garnishDisposableRatio" from="0.25"/></else></if><set field="deductionAmount" from="-adjustment.amount"/><if condition="adjustment.garnishMinWageApplies == 'Y' && garnishMinWage"><then><if condition="disposableRemaining <= garnishMinWage.rangeLow"><then/><else-if condition="disposableRemaining > garnishMinWage.rangeLow && disposableRemaining < garnishMinWage.rangeHigh"><set field="deductionAmount" from="disposableRemaining - garnishMinWage.rangeLow"/></else-if><else><set field="maxDedAmount" from="disposablePayAmount * garnishDisposableRatio"/><set field="deductionAmount" from="deductionAmount > maxDedAmount ? maxDedAmount : deductionAmount"/></else></if></then><else><set field="maxDedAmount" from="disposablePayAmount * garnishDisposableRatio"/><set field="deductionAmount" from="deductionAmount > maxDedAmount ? maxDedAmount : deductionAmount"/></else></if><set field="deductionAmount" from="ec.l10n.roundCurrency(deductionAmount, currencyUomId, false, BigDecimal.ROUND_HALF_DOWN)"/><set field="adjustment.amount" from="-deductionAmount"/><set field="disposableRemaining" from="disposableRemaining - deductionAmount"/></iterate><set field="netPayAmount" from="payAmount"/><iterate list="adjustmentList" entry="adjustment"><if condition="adjustment.isEmployerPaid != 'Y'"><set field="netPayAmount" from="netPayAmount + adjustment.amount"/></if></iterate></actions></service>