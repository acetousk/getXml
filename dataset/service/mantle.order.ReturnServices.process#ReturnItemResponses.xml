<!--Service Location mantle.order.ReturnServices.process#ReturnItemResponses--><service verb="process" noun="ReturnItemResponses"><in-parameters><parameter name="returnId" required="true"/><parameter name="returnItemSeqId"><description><![CDATA[If not specified try processing all items (most common)]]></description></parameter></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/><set field="responseDate" from="ec.user.nowTimestamp"/><entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal"><field-map field-name="partyId" from="returnHeader.customerPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one><if condition="customerOrgInternal"><return message="Cannot process return responses for supplier purchase return"/></if><entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList" for-update="true"><econdition field-name="returnId"/><econdition field-name="returnItemSeqId" ignore-if-empty="true"/><order-by field-name="returnItemSeqId"/></entity-find><set field="originalReplacementOrderIdSet" from="new HashSet(returnItemList*.replacementOrderId)"/><script><![CDATA[originalReplacementOrderIdSet.remove(null)]]></script><set field="creditItemList" from="[]"/><set field="refundItemList" from="[]"/><set field="replaceItemList" from="[]"/><set field="remainingAmountBySeqId" from="[:]"/><set field="returnInvoiceId" from="null"/><iterate list="returnItemList" entry="returnItem"><if condition="returnItem.responseDate != null"><continue/></if><set field="validStatus" from="returnItem.statusId in ['ReturnReceived', 'ReturnCompleted'] ||                     ((returnItem.responseImmediate == 'Y' || returnItem.returnResponseEnumId == 'RrspReplace') && returnItem.statusId in ['ReturnApproved', 'ReturnShipped'])"/><if condition="!validStatus"><continue/></if><if condition="returnItem.returnResponseEnumId in ['RrspCredit', 'RrspRefund']"><entity-find-related-one value-field="returnItem" relationship-name="orderItem" to-value-field="orderItem"/><set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity ?: 0.0"/><set field="itemAmount" from="returnItem.returnPrice ?: orderItem?.unitAmount ?: 0.0"/><set field="amountRemaining" from="(returnItem.responseAmount ?: (itemQuantity * itemAmount)).setScale(2, BigDecimal.ROUND_HALF_UP)"/><if condition="!amountRemaining"><message><![CDATA[Return Item ${returnId}:${returnItem.returnItemSeqId} has no amount, not processing credit response]]></message><script><![CDATA[remainingAmountBySeqId.put(returnItem.returnItemSeqId, 0.0)]]></script><continue/></if><script><![CDATA[remainingAmountBySeqId.put(returnItem.returnItemSeqId, amountRemaining)]]></script><if condition="!returnInvoiceId"><service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="[invoiceId:returnInvoiceOut.invoiceId]" out-map-add-to-existing="false" in-map="[fromPartyId:returnHeader.customerPartyId, toPartyId:returnHeader.vendorPartyId,                                     invoiceTypeEnumId:'InvoiceReturn', invoiceDate:responseDate, currencyUomId:returnHeader.currencyUomId]"/><set field="returnInvoiceId" from="returnInvoiceOut.invoiceId"/></if><service-call name="mantle.account.InvoiceServices.create#InvoiceItem" out-map="[invoiceItemSeqId:retInvItemOut.invoiceItemSeqId]" out-map-add-to-existing="false" in-map="[invoiceId:returnInvoiceId, itemTypeEnumId:returnItem.itemTypeEnumId, description:returnItem.description,                                 quantity:itemQuantity, amount:itemAmount, productId:returnItem.productId]"/><service-call name="create#mantle.order.return.ReturnItemBilling" in-map="[returnId:returnId,                             returnItemSeqId:returnItem.returnItemSeqId, invoiceId:returnInvoiceId,                             invoiceItemSeqId:retInvItemOut.invoiceItemSeqId, quantity:itemQuantity, amount:itemAmount]"/></if><if condition="returnItem.returnResponseEnumId == 'RrspCredit'"><then><script><![CDATA[creditItemList.add(returnItem)]]></script></then><else-if condition="returnItem.returnResponseEnumId == 'RrspRefund'"><script><![CDATA[refundItemList.add(returnItem)]]></script></else-if><else-if condition="returnItem.returnResponseEnumId == 'RrspReplace'"><script><![CDATA[replaceItemList.add(returnItem)]]></script></else-if></if></iterate><if condition="creditItemList"><set field="creditTotal" from="0.0"/><set field="faItemList" from="[]"/><iterate list="creditItemList" entry="returnItem"><set field="itemTotal" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/><if condition="itemTotal == 0.0"><continue/></if><set field="creditTotal" from="creditTotal + itemTotal"/><script><![CDATA[faItemList.add(returnItem)]]></script><set field="returnItem.responseAmount" from="itemTotal"/><set field="returnItem.responseDate" from="responseDate"/></iterate><if condition="creditTotal"><set field="finAccountId" from="returnHeader.finAccountId"/><if condition="!finAccountId"><service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount" in-map="[finAccountTypeId:'CustomerCredit', ownerPartyId:returnHeader.customerPartyId,                                 organizationPartyId:returnHeader.vendorPartyId]" out-map="[finAccountId:context.finAccountId]"/></if><service-call name="mantle.account.PaymentServices.create#Payment" out-map="[paymentId:faPaymentOut.paymentId]" out-map-add-to-existing="false" in-map="[paymentTypeEnumId:'PtInvoicePayment', statusId:'PmntAuthorized',                                 paymentInstrumentEnumId:'PiFinancialAccount', finAccountId:finAccountId, effectiveDate:responseDate,                                 fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,                                 amount:creditTotal, amountUomId:returnHeader.currencyUomId, forInvoiceId:returnInvoiceId]"/><service-call name="mantle.account.FinancialAccountServices.checkCreate#PaymentTrans" out-map="[finAccountTransId:faTxOut.finAccountTransId]" out-map-add-to-existing="false" in-map="[paymentId:faPaymentOut.paymentId, reasonEnumId:'FatrCsCredit']"/><iterate list="faItemList" entry="returnItem"><set field="returnItem.finAccountTransId" from="faTxOut.finAccountTransId"/><set field="returnItem.refundPaymentId" from="faPaymentOut.paymentId"/><entity-update value-field="returnItem"/><if condition="returnItem.statusId == 'ReturnReceived'"><service-call name="mantle.order.ReturnServices.complete#ReturnItem" in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if></iterate></if></if><if condition="refundItemList"><set field="ccEarliestDate" from="ec.user.nowTimestamp - 115"/><set field="paymentTotal" from="0.0"/><set field="paymentItemList" from="[]"/><set field="returnItemByOrderPartId" from="[:]"/><iterate list="refundItemList" entry="returnItem"><set field="itemTotal" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/><if condition="itemTotal == 0.0"><continue/></if><if condition="returnHeader.useSingleRefundPayment != 'Y'"/><set field="paymentTotal" from="paymentTotal + itemTotal"/><script><![CDATA[paymentItemList.add(returnItem)]]></script><set field="returnItem.responseAmount" from="itemTotal"/><set field="returnItem.responseDate" from="responseDate"/></iterate><if condition="paymentTotal"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList"><date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/><econdition field-name="purposeEnumId" value="PmpReturnRefund"/><order-by field-name="-fromDate"/></entity-find><if condition="!paymentMethodList"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList"><date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/><econdition field-name="purposeEnumId" value="PmpGeneral"/><order-by field-name="-fromDate"/></entity-find></if><if condition="paymentMethodList"><set field="paymentMethodId" from="paymentMethodList[0].paymentMethodId"/></if><service-call name="mantle.account.PaymentServices.create#Payment" out-map="[paymentId:refundPmntOut.paymentId]" out-map-add-to-existing="false" in-map="[paymentTypeEnumId:'PtRefund', statusId:'PmntPromised',                             fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,                             paymentMethodId:paymentMethodId, toPaymentMethodId:returnHeader.paymentMethodId,                             amount:paymentTotal, amountUomId:returnHeader.currencyUomId, forInvoiceId:returnInvoiceId]"/><iterate list="paymentItemList" entry="returnItem"><set field="returnItem.refundPaymentId" from="refundPmntOut.paymentId"/><entity-update value-field="returnItem"/><if condition="returnItem.statusId == 'ReturnReceived'"><service-call name="mantle.order.ReturnServices.complete#ReturnItem" in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if></iterate></if></if><if condition="replaceItemList"><set field="approvedItemSet" from="new HashSet()"/><set field="placedItemSet" from="new HashSet()"/><iterate list="replaceItemList" entry="replaceItem"><if condition="replaceItem.responseImmediate == 'Y' || replaceItem.statusId in ['ReturnReceived', 'ReturnCompleted']"><then><script><![CDATA[approvedItemSet.add(replaceItem.returnItemSeqId)]]></script></then><else><script><![CDATA[placedItemSet.add(replaceItem.returnItemSeqId)]]></script></else></if></iterate><if condition="approvedItemSet"><service-call name="mantle.order.OrderServices.create#Order" out-map="[orderId:approvedOrderOut.orderId,orderPartSeqId:approvedOrderOut.orderPartSeqId]" in-map="[vendorPartyId:returnHeader.vendorPartyId, customerPartyId:returnHeader.customerPartyId]"/></if><if condition="placedItemSet"><service-call name="mantle.order.OrderServices.create#Order" out-map="[orderId:placedOrderOut.orderId,orderPartSeqId:placedOrderOut.orderPartSeqId]" in-map="[vendorPartyId:returnHeader.vendorPartyId, customerPartyId:returnHeader.customerPartyId]"/></if><iterate list="replaceItemList" entry="returnItem"><set field="replaceOrderId" from="approvedItemSet.contains(returnItem.returnItemSeqId) ? approvedOrderOut.orderId : placedOrderOut.orderId"/><set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity"/><service-call name="mantle.order.OrderServices.add#OrderProductQuantity" in-map="[orderId:replaceOrderId, productId:(returnItem.replacementProductId ?: returnItem.productId),                                 quantity:itemQuantity, unitAmount:0.0]"/><set field="returnItem.replacementOrderId" from="replaceOrderId"/><set field="returnItem.responseDate" from="responseDate"/><entity-update value-field="returnItem"/><if condition="returnItem.statusId == 'ReturnReceived'"><service-call name="mantle.order.ReturnServices.complete#ReturnItem" in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if></iterate><if condition="approvedOrderOut"><service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo" in-map="[orderId:approvedOrderOut.orderId, shippingPostalContactMechId:returnHeader.postalContactMechId,                             shippingTelecomContactMechId:returnHeader.telecomContactMechId,                             shippingFacilityId:returnHeader.facilityId, carrierPartyId:returnHeader.carrierPartyId,                             shipmentMethodEnumId:returnHeader.shipmentMethodEnumId]"/><service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:approvedOrderOut.orderId]"/><service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:approvedOrderOut.orderId]"/></if><if condition="placedOrderOut"><service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo" in-map="[orderId:placedOrderOut.orderId, shippingPostalContactMechId:returnHeader.postalContactMechId,                             shippingTelecomContactMechId:returnHeader.telecomContactMechId,                             shippingFacilityId:returnHeader.facilityId, carrierPartyId:returnHeader.carrierPartyId,                             shipmentMethodEnumId:returnHeader.shipmentMethodEnumId]"/><service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:placedOrderOut.orderId]"/></if></if><iterate list="originalReplacementOrderIdSet" entry="originalReplacementOrderId"><entity-find-one entity-name="mantle.order.OrderHeader" value-field="replaceOrderHeader"><field-map field-name="orderId" from="originalReplacementOrderId"/></entity-find-one><if condition="replaceOrderHeader == null"><log level="error" message="In process responses for return ${returnId} could not find replacement OrderHeader ${originalReplacementOrderId}"/><continue/></if><if condition="replaceOrderHeader.statusId == 'OrderPlaced'"><set field="curOrderReturnItemList" from="returnItemList.findAll({ it.replacementOrderId == originalReplacementOrderId })"/><set field="approveOrder" from="true"/><iterate list="curOrderReturnItemList" entry="curOrderReturnItem"><if condition="!(curOrderReturnItem.statusId in ['ReturnReceived', 'ReturnCompleted'])"><set field="approveOrder" from="false"/><break/></if></iterate><if condition="approveOrder"><service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:originalReplacementOrderId]"/></if></if></iterate><if condition="returnInvoiceId"><service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:returnInvoiceId, statusId:'InvoiceApproved']"/></if></actions></service>