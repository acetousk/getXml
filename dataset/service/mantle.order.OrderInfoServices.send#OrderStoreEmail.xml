<!--Service Location mantle.order.OrderInfoServices.send#OrderStoreEmail--><service verb="send" noun="OrderStoreEmail"><in-parameters><parameter name="orderId" required="true"/><parameter name="emailTypeEnumId" required="true"/><parameter name="toAddresses"><text-email/></parameter><parameter name="forceByType" type="Boolean" default="false"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/><if condition="orderHeader == null"><return/></if><set field="productStoreId" from="orderHeader.productStoreId"/><if condition="!productStoreId"><return/></if><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"><field-map field-name="productStoreId"/></entity-find-one><entity-find entity-name="mantle.product.store.ProductStoreEmail" list="storeEmailList"><date-filter/><econdition field-name="productStoreId"/><econdition field-name="emailTypeEnumId"/></entity-find><if condition="storeEmailList"><set field="orderPartList" from="orderHeader.parts"/><set field="customerPartyId" from="orderPartList[0].customerPartyId"/><if condition="!toAddresses && customerPartyId"><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="[postalContactMechId:emailInfo.postalContactMechId,postalContactMech:emailInfo.postalContactMech,postalContactMechPurposeId:emailInfo.postalContactMechPurposeId,postalAddress:emailInfo.postalAddress,postalAddressStateGeo:emailInfo.postalAddressStateGeo,postalAddressCountryGeo:emailInfo.postalAddressCountryGeo,postalAddressGeoPoint:emailInfo.postalAddressGeoPoint,postalTrustLevelEnum:emailInfo.postalTrustLevelEnum,telecomContactMechId:emailInfo.telecomContactMechId,telecomContactMech:emailInfo.telecomContactMech,telecomPartyContactMech:emailInfo.telecomPartyContactMech,telecomContactMechPurposeId:emailInfo.telecomContactMechPurposeId,telecomNumber:emailInfo.telecomNumber,faxContactMechId:emailInfo.faxContactMechId,faxContactMech:emailInfo.faxContactMech,faxPartyContactMech:emailInfo.faxPartyContactMech,faxContactMechPurposeId:emailInfo.faxContactMechPurposeId,faxTelecomNumber:emailInfo.faxTelecomNumber,emailContactMechId:emailInfo.emailContactMechId,emailContactMech:emailInfo.emailContactMech,emailPartyContactMech:emailInfo.emailPartyContactMech,emailContactMechPurposeId:emailInfo.emailContactMechPurposeId,emailAddress:emailInfo.emailAddress,webContactMechId:emailInfo.webContactMechId,webContactMech:emailInfo.webContactMech,webPartyContactMech:emailInfo.webPartyContactMech,webContactMechPurposeId:emailInfo.webContactMechPurposeId,webAddress:emailInfo.webAddress,otherContactMechId:emailInfo.otherContactMechId,otherContactMech:emailInfo.otherContactMech,otherContactMechPurposeId:emailInfo.otherContactMechPurposeId,otherInfoString:emailInfo.otherInfoString]" in-map="[partyId:customerPartyId, emailContactMechPurposeId:'EmailOrder', defaultToPrimaryPurpose:true]"/><set field="toAddresses" from="emailInfo.emailAddress"/><entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="1"><econdition field-name="partyId" from="customerPartyId"/></entity-find><if condition="userAccountList"><set field="toUserId" from="userAccountList[0].userId"/></if></if><if condition="!toAddresses"><return message="Not sending email for order ${orderId}, no to address specified or found for customer ${customerPartyId}"/></if><iterate list="storeEmailList" entry="storeEmail"><if condition="!storeEmail.emailTemplateId"><continue/></if><if condition="!forceByType"><entity-find entity-name="mantle.order.OrderEmailMessageDetail" list="existingMessages"><econdition field-name="orderId"/><econdition field-name="emailTypeEnumId"/><econdition field-name="statusId" operator="in" value="ES_SENT,ES_RECEIVED,ES_VIEWED"/><select-field field-name="emailMessageId"/></entity-find><if condition="existingMessages"><message type="warning"><![CDATA[Not sending ${emailTypeEnumId} email for order ${orderId}, found messages: ${existingMessages*.emailMessageId}]]></message><continue/></if></if><set field="bccAddresses" from="orderHeader.salesChannelEnumId in ['ScWeb', 'ScWebExternal'] ? storeEmail.webOrderBcc : null"/><set field="bodyParameters" from="[orderId:orderId, storeDomain:productStore.storeDomain,                         profileUrlPath:productStore.profileUrlPath, headerImagePath:storeEmail.headerImagePath,                         detailLinkPath:storeEmail.detailLinkPath]"/><service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" out-map="[messageId:sendOut.messageId,emailMessageId:sendOut.emailMessageId]" out-map-add-to-existing="false" in-map="[emailTemplateId:storeEmail.emailTemplateId, emailTypeEnumId:emailTypeEnumId, toAddresses:toAddresses,                                 bccAddresses:bccAddresses, bodyParameters:bodyParameters, toUserId:toUserId]"/><script><![CDATA[if (sendOut.emailMessageId) { ec.service.sync().name("create#mantle.order.OrderEmailMessage").parameter("orderId", orderId)
                        .parameter("emailMessageId", sendOut.emailMessageId).parameter("orderRevision", orderHeader.orderRevision).disableAuthz().call() }]]></script><message><![CDATA[Email sent to ${toAddresses}${sendOut.emailMessageId ? ', message ID ' + sendOut.emailMessageId : ''}]]></message></iterate></if></actions></service>