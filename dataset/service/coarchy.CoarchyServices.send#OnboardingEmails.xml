<!--Service Location coarchy.CoarchyServices.send#OnboardingEmails--><service verb="send" noun="OnboardingEmails"><in-parameters><parameter name="currentTimestamp" default="ec.user.nowTimestamp" type="Timestamp" required="true"/></in-parameters><out-parameters><parameter name="emailsSentList" type="List"/><parameter name="onboardingPartyIdList" type="List"/></out-parameters><actions><set field="emailsSentList" from="[]"/><set field="baseLinkUrl" from="!'production'.equals(System.getProperty('instance_purpose')) ? 'http://localhost:8080' : 'https://coarchy.com'"/><entity-find entity-name="mantle.marketing.contact.ContactListParty" list="onboardingPartyList"><econdition field-name="contactListId" value="CoarchyOnboarding"/><econdition field-name="statusId" value="CLPT_IN_USE"/><date-filter/></entity-find><set field="onboardingPartyIdList" from="onboardingPartyList*.partyId"/><set field="twoDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(                     (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(2).toInstant().toEpochMilli())" type="Timestamp"/><set field="fourDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(                     (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(4).toInstant().toEpochMilli())" type="Timestamp"/><set field="sixDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(                     (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(6).toInstant().toEpochMilli())" type="Timestamp"/><set field="eightDaysAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(                     (long) currentTimestamp.time), ZoneId.systemDefault()).minusDays(8).toInstant().toEpochMilli())" type="Timestamp"/><set field="twoWeeksAgo" from="new Timestamp(ZonedDateTime.ofInstant(Instant.ofEpochMilli(                     (long) currentTimestamp.time), ZoneId.systemDefault()).minusWeeks(2).toInstant().toEpochMilli())" type="Timestamp"/><iterate list="onboardingPartyList" entry="listParty"><if condition="listParty.partyId==null"><continue/></if><set field="createOrganizationEmailTemplateId" value="CREATE_ORGANIZATION"/><set field="inviteUserEmailTemplateId" value="INVITE_USER"/><set field="createProcessStoryEmailTemplateId" value="CREATE_PROCESS_STORY"/><set field="createActorEmailTemplateId" value="CREATE_ACTOR"/><entity-find entity-name="mantle.marketing.contact.ContactListCommStatus" list="commStatusList"><econdition field-name="partyId" from="listParty.partyId"/><econdition field-name="contactListId" from="listParty.contactListId"/></entity-find><set field="createOrganizationAlreadyBeenSent" from="false"/><set field="inviteUserAlreadyBeenSent" from="false"/><set field="createProcessStoryAlreadyBeenSent" from="false"/><set field="createActorAlreadyBeenSent" from="false"/><iterate list="commStatusList" entry="commStatus"><entity-find-one entity-name="mantle.party.communication.CommunicationEvent" value-field="communicationEvent" auto-field-map="[communicationEventId:commStatus.communicationEventId]"><select-field field-name="emailMessageId"/></entity-find-one><entity-find-one entity-name="moqui.basic.email.EmailMessage" value-field="emailMessage" auto-field-map="[emailMessageId:communicationEvent.emailMessageId]"><select-field field-name="emailTemplateId"/></entity-find-one><if condition="emailMessage?.emailTemplateId==createOrganizationEmailTemplateId"><set field="createOrganizationAlreadyBeenSent" value="true"/><continue/></if><if condition="emailMessage?.emailTemplateId==inviteUserEmailTemplateId"><set field="inviteUserAlreadyBeenSent" value="true"/><continue/></if><if condition="emailMessage?.emailTemplateId==createProcessStoryEmailTemplateId"><set field="createProcessStoryAlreadyBeenSent" value="true"/><continue/></if><if condition="emailMessage?.emailTemplateId==createActorEmailTemplateId"><set field="createActorAlreadyBeenSent" value="true"/><continue/></if></iterate><entity-find entity-name="moqui.security.UserAccount" list="userAccountList" limit="2"><econdition field-name="partyId" from="listParty.partyId"/><econdition field-name="disabled" operator="not-equals" value="Y"/></entity-find><if condition="userAccountList.size() > 1"><log level="warn" message="Multiple user accounts found for party ${listParty.partyId}"/></if><set field="userAccount" from="userAccountList?.getFirst()"/><entity-find entity-name="moqui.security.UserLoginHistory" list="historyList" limit="1"><econdition field-name="userId" from="userAccount.userId"/><order-by field-name="fromDate"/></entity-find><entity-find entity-name="mantle.party.Party" list="ownedOrganizationList"><econdition field-name="ownerPartyId" from="listParty.partyId"/><econdition field-name="partyTypeEnumId" value="PtyOrganization"/><econdition field-name="disabled" operator="not-equals" value="Y"/><order-by field-name="-lastUpdatedStamp"/></entity-find><if condition="!createOrganizationAlreadyBeenSent && ownedOrganizationList.size() == 0 && userAccount && historyList.size() > 0                     && twoDaysAgo.toInstant() > historyList.getFirst().fromDate.toInstant()"><service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[                                             contactListId:listParty.contactListId,emailTemplateId:createOrganizationEmailTemplateId,                                             partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,                                             bodyParameters:[linkUrl:baseLinkUrl+'/settings/Organizations',                                             title:'Get started with Coarchy. Create an Organization',baseLinkUrl:baseLinkUrl]]" out-map="[sentEmail:context.sentEmail,emailTemplateId:context.emailTemplateId]"/><set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,                                         emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/></if><entity-find entity-name="mantle.party.PartyRelationship" list="partyRelationshipList"><econdition field-name="fromPartyId" operator="not-equals" from="listParty.partyId"/><econdition field-name="toPartyId" operator="in" from="ownedOrganizationList*.partyId"/><econdition field-name="relationshipTypeEnumId" value="PrtMember"/><econdition field-name="toRoleTypeId" value="OrgInternal"/><date-filter/></entity-find><if condition="createOrganizationAlreadyBeenSent && !inviteUserAlreadyBeenSent                     && partyRelationshipList.size() == 0 && userAccount && historyList.size() > 0                     && fourDaysAgo.toInstant() > historyList.getFirst().fromDate.toInstant()"><if condition="ownedOrganizationList.size() > 0"><then><set field="linkUrl" from="baseLinkUrl+'/settings/EditOrganization?organizationId='+ownedOrganizationList.getFirst().partyId"/></then><else><set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/></else></if><service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[                         contactListId:listParty.contactListId,emailTemplateId:inviteUserEmailTemplateId,                         partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,                         bodyParameters:[linkUrl:linkUrl,                         title:'Coarchy is better with people',baseLinkUrl:baseLinkUrl]]" out-map="[sentEmail:context.sentEmail,emailTemplateId:context.emailTemplateId]"/><set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,                         emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/></if><if condition="inviteUserAlreadyBeenSent && !createProcessStoryAlreadyBeenSent                     && userAccount && historyList.size() > 0                     && sixDaysAgo.toInstant() > historyList.getFirst().fromDate.toInstant()"><if condition="ownedOrganizationList.size() > 0"><then><service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[                             preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:ownedOrganizationList.getFirst().partyId]"/><set field="linkUrl" from="baseLinkUrl+'/coapp/Process/FindProcessStory'"/></then><else><set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/></else></if><service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[                         contactListId:listParty.contactListId,emailTemplateId:createProcessStoryEmailTemplateId,                         partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,                         bodyParameters:[linkUrl:linkUrl,baseLinkUrl:baseLinkUrl,                         title:'The Process Story is the most important requirements document']]" out-map="[sentEmail:context.sentEmail,emailTemplateId:context.emailTemplateId]"/><set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,                         emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/></if><if condition="createProcessStoryAlreadyBeenSent && !createActorAlreadyBeenSent                     && userAccount && historyList.size() > 0                     && eightDaysAgo.toInstant() > historyList.getFirst().fromDate.toInstant()"><if condition="ownedOrganizationList.size() > 0"><then><service-call name="org.moqui.impl.UserServices.set#Preference" in-map="[                             preferenceKey:'ACTIVE_ORGANIZATION',preferenceValue:ownedOrganizationList.getFirst().partyId]"/><set field="linkUrl" from="baseLinkUrl+'/coapp/Actor'"/></then><else><set field="linkUrl" from="baseLinkUrl+'/settings/Organizations'"/></else></if><service-call name="coarchy.CoarchyServices.send#ContactListEmail" in-map="[                         contactListId:listParty.contactListId,emailTemplateId:createActorEmailTemplateId,                         partyId:listParty.partyId,preferredContactMechId:null,toAddresses:userAccount.emailAddress,                         bodyParameters:[linkUrl:linkUrl,baseLinkUrl:baseLinkUrl,                         title:'Actors are WHO perform activities']]" out-map="[sentEmail:context.sentEmail,emailTemplateId:context.emailTemplateId]"/><set field="emailsSentList" from="emailsSentList + [partyId:listParty.partyId,                         emailAddress:userAccount.emailAddress,emailTemplateId:emailTemplateId]"/></if></iterate></actions></service>