<!--Service Location mantle.product.AssetServices.reserve#AssetForOrderItem--><service verb="reserve" noun="AssetForOrderItem"><in-parameters><parameter name="orderId" required="true"/><parameter name="orderItemSeqId" required="true"/><parameter name="productStore" type="EntityValue"><description><![CDATA[Optional, gets from OrderHeader if not passed.
                If there is no OrderHeader.productStoreId defaults to reservationOrderEnumId=AsResOrdFifoRec and gets
                inventoryFacilityId from OrderPart.facilityId and organizationPartyId from OrderPart.vendorPartyId.]]></description></parameter><parameter name="assetId"><description><![CDATA[Optional assetId, reserves against this first if specified.]]></description></parameter><parameter name="assetIdList" type="List"><description><![CDATA[Optional List of assetId values, reserves against these first (in order) if specified.]]></description><parameter name="assetId"/></parameter><parameter name="resetReservations" type="Boolean" default="false"><description><![CDATA[If true remove existing reservations before reserving.]]></description></parameter><parameter name="skipAssetIds" type="Collection"><description><![CDATA[Don't reserve to this Asset, for displace/etc]]></description><parameter name="assetId"/></parameter><parameter name="forceReserve" type="Boolean" default="false"><description><![CDATA[Ignore validations on ProductStore.reservationAutoEnumId, presence of productStoreId or vendorPartyId in OrgInternal role]]></description></parameter><parameter name="componentProductId"/><parameter name="componentQuantity" type="BigDecimal"/></in-parameters><out-parameters/><actions><set field="nowTimestamp" from="ec.user.nowTimestamp"/><entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem" for-update="true"/><if condition="orderItem == null"><return error="true" message="Order Item ${orderId}:${orderItemSeqId} not found"/></if><if condition="componentProductId"><log level="warn" message="Component Product ${componentProductId} reserve ${componentQuantity} for OrderItem ${orderId}:${orderItemSeqId} product ${orderItem.productId}"/></if><set field="productId" from="componentProductId ?: orderItem.productId"/><if condition="!productId"><return/></if><entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/><if condition="!(product.productTypeEnumId in ['PtAsset', 'PtDigitalAsset', 'PtAssetUse', 'PtPickAssembly'])"><return/></if><entity-find entity-name="moqui.basic.EnumGroupMember" list="productItemTypeEgms" cache="true"><econdition field-name="enumGroupEnumId" value="EngItemsProduct"/></entity-find><set field="productItemTypes" from="productItemTypeEgms*.enumId"/><if condition="!(orderItem.itemTypeEnumId in productItemTypes)"><return/></if><entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/><entity-find-related-one value-field="orderItem" relationship-name="mantle.order.OrderPart" to-value-field="orderPart"/><set field="resStatusList" from="['OrderOpen', 'OrderRequested', 'OrderProposed', 'OrderPlaced', 'OrderProcessing', 'OrderApproved', 'OrderSent', 'OrderHold']"/><if condition="!(orderHeader.statusId in resStatusList) || !(orderPart.statusId in resStatusList)"><return message="Not reserving, order or part not in status that allows reservation"/></if><if condition="resetReservations"><service-call name="mantle.product.AssetServices.remove#OrderItemReservations" in-map="context"/></if><set field="quantityRemaining" from="componentQuantity != null ? componentQuantity : orderItem.quantity"/><if condition="!componentProductId"><entity-find entity-name="mantle.product.issuance.AssetIssuance" list="assetIssuanceList"><econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/></entity-find><iterate list="assetIssuanceList" entry="assetIssuance"><set field="quantityRemaining" from="quantityRemaining - assetIssuance.quantity"/></iterate></if><entity-find entity-name="mantle.product.issuance.AssetReservation" list="existingResList"><econdition field-name="orderId"/><econdition field-name="orderItemSeqId"/><econdition field-name="productId" from="product.productId" ignore="!(componentProductId || product.productTypeEnumId == 'PtPickAssembly')"/><order-by field-name="-reservedDate"/></entity-find><iterate list="existingResList" entry="existingRes"><set field="quantityRemaining" from="quantityRemaining - existingRes.quantity"/></iterate><if condition="quantityRemaining <= 0"><return/></if><if condition="quantityRemaining < 0"><set field="quantityToDeduct" from="-quantityRemaining"/><iterate list="existingResList" entry="existingRes"><service-call name="mantle.product.AssetServices.reduce#AssetReservation" out-map="[quantityDeducted:reduceArOut.quantityDeducted]" out-map-add-to-existing="false" in-map="[assetReservationId:existingRes.assetReservationId, quantityToDeduct:quantityToDeduct, reserveIncreasedAsset:true]"/><set field="quantityToDeduct" from="quantityToDeduct - reduceArOut.quantityDeducted"/><if condition="quantityToDeduct == 0"><break/></if></iterate><if condition="quantityToDeduct != 0"><return error="true" message="Unable to remove reservations for ${quantityToDeduct} out of ${-quantityRemaining} attempted, not enough quantity reserved and not issued"/><else><return/></else></if></if><if condition="quantityRemaining < 0"><log level="error" message="Quantity to reserve ${quantityRemaining} is less than zero; order item ${orderId}:${orderItemSeqId}, quantity ${orderItem.quantity}; existingResList: ${existingResList}"/><return error="true" message="Quantity to reserve ${quantityRemaining} is less than zero"/></if><if condition="productStore == null"><entity-find-related-one value-field="orderHeader" relationship-name="mantle.product.store.ProductStore" to-value-field="productStore" cache="true"/></if><if condition="productStore?.reservationOrderEnumId == 'AsResOrdNoRes'"><return/></if><set field="reservationOrderEnumId" from="productStore?.reservationOrderEnumId ?: 'AsResOrdFifoRec'"/><entity-find-one entity-name="moqui.basic.Enumeration" value-field="resOrderEnum"><field-map field-name="enumId" from="reservationOrderEnumId"/></entity-find-one><set field="assetOrderBy" from="resOrderEnum?.enumCode ?: 'receivedDate'"/><set field="inventoryFacilityId" from="orderPart?.facilityId ?: productStore?.inventoryFacilityId"/><entity-find-one entity-name="mantle.facility.Facility" value-field="inventoryFacility" cache="true"><field-map field-name="facilityId" from="inventoryFacilityId"/></entity-find-one><set field="assetAllowOtherOwner" from="inventoryFacility?.assetAllowOtherOwner"/><set field="organizationPartyId" from="orderPart?.vendorPartyId ?: productStore?.organizationPartyId"/><entity-find-one entity-name="mantle.party.PartyRole" value-field="orgPartyRole" cache="true"><field-map field-name="partyId" from="organizationPartyId"/><field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one><if condition="productStore == null && orgPartyRole == null"><if condition="forceReserve"><then><log message="Reserving inventory for order ${orderId} item ${orderItemSeqId} with no productStoreId and vendor is not OrgInternal (forceReserve is true)"/></then><else><return/></else></if></if><set field="ownerPartyIdSet" from="new HashSet()"/><script><![CDATA[if (organizationPartyId) ownerPartyIdSet.add(organizationPartyId)]]></script><if condition="organizationPartyId && assetAllowOtherOwner != 'Y'"><entity-find entity-name="mantle.party.PartyRelationship" list="parentRelList" cache="true"><date-filter/><econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/><econdition field-name="fromPartyId" from="organizationPartyId"/><econdition field-name="toPartyId" operator="is-not-null"/></entity-find><script><![CDATA[if (parentRelList) ownerPartyIdSet.addAll(parentRelList*.toPartyId)]]></script></if><service-call name="mantle.product.AssetServices.get#AssetPools" out-map="[assetPoolIdSet:poolsOut.assetPoolIdSet]" in-map="[productStoreId:orderHeader.productStoreId, vendorPartyId:orderPart?.vendorPartyId,                         customerPartyId:orderPart?.customerPartyId]"/><set field="assetPoolIdSet" from="poolsOut.assetPoolIdSet"/><set field="lockedAssetList" from="[]"/><set field="checkQuantityRemaining" from="quantityRemaining"/><set field="explicitAssetIdList" from="[]"/><if condition="assetId"><script><![CDATA[explicitAssetIdList.add(assetId)]]></script></if><if condition="assetIdList"><script><![CDATA[explicitAssetIdList.addAll(assetIdList)]]></script></if><if condition="explicitAssetIdList"><entity-find entity-name="mantle.product.asset.Asset" list="explicitAssetList"><econdition field-name="assetId" operator="in" from="explicitAssetIdList"/><econdition field-name="productId"/><econdition field-name="quantityOnHandTotal" operator="greater" from="0.0"/></entity-find><set field="sortedExplicitAssetList" from="[]"/><iterate list="explicitAssetIdList" entry="explicitAssetId"><set field="explicitAsset" from="explicitAssetList.find({ it.assetId == explicitAssetId })"/><script><![CDATA[if (explicitAsset != null) sortedExplicitAssetList.add(explicitAsset)]]></script></iterate><iterate list="sortedExplicitAssetList" entry="checkAsset"><if condition="checkQuantityRemaining <= 0.0"><break/></if><if condition="checkAsset.assetPoolId && !assetPoolIdSet.contains(checkAsset.assetPoolId)"><message type="danger"><![CDATA[Not reserving specified asset ${checkAsset.assetId} in pool ${checkAsset.assetPoolId} which is not available to this order]]></message><continue/></if><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"><field-map field-name="assetId" from="checkAsset.assetId"/></entity-find-one><set field="quantityToReserve" from="asset.quantityOnHandTotal > checkQuantityRemaining ? checkQuantityRemaining : asset.quantityOnHandTotal"/><if condition="quantityToReserve > asset.availableToPromiseTotal"><service-call name="mantle.product.AssetServices.displace#AssetReservations" in-map="[assetId:asset.assetId, orderId:orderId, orderItemSeqId:orderItemSeqId, quantity:quantityToReserve]"/><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"><field-map field-name="assetId" from="asset.assetId"/></entity-find-one></if><if condition="quantityToReserve > 0.0"><set field="checkQuantityRemaining" from="checkQuantityRemaining - quantityToReserve"/><script><![CDATA[lockedAssetList.add(asset)]]></script></if></iterate></if><if condition="checkQuantityRemaining > 0.0"><set field="baseAssetCond" from="[productId:productId, statusId:'AstAvailable']"/><if condition="inventoryFacilityId"><set field="baseAssetCond.facilityId" from="inventoryFacilityId"/></if><if condition="!baseAssetCond.facilityId"><log level="warn" message="Reserving inventory for order ${orderId} item ${orderItemSeqId} with no facilityId"/></if><set field="lotsToUse" from="null"/><set field="singleLot" from="false"/><set field="newerInventory" from="false"/><if condition="orderPart.customerPartyId"><set field="singleLot" from="'BlY'.equals(ec.service.sync().name('mantle.party.PartyServices.get#PartySettingValue')                         .parameter('partySettingTypeId', 'CustomerSingleLot').parameter('partyId', orderPart.customerPartyId).call()?.get('settingValue'))"/><set field="newerInventory" from="'BlY'.equals(ec.service.sync().name('mantle.party.PartyServices.get#PartySettingValue')                         .parameter('partySettingTypeId', 'CustomerNewerInventory').parameter('partyId', orderPart.customerPartyId).call()?.get('settingValue'))"/></if><if condition="singleLot || newerInventory"><set field="newerThanExpireDate" from="null"/><if condition="newerInventory"><entity-find entity-name="mantle.product.issuance.AssetIssuanceLotSummary" list="issuanceLotList" limit="1"><econdition field-name="toPartyId" from="orderPart.customerPartyId"/><econdition field-name="productId"/><select-field field-name="expirationDate,expectedEndOfLife"/><order-by field-name="-issuedDate"/></entity-find><if condition="issuanceLotList"><set field="newerThanExpireDate" from="issuanceLotList[0].expirationDate ?: issuanceLotList[0].expectedEndOfLife"/></if></if><entity-find entity-name="mantle.product.asset.AssetLotSummary" list="lotSummaryList"><econdition-object field="baseAssetCond"/><econdition field-name="ownerPartyId" operator="in" from="ownerPartyIdSet" ignore="assetAllowOtherOwner == 'Y' || !ownerPartyIdSet"/><econdition field-name="assetPoolId" operator="in" from="assetPoolIdSet" ignore="!assetPoolIdSet" or-null="true"/><econdition field-name="assetPoolId" operator="is-null" ignore="assetPoolIdSet"/><econdition field-name="expirationDate" operator="greater-equals" from="newerThanExpireDate" ignore-if-empty="true"/><select-field field-name="lotId,availableToPromiseTotal,manufacturedDate,expirationDate"/><order-by field-name="availableToPromiseTotal"/></entity-find><set field="availableFoundByLot" from="0.0"/><iterate list="lotSummaryList" entry="lotSummary"><set field="availableFoundByLot" from="availableFoundByLot + lotSummary.availableToPromiseTotal"/></iterate><if condition="availableFoundByLot < checkQuantityRemaining && newerThanExpireDate != null"><set field="lotRetryOrderBy" from="singleLot ? 'availableToPromiseTotal' : 'expirationDate'"/><entity-find entity-name="mantle.product.asset.AssetLotSummary" list="lotSummaryList"><econdition-object field="baseAssetCond"/><econdition field-name="ownerPartyId" operator="in" from="ownerPartyIdSet" ignore="assetAllowOtherOwner == 'Y' || !ownerPartyIdSet"/><econdition field-name="assetPoolId" operator="in" from="assetPoolIdSet" ignore="!assetPoolIdSet" or-null="true"/><econdition field-name="assetPoolId" operator="is-null" ignore="assetPoolIdSet"/><select-field field-name="lotId,availableToPromiseTotal,manufacturedDate,expirationDate"/><order-by field-name="${lotRetryOrderBy}"/></entity-find></if><if condition="lotSummaryList"><set field="singleLotId" from="null"/><if condition="singleLot"><iterate list="lotSummaryList" entry="lotSummary"><if condition="lotSummary.availableToPromiseTotal >= checkQuantityRemaining"><set field="singleLotId" from="lotSummary.lotId"/><break/></if></iterate></if><if condition="singleLotId"><then><set field="lotsToUse" from="[singleLotId]"/></then><else><script><![CDATA[// no single lot found? go end to beginning and use as many lots as needed
                            lotsToUse = []
                            BigDecimal lotQuantityRemaining = checkQuantityRemaining
                            for (int i = lotSummaryList.size() - 1; i >= 0; i--) {
                                def curLotSummary = lotSummaryList.get(i)
                                lotQuantityRemaining -= curLotSummary.availableToPromiseTotal
                                lotsToUse.add(curLotSummary.lotId)
                                if (lotQuantityRemaining <= 0.0) break
                            }]]></script></else></if><log level="warn" message="Order ${orderId} Lots to use: ${lotsToUse}"/></if></if><if condition="checkQuantityRemaining > 0.0"><entity-find entity-name="mantle.product.asset.AssetLocationDetail" list="checkAssetList"><econdition-object field="baseAssetCond"/><econdition field-name="ownerPartyId" operator="in" from="ownerPartyIdSet" ignore="assetAllowOtherOwner == 'Y' || !ownerPartyIdSet"/><econdition field-name="assetPoolId" operator="in" from="assetPoolIdSet" ignore="!assetPoolIdSet" or-null="true"/><econdition field-name="assetPoolId" operator="is-null" ignore="assetPoolIdSet"/><econdition field-name="availableToPromiseTotal" operator="greater" from="0.0"/><econdition field-name="assetId" operator="not-in" from="explicitAssetIdList" ignore-if-empty="true"/><econdition field-name="assetId" operator="not-in" from="skipAssetIds" ignore-if-empty="true"/><econdition field-name="lotId" operator="in" from="lotsToUse" ignore-if-empty="true"/><econdition field-name="statusId" value="AstAvailable"/><econdition field-name="locationTypeEnumId" value="FltPick"/><select-field field-name="${assetOrderBy},assetId"/><order-by field-name="${assetOrderBy},assetId"/></entity-find><iterate list="checkAssetList" entry="checkAsset"><if condition="checkQuantityRemaining <= 0.0"><break/></if><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"><field-map field-name="assetId" from="checkAsset.assetId"/></entity-find-one><if condition="inventoryFacilityId != asset.facilityId"><log level="warn" message="Inventory Facility ${inventoryFacilityId} did not match asset ${asset?.assetId} facility ${asset?.facilityId} reserving for order ${orderId} item ${orderItemSeqId}"/></if><set field="quantityToReserve" from="asset.availableToPromiseTotal > checkQuantityRemaining ? checkQuantityRemaining : asset.availableToPromiseTotal"/><if condition="quantityToReserve > 0.0"><set field="checkQuantityRemaining" from="checkQuantityRemaining - quantityToReserve"/><script><![CDATA[lockedAssetList.add(asset)]]></script></if></iterate></if><if condition="checkQuantityRemaining > 0.0"><entity-find entity-name="mantle.product.asset.AssetLocationDetail" list="checkAssetList"><econdition-object field="baseAssetCond"/><econdition field-name="ownerPartyId" operator="in" from="ownerPartyIdSet" ignore="assetAllowOtherOwner == 'Y' || !ownerPartyIdSet"/><econdition field-name="assetPoolId" operator="in" from="assetPoolIdSet" ignore="!assetPoolIdSet" or-null="true"/><econdition field-name="assetPoolId" operator="is-null" ignore="assetPoolIdSet"/><econdition field-name="availableToPromiseTotal" operator="greater" from="0.0"/><econdition field-name="assetId" operator="not-in" from="explicitAssetIdList" ignore-if-empty="true"/><econdition field-name="assetId" operator="not-in" from="skipAssetIds" ignore-if-empty="true"/><econdition field-name="lotId" operator="in" from="lotsToUse" ignore-if-empty="true"/><econdition field-name="statusId" value="AstAvailable"/><econdition field-name="locationTypeEnumId" operator="not-equals" value="FltPick" or-null="true"/><select-field field-name="${assetOrderBy},assetId"/><order-by field-name="${assetOrderBy},assetId"/></entity-find><iterate list="checkAssetList" entry="checkAsset"><if condition="checkQuantityRemaining <= 0.0"><break/></if><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"><field-map field-name="assetId" from="checkAsset.assetId"/></entity-find-one><if condition="inventoryFacilityId != asset.facilityId"><log level="warn" message="Inventory Facility ${inventoryFacilityId} did not match asset ${asset?.assetId} facility ${asset?.facilityId} reserving for order ${orderId} item ${orderItemSeqId}"/></if><set field="quantityToReserve" from="asset.availableToPromiseTotal > checkQuantityRemaining ? checkQuantityRemaining : asset.availableToPromiseTotal"/><if condition="quantityToReserve > 0.0"><set field="checkQuantityRemaining" from="checkQuantityRemaining - quantityToReserve"/><script><![CDATA[lockedAssetList.add(asset)]]></script></if></iterate></if></if><set field="baseMap" from="[orderId:orderId, orderItemSeqId:orderItemSeqId, productId:productId]"/><iterate list="lockedAssetList" entry="asset"><if condition="quantityRemaining > 0.0"><set field="quantityToReserve" from="asset.availableToPromiseTotal > quantityRemaining ? quantityRemaining : asset.availableToPromiseTotal"/><if condition="quantityToReserve == 0.0"><continue/></if><set field="quantityRemaining" from="quantityRemaining - quantityToReserve"/><if condition="quantityToReserve < 0.0"><return error="true" message="In reserve#AssetForOrderItem (with assets found) got negative quantityToReserve ${quantityToReserve}"/></if><service-call name="create#mantle.product.issuance.AssetReservation" out-map="[assetReservationId:resOut.assetReservationId,assetId:resOut.assetId,productId:resOut.productId,orderId:resOut.orderId,orderItemSeqId:resOut.orderItemSeqId,reservationOrderEnumId:resOut.reservationOrderEnumId,quantity:resOut.quantity,quantityNotAvailable:resOut.quantityNotAvailable,quantityNotIssued:resOut.quantityNotIssued,reservedDate:resOut.reservedDate,originalPromisedDate:resOut.originalPromisedDate,currentPromisedDate:resOut.currentPromisedDate,priority:resOut.priority,sequenceNum:resOut.sequenceNum,lastUpdatedStamp:resOut.lastUpdatedStamp]" in-map="baseMap +                             [assetId:asset.assetId, reservedDate:nowTimestamp, quantity:quantityToReserve,                                 quantityNotAvailable:0.0, quantityNotIssued:quantityToReserve, priority:orderItem.priority,                                 sequenceNum:asset_index, reservationOrderEnumId:reservationOrderEnumId]"/><service-call name="create#mantle.product.asset.AssetDetail" in-map="baseMap +                             [assetId:asset.assetId, effectiveDate:nowTimestamp,                                 availableToPromiseDiff:-quantityToReserve, assetReservationId:resOut.assetReservationId]"/></if></iterate><if condition="quantityRemaining > 0.0 && product.productTypeEnumId == 'PtPickAssembly'"><entity-find entity-name="mantle.product.ProductAssoc" list="assocList"><date-filter/><econdition field-name="productId" from="product.productId"/><econdition field-name="productAssocTypeEnumId" value="PatMfgBom"/></entity-find><iterate list="assocList" entry="assoc"><if condition="assoc.productId == assoc.toProductId"><return error="true" message="Pick Assembly Product ${assoc.productId} has itself for a component product, remove the Manufacturing BOM Association"/></if><service-call name="mantle.product.AssetServices.reserve#AssetForOrderItem" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId, productStore:productStore, forceReserve:forceReserve,                                 componentProductId:assoc.toProductId, componentQuantity:((assoc.quantity ?: 1.0) * quantityRemaining)]"/></iterate><set field="quantityRemaining" from="0.0"/></if><if condition="quantityRemaining > 0.0"><entity-find entity-name="mantle.product.asset.Asset" list="existingResAssetList" limit="1"><econdition field-name="productId"/><econdition field-name="facilityId" from="inventoryFacilityId"/><econdition field-name="ownerPartyId" from="organizationPartyId"/><econdition field-name="assetPoolId" from="null"/><econdition field-name="locationSeqId" from="null"/><econdition field-name="containerId" from="null"/><econdition field-name="lotId" from="null"/><econdition field-name="statusId" value="AstAvailable"/><econdition field-name="hasQuantity" value="Y"/><econdition field-name="availableToPromiseTotal" operator="less-equals" from="0.0"/><select-field field-name="assetId"/><order-by field-name="availableToPromiseTotal"/></entity-find><set field="newResAssetId" from="existingResAssetList ? existingResAssetList.get(0).assetId : null"/><if condition="!newResAssetId"><service-call name="mantle.product.AssetServices.create#ProductAssetAdHoc" out-map="[assetId:assetOut.assetId]" in-map="[productId:productId, facilityId:inventoryFacilityId, ownerPartyId:organizationPartyId,                                 createdDate:nowTimestamp]"/><set field="newResAssetId" from="assetOut.assetId"/></if><service-call name="create#mantle.product.issuance.AssetReservation" out-map="[assetReservationId:resOut.assetReservationId,assetId:resOut.assetId,productId:resOut.productId,orderId:resOut.orderId,orderItemSeqId:resOut.orderItemSeqId,reservationOrderEnumId:resOut.reservationOrderEnumId,quantity:resOut.quantity,quantityNotAvailable:resOut.quantityNotAvailable,quantityNotIssued:resOut.quantityNotIssued,reservedDate:resOut.reservedDate,originalPromisedDate:resOut.originalPromisedDate,currentPromisedDate:resOut.currentPromisedDate,priority:resOut.priority,sequenceNum:resOut.sequenceNum,lastUpdatedStamp:resOut.lastUpdatedStamp]" in-map="baseMap +                         [assetId:newResAssetId, reservedDate:nowTimestamp, quantity:quantityRemaining,                             quantityNotAvailable:quantityRemaining, quantityNotIssued:quantityRemaining,                             priority:orderItem.priority, sequenceNum:0,                             reservationOrderEnumId:reservationOrderEnumId]"/><service-call name="create#mantle.product.asset.AssetDetail" in-map="baseMap +                         [assetId:newResAssetId, effectiveDate:nowTimestamp,                             availableToPromiseDiff:-quantityRemaining, assetReservationId:resOut.assetReservationId]"/></if></actions></service>