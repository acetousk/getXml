<!--Service Location mantle.party.PartyServices.create#PartyUserAccount--><service verb="create" noun="PartyUserAccount"><in-parameters><parameter name="username" type="java.lang.String" required="true" allow-html="none" entity-name="moqui.security.UserAccount" field-name="username" default="emailAddress"/><parameter name="userFullName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="userFullName"/><parameter name="passwordHint" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="passwordHint"/><parameter name="publicKey" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="publicKey"/><parameter name="disabled" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="disabled" default-value="N"/><parameter name="terminateDate" type="java.sql.Timestamp" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="terminateDate"/><parameter name="requirePasswordChange" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="requirePasswordChange" default-value="N"/><parameter name="currencyUomId" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="currencyUomId"/><parameter name="locale" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="locale"/><parameter name="timeZone" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="timeZone"/><parameter name="externalUserId" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="externalUserId"/><parameter name="emailAddress" type="java.lang.String" required="true" allow-html="none" entity-name="moqui.security.UserAccount" field-name="emailAddress"><text-email/></parameter><parameter name="ipAllowed" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="ipAllowed"/><parameter name="partyId" type="java.lang.String" required="true" allow-html="none" entity-name="moqui.security.UserAccount" field-name="partyId"/><parameter name="lastUpdatedStamp" type="java.sql.Timestamp" required="false" allow-html="none" entity-name="moqui.security.UserAccount" field-name="lastUpdatedStamp"/><parameter name="newPassword"><description><![CDATA[If empty won't set a password, user will have to change or reset.]]></description></parameter><parameter name="newPasswordVerify"/><parameter name="userGroupId"/><parameter name="groupTypeEnumIdList" type="List"><description><![CDATA[User group types allowed, set server-side to make sure userGroupId is of a type allowed]]></description><parameter name="groupTypeEnumId"/></parameter></in-parameters><out-parameters><parameter name="userId"/></out-parameters><actions><entity-find entity-name="moqui.security.UserAccount" list="existingUaList"><econdition field-name="username" ignore-case="true"/></entity-find><if condition="existingUaList"><return error="true" message="Username [${username}] is already in use. Please choose another."/></if><entity-find entity-name="moqui.security.UserAccount" list="existingUaList"><econdition field-name="emailAddress" ignore-case="true"/></entity-find><if condition="existingUaList"><return error="true" message="Email ${emailAddress} is already in use. Login with username ${existingUaList[0].username}"/></if><entity-find entity-name="mantle.party.contact.PartyContactMech" list="primaryEmailList"><date-filter/><econdition field-name="partyId"/><econdition field-name="contactMechPurposeId" value="EmailPrimary"/><order-by field-name="-fromDate"/></entity-find><if condition="emailAddress"><then><if condition="primaryEmailList"><then><service-call name="mantle.party.ContactServices.update#PartyContactOther" in-map="[infoString:emailAddress, partyId:partyId, contactMechId:primaryEmailList[0].contactMechId,                                 contactMechPurposeId:'EmailPrimary']"/></then><else><service-call name="mantle.party.ContactServices.create#EmailAddress" out-map="[contactMechId:emailOut.contactMechId]" in-map="[emailAddress:emailAddress, partyId:partyId, contactMechPurposeId:'EmailPrimary']"/></else></if></then><else><set field="emailAddress" from="primaryEmailList ? primaryEmailList[0].infoString : null"/></else></if><entity-find-one entity-name="mantle.party.Person" value-field="person"/><if condition="!person"><return error="true" message="Party [${partyId}] is not a person, not creating user account."/></if><set field="userFullName" value="${ec.resource.expand('PartyFullNameTemplate','',person?:[:])}"/><if condition="newPassword"><then><service-call name="org.moqui.impl.UserServices.create#UserAccount" in-map="context" out-map="[userId:context.userId]"/><service-call name="update#moqui.security.UserAccount" in-map="[userId:userId, partyId:partyId]"/></then><else><service-call name="create#moqui.security.UserAccount" in-map="context" out-map="[userId:context.userId,username:context.username,userFullName:context.userFullName,currentPassword:context.currentPassword,resetPassword:context.resetPassword,passwordSalt:context.passwordSalt,passwordHashType:context.passwordHashType,passwordBase64:context.passwordBase64,passwordSetDate:context.passwordSetDate,passwordHint:context.passwordHint,publicKey:context.publicKey,hasLoggedOut:context.hasLoggedOut,disabled:context.disabled,disabledDateTime:context.disabledDateTime,terminateDate:context.terminateDate,successiveFailedLogins:context.successiveFailedLogins,requirePasswordChange:context.requirePasswordChange,currencyUomId:context.currencyUomId,locale:context.locale,timeZone:context.timeZone,externalUserId:context.externalUserId,emailAddress:context.emailAddress,ipAllowed:context.ipAllowed,partyId:context.partyId,lastUpdatedStamp:context.lastUpdatedStamp]"/></else></if><if condition="userGroupId"><set field="groupValid" from="true"/><if condition="groupTypeEnumIdList"><entity-find-one entity-name="moqui.security.UserGroup" value-field="userGroup"/><set field="groupValid" from="groupTypeEnumIdList.contains(userGroup.groupTypeEnumId)"/></if><if condition="groupValid"><service-call name="create#moqui.security.UserGroupMember" in-map="[userGroupId:userGroupId, userId:userId, fromDate:ec.user.nowTimestamp]"/></if></if></actions></service>