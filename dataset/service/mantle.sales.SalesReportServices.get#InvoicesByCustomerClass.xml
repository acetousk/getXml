<!--Service Location mantle.sales.SalesReportServices.get#InvoicesByCustomerClass--><service verb="get" noun="InvoicesByCustomerClass"><in-parameters><parameter name="interval" default-value="M"/><parameter name="thruDate" type="Date" default="new java.sql.Date(ec.user.nowTimestamp.time)"/><parameter name="indexName" default-value="mantle_sales"/><parameter name="invoiceDocumentType" default-value="MantleSalesInvoice"/><parameter name="itemDocumentType" default-value="MantleSalesInvoiceItem"/><parameter name="topLimit" type="Integer" default="100"/><parameter name="poffset" type="Integer" default="-1"/><parameter name="dateField" default-value="invoiceDate"/><parameter name="orderByField" default-value="-invoiceTotal"/><parameter name="clusterName" default-value="default"/></in-parameters><out-parameters><parameter name="topCustomerClassList" type="List"><parameter name="result" type="Map"/></parameter><parameter name="topCustomerClassStart" type="Timestamp"/><parameter name="topCustomerClassEnd" type="Timestamp"/></out-parameters><actions><script><![CDATA[import groovy.json.JsonOutput
            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec

            def elasticClient = ec.factory.elastic.getClient((String) clusterName)
            if (elasticClient == null) { ec.message.addMessage("No ElasticClient found for cluster ${clusterName}", "danger"); return }

            Map<String, String> perMap = [d:'day', w:'week', M:'month', q:'quarter', y:'year']
            ArrayList<Timestamp> curPer = ec.user.getPeriodRange(perMap.get(interval), poffset, thruDate)
            /* no longer do this, other aggregations now use an offset to match the Java week definition for user's Locale:
            // for weeks shift by one to start on Monday (like ES does for aggregations) instead of Sunday
            if (interval == 'w') { curPer[0] = curPer[0] + 1; curPer[1] = curPer[1] + 1 }
            */
            topCustomerClassStart = curPer.get(0)
            topCustomerClassEnd = curPer.get(1)

            Map queryMap = [bool: [filter: [
                    [range: [(dateField): [gte:(topCustomerClassStart.time as String), lt:(topCustomerClassEnd.time as String), format: 'epoch_millis']]],
                    [terms: [statusId: ['InvoiceFinalized', 'InvoiceSent', 'InvoiceAcked', 'InvoicePmtRecvd']]]
            ]]]

            // prep the invoice level search
            Map invSubAggsMap = [:]
            Map invAggsMap = [TopTerms:[terms:[field:'customerClassId', size:topLimit], aggs:invSubAggsMap]]

            // total sales
            invSubAggsMap.invoiceTotal = [sum:[field:'invoiceTotal']]
            // total paid
            // NOTE: may want this to behave differently, somehow do a nested aggregation for only applications with appliedDate less than the end date of the current date range
            invSubAggsMap.invoicePaymentsApplied = [sum:[field:'appliedPaymentsTotal']]
            // do the invoice search
            String invoiceIdx = org.moqui.impl.context.ElasticFacadeImpl.ddIdToEsIndex((String) invoiceDocumentType)
            Map invResultMap = elasticClient.search(invoiceIdx, [query:queryMap, aggs:invAggsMap])
            Map invAggregationsMap = (Map) invResultMap.aggregations

            // prep the invoice item search
            Map itemSubAggsMap = [:]
            Map itemAggsMap = [TopTerms:[terms:[field:'customerClassId', size:topLimit], aggs:itemSubAggsMap]]

            // invoice count
            itemSubAggsMap.invoiceIdCount = [cardinality:[field:'invoiceId', precision_threshold:40000]]
            // total sales (itemSaleTotal, no item type restriction)
            itemSubAggsMap.totalSales = [sum:[field:'itemSaleTotal']]

            // product only counts
            Map itemProductSubAggs = [:]
            itemSubAggsMap.ItemProduct = [filter:[term:[itemTypeEnumId:'ItemProduct']], aggs:itemProductSubAggs]

            // total product sales (itemSaleTotal; itemTypeEnumId = ItemProduct)
            itemProductSubAggs.productSaleTotal = [sum:[field:'itemSaleTotal']]
            // total product shipped (issuedSaleTotal; itemTypeEnumId = ItemProduct)
            itemProductSubAggs.productIssuedTotal = [sum:[field:'issuances.issuedSaleTotal']]
            // product cost total (issuedCostTotal)
            itemProductSubAggs.productCostTotal = [sum:[field:'issuances.issuedCostTotal']]
            // product quantity total
            itemProductSubAggs.productQuantityTotal = [sum:[field:'quantity']]

            // total discounts (itemSaleTotal for discount itemTypeEnumId)
            List discountTypes = ['ItemDiscount', 'ItemPromptDiscount', 'ItemCouponCredit', 'ItemPromoDiscount', 'ItemFreeFills', 'ItemSlottingFees', 'ItemAdjAdvertising', 'ItemAdjJointAdv']
            itemSubAggsMap.ItemDiscount = [filter:[terms:[itemTypeEnumId:discountTypes]], aggs:[discountTotal:[sum:[field:'itemSaleTotal']]]]

            // do the invoice item search
            String itemIdx = org.moqui.impl.context.ElasticFacadeImpl.ddIdToEsIndex((String) itemDocumentType)
            Map itemResultMap = elasticClient.search(itemIdx, [query:queryMap, aggs:itemAggsMap])
            Map itemAggregationsMap = (Map) itemResultMap.aggregations

            // make list for invoice details
            Map<String, Map> invoiceTempMap = [:]
            for (Map bucket in (List<Map>) invAggregationsMap.TopTerms.buckets) {
                String customerClassId = (String) bucket.key
                BigDecimal invoiceTotal = bucket.invoiceTotal?.value as BigDecimal
                BigDecimal invoicePaymentsApplied = bucket.invoicePaymentsApplied?.value as BigDecimal
                invoiceTempMap.put(customerClassId, [customerClassId:customerClassId, invoiceCount:bucket.doc_count as BigDecimal,
                        invoiceTotal:invoiceTotal, invoicePaymentsApplied:invoicePaymentsApplied,
                        paidPercent:(invoiceTotal ? (invoicePaymentsApplied/invoiceTotal) : 0.0)])
            }

            // prep the list from items first
            invoicesTotal = [classDescription:"Total"]
            for (Map bucket in (List<Map>) itemAggregationsMap.TopTerms.buckets) {
                String customerClassId = (String) bucket.key
                Map invoiceTemp = invoiceTempMap.get(customerClassId)
                if (!invoiceTemp) { invoiceTemp = [customerClassId:customerClassId]; invoiceTempMap.put(customerClassId, invoiceTemp) }
                def prodAgg = bucket.ItemProduct
                def discAgg = bucket.ItemDiscount
                BigDecimal invoiceIdCount = bucket.invoiceIdCount?.value as BigDecimal
                BigDecimal invoiceCount = (BigDecimal) invoiceTemp?.invoiceCount ?: invoiceIdCount
                BigDecimal productSaleTotal = prodAgg.productSaleTotal?.value as BigDecimal
                BigDecimal productIssuedTotal = prodAgg.productIssuedTotal?.value as BigDecimal
                BigDecimal productCostTotal = prodAgg.productCostTotal?.value as BigDecimal
                BigDecimal discountTotal = discAgg.discountTotal?.value as BigDecimal
                Map curLine = [invoiceCount:invoiceCount, invoiceIdCount:invoiceIdCount,
                        totalSales:bucket.totalSales?.value as BigDecimal,
                        productSaleTotal:productSaleTotal, productIssuedTotal:productIssuedTotal, productCostTotal:productCostTotal,
                        productQuantityTotal:prodAgg.productQuantityTotal?.value as BigDecimal,
                        discountTotal:discountTotal, netSales:(productSaleTotal + discountTotal),
                        discountPercent:(productSaleTotal ? (-discountTotal/productSaleTotal) : 0.0),
                        costPercent:(productIssuedTotal ? (productCostTotal/productIssuedTotal) : 0.0)]
                invoiceTemp.putAll(curLine)
                addBigDecimalsInMap(invoicesTotal, invoiceTemp)
            }

            topCustomerClassList = new ArrayList(invoiceTempMap.values())
            orderMapList(topCustomerClassList, [orderByField])
            for (Map classLine in topCustomerClassList) {
                String customerClassId = classLine.customerClassId
                classLine.classDescription = ec.entity.find("mantle.party.PartyClassification").condition("partyClassificationId", customerClassId)
                        .one()?.get("description")
            }

            invoicesTotal.paidPercent = null
            invoicesTotal.discountPercent = null
            invoicesTotal.costPercent = null

            topCustomerClassList.add(invoicesTotal)]]></script></actions></service>