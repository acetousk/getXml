<!--Service Location mantle.account.FinancialAccountServices.reverse#FinancialAccountTrans--><service verb="reverse" noun="FinancialAccountTrans"><in-parameters><parameter name="finAccountTransId" entity-name="mantle.account.financial.FinancialAccountTrans" field-name="finAccountTransId"/></in-parameters><out-parameters><parameter name="finAccountTransId" entity-name="mantle.account.financial.FinancialAccountTrans" field-name="finAccountTransId"/></out-parameters><actions><entity-find-one entity-name="mantle.account.financial.FinancialAccountTrans" value-field="faTrans" for-update="true"/><if condition="faTrans.reversedByTransId"><return error="true" message="Not reversing transaction ${finAccountTransId}, already reversed by transaction ${faTrans.reversedByTransId}"/></if><set field="finAccountId" from="faTrans.finAccountId"/><entity-find-one entity-name="mantle.account.financial.FinancialAccount" value-field="financialAccount" for-update="true"/><set field="preBalance" from="financialAccount.actualBalance ?: 0.0"/><set field="reverseMap" from="[finAccountId:faTrans.finAccountId, reasonEnumId:faTrans.reasonEnumId,                     toPartyId:faTrans.fromPartyId, fromPartyId:faTrans.toPartyId, transactionDate:faTrans.transactionDate,                     entryDate:ec.user.nowTimestamp, amount:(-faTrans.amount),                     paymentId:faTrans.paymentId, invoiceId:faTrans.invoiceId, orderId:faTrans.orderId, orderItemSeqId:faTrans.orderItemSeqId,                     performedByUserId:ec.user.userId]"/><set field="reverseMap.reverseOfTransId" from="finAccountTransId"/><set field="reverseMap.finAccountTransTypeEnumId" from="faTrans.finAccountTransTypeEnumId == 'FattDeposit' ? 'FattWithdraw' :                     (faTrans.finAccountTransTypeEnumId == 'FattWithdraw' ? 'FattDeposit' : faTrans.finAccountTransTypeEnumId)"/><service-call name="create#mantle.account.financial.FinancialAccountTrans" in-map="reverseMap" out-map="[finAccountTransId:revOut.finAccountTransId,finAccountTransTypeEnumId:revOut.finAccountTransTypeEnumId,finAccountId:revOut.finAccountId,finAccountAuthId:revOut.finAccountAuthId,fromPartyId:revOut.fromPartyId,toPartyId:revOut.toPartyId,glReconciliationId:revOut.glReconciliationId,reasonEnumId:revOut.reasonEnumId,transactionDate:revOut.transactionDate,entryDate:revOut.entryDate,amount:revOut.amount,postBalance:revOut.postBalance,paymentId:revOut.paymentId,invoiceId:revOut.invoiceId,invoiceItemSeqId:revOut.invoiceItemSeqId,orderId:revOut.orderId,orderItemSeqId:revOut.orderItemSeqId,otherFinAccountTransId:revOut.otherFinAccountTransId,performedByUserId:revOut.performedByUserId,acctgTransResultEnumId:revOut.acctgTransResultEnumId,reversedByTransId:revOut.reversedByTransId,reverseOfTransId:revOut.reverseOfTransId,comments:revOut.comments,externalId:revOut.externalId,lastUpdatedStamp:revOut.lastUpdatedStamp]"/><set field="reverseTransId" from="revOut.finAccountTransId"/><set field="faTrans.reversedByTransId" from="reverseTransId"/><entity-update value-field="faTrans"/><service-call name="mantle.account.FinancialAccountServices.calculate#FinancialAccountTotals" in-map="[finAccountId:finAccountId]" out-map="[currencyUomId:totalsOut.currencyUomId,actualBalance:totalsOut.actualBalance,authBalance:totalsOut.authBalance,availableBalance:totalsOut.availableBalance]"/><set field="postBalance" from="totalsOut.actualBalance"/><set field="differAmount" from="postBalance - preBalance"/><if condition="differAmount != reverseMap.amount"><return error="true" message="Error withdrawing from financial account ${ec.resource.expand('FinancialAccountNameTemplate','',financialAccount)}, pre balance ${preBalance} and post balance ${postBalance} differ by ${differAmount} and not by transaction amount ${reverseMap.amount}"/></if><set field="finAccountTransId" from="reverseTransId"/></actions></service>