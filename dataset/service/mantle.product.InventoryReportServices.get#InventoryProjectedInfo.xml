<!--Service Location mantle.product.InventoryReportServices.get#InventoryProjectedInfo--><service verb="get" noun="InventoryProjectedInfo"><in-parameters><parameter name="productIdList" type="List" required="true"/><parameter name="facilityId"/><parameter name="estThruDate" type="Timestamp"><description><![CDATA[Limits order item by requiredByDate, run
                consume/produce by estimatedStartDate, production estimate by readyDate. Allows requiredByDate
                and estimatedStartDate to be null (missing).]]></description></parameter><parameter name="maxResults" type="Integer" default="1000"/><parameter name="indexName" default-value="mantle_inventory"/><parameter name="getAssetData" type="Boolean" default="true"/><parameter name="assetDocumentName" default-value="MantleInventoryAsset"/><parameter name="getOrderItemData" type="Boolean" default="true"/><parameter name="orderItemDocumentName" default-value="MantleInventoryOrderItem"/><parameter name="getRunConsumeData" type="Boolean" default="true"/><parameter name="runConsumeDocumentName" default-value="MantleInventoryRunConsume"/><parameter name="getRunProduceData" type="Boolean" default="true"/><parameter name="runProduceDocumentName" default-value="MantleInventoryRunProduce"/><parameter name="getProdEstimateData" type="Boolean" default="true"/><parameter name="prodEstimateDocumentName" default-value="MantleInventoryProdEstimate"/></in-parameters><out-parameters><parameter name="infoByProductId" type="Map"><description><![CDATA[A Map where the key is a productId and the value
                is a Map with: orderQuantitySum, quantityReservedSum, quantityNotAvailableSum, quantityNotIssuedSum,
                orderNotReserved, prodEstQuantitySum, availableToPromiseTotalSum, quantityOnHandTotalSum,
                estimatedConsumeQuantitySum, consumeQuantitySum, estimatedProduceQuantitySum, produceQuantitySum,
                estRunConsumeRemaining, estRunProduceRemaining, and totalProjected.

                The totalProjected value = availableToPromiseTotalSum - orderNotReserved -
                    estRunConsumeRemaining + estRunProduceRemaining + prodEstQuantitySum]]></description></parameter></out-parameters><actions><script><![CDATA[import org.moqui.elasticsearch.ElasticSearchUtil

            String estThruDateStr = estThruDate ? (estThruDate.getTime() as String) : null
            // consolidate the results into a single Map by productId
            infoByProductId = [:] as Map<String, Map>

            if (getOrderItemData) {
                List andList = [[terms:[productId: productIdList]],
                                [bool:[must_not:[terms:[partStatusId: ['OrderCompleted', 'OrderRejected', 'OrderCancelled']]]]]]
                if (facilityId) andList.add([term: [facilityId: facilityId]])
                if (estThruDateStr) andList.add([or: [[missing: [field: 'requiredByDate']],
                                                      [range: [requiredByDate: [lte: estThruDateStr, format: 'epoch_millis']]]]])

                ElasticSearchUtil.simpleAggSearch((String) indexName, [(String) orderItemDocumentName], maxResults,
                        [bool:[filter:andList]], "productId",
                        [orderQuantitySum:'orderQuantity', quantityReservedSum:'reservations.quantityReserved',
                              quantityNotAvailableSum:'reservations.quantityNotAvailable', quantityNotIssuedSum:'reservations.quantityNotIssued'],
                        infoByProductId, ec)
            }

            if (getProdEstimateData) {
                List andList = [[terms:[productId:productIdList]], [range:[readyDate:[gte:'now/d', lte:estThruDateStr, format:'epoch_millis']]]]
                if (facilityId) andList.add([term:[facilityId:facilityId]])

                ElasticSearchUtil.simpleAggSearch((String) indexName, [(String) prodEstimateDocumentName], maxResults,
                        [bool:[filter:andList]], "productId", [prodEstQuantitySum:'prodEstQuantity'],
                        infoByProductId, ec)
            }

            if (getAssetData) {
                List andList = [[terms:[productId:productIdList]], [term:[statusId:'AstAvailable']]]
                if (facilityId) andList.add([term:[facilityId:facilityId]])

                ElasticSearchUtil.simpleAggSearch((String) indexName, [(String) assetDocumentName], maxResults,
                        [bool:[filter:andList]], "productId",
                        [availableToPromiseTotalSum:'availableToPromiseTotal', quantityOnHandTotalSum:'quantityOnHandTotal'],
                        infoByProductId, ec)
            }

            if (getRunConsumeData) {
                List andList = [[terms:[productId:productIdList]], [bool:[must_not:[terms:[statusId:['WeComplete','WeClosed','WeCancelled']]]]]]
                if (facilityId) andList.add([term: [facilityId:facilityId]])
                if (estThruDateStr) andList.add([or: [[missing:[field:'estimatedStartDate']],
                                                      [range:[estimatedStartDate:[lte:estThruDateStr, format:'epoch_millis']]]]])

                ElasticSearchUtil.simpleAggSearch((String) indexName, [(String) runConsumeDocumentName], maxResults,
                        [bool:[filter:andList]], "productId",
                        [estimatedConsumeQuantitySum:'estimatedConsumeQuantity', consumeQuantitySum:'issuances.consumeQuantity'],
                        infoByProductId, ec)
            }

            if (getRunProduceData) {
                List andList = [[terms:[productId:productIdList]], [bool:[must_not:[terms:[statusId:['WeComplete','WeClosed','WeCancelled']]]]]]
                if (facilityId) andList.add([term:[facilityId:facilityId]])
                if (estThruDateStr) andList.add([or: [[missing:[field:'estimatedStartDate']],
                                                      [range:[estimatedStartDate:[lte:estThruDateStr, format:'epoch_millis']]]]])

                ElasticSearchUtil.simpleAggSearch((String) indexName, [(String) runProduceDocumentName], maxResults,
                        [bool:[filter:andList]], "productId",
                        [estimatedProduceQuantitySum:'estimatedProduceQuantity', produceQuantitySum:'receipts.produceQuantity'],
                        infoByProductId, ec)
            }

            // set zero defaults, calculate totals
            for (Map infoMap in infoByProductId.values()) {
                // default all values to 0
                if (infoMap.orderQuantitySum == null) infoMap.orderQuantitySum = 0
                if (infoMap.quantityReservedSum == null) infoMap.quantityReservedSum = 0
                if (infoMap.quantityNotAvailableSum == null) infoMap.quantityNotAvailableSum = 0
                if (infoMap.quantityNotIssuedSum == null) infoMap.quantityNotIssuedSum = 0

                if (infoMap.prodEstQuantitySum == null) infoMap.prodEstQuantitySum = 0
                if (infoMap.availableToPromiseTotalSum == null) infoMap.availableToPromiseTotalSum = 0
                if (infoMap.quantityOnHandTotalSum == null) infoMap.quantityOnHandTotalSum = 0

                if (infoMap.estimatedConsumeQuantitySum == null) infoMap.estimatedConsumeQuantitySum = 0
                if (infoMap.consumeQuantitySum == null) infoMap.consumeQuantitySum = 0
                if (infoMap.estimatedProduceQuantitySum == null) infoMap.estimatedProduceQuantitySum = 0
                if (infoMap.produceQuantitySum == null) infoMap.produceQuantitySum = 0

                infoMap.orderNotReserved = infoMap.orderQuantitySum - infoMap.quantityReservedSum
                infoMap.estRunConsumeRemaining = infoMap.estimatedConsumeQuantitySum - infoMap.consumeQuantitySum
                if (infoMap.estRunConsumeRemaining < 0) infoMap.estRunConsumeRemaining = 0
                infoMap.estRunProduceRemaining = infoMap.estimatedProduceQuantitySum - infoMap.produceQuantitySum
                if (infoMap.estRunProduceRemaining < 0) infoMap.estRunProduceRemaining = 0

                infoMap.totalProjected = infoMap.availableToPromiseTotalSum - infoMap.orderNotReserved -
                        infoMap.estRunConsumeRemaining + infoMap.estRunProduceRemaining + infoMap.prodEstQuantitySum
            }]]></script></actions></service>