<!--Service Location mantle.humanres.PayrollDocumentServices.create#PeriodWageAndTaxRecords--><service verb="create" noun="PeriodWageAndTaxRecords"><in-parameters><parameter name="timePeriodId" required="true"><description><![CDATA[Should be a period for a Tax Year/Quarter/etc]]></description></parameter><parameter name="defaultTaxFormId" default-value="UsaIrsW2"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/><if condition="timePeriod.isClosed == 'Y'"><message error="true"><![CDATA[Not creating wage and text records for period ${ec.resource.expand('TimePeriodNameTemplate','',timePeriod)}, already closed.]]></message></if><service-call name="mantle.humanres.PayrollServices.get#TimePeriodEmployments" in-map="[timePeriodId:timePeriodId, ignoreType:true]" out-map="[employmentList:context.employmentList,timePeriod:context.timePeriod]"/><iterate list="employmentList" entry="employment"><entity-find-one entity-name="mantle.humanres.employment.Employee" value-field="employee"><field-map field-name="partyId" from="employment.fromPartyId"/></entity-find-one><entity-find-one entity-name="mantle.humanres.position.EmplPosition" value-field="emplPosition"><field-map field-name="emplPositionId" from="employment.emplPositionId"/></entity-find-one><set field="curTaxFormId" from="employment.taxFormId ?: employee.taxFormId ?: emplPosition.taxFormId ?: defaultTaxFormId"/><if condition="curTaxFormId == 'UsaIrsW2'"><entity-find-one entity-name="mantle.party.PartyIdentification" value-field="employeeSsnPi"><field-map field-name="partyId" from="employment.fromPartyId"/><field-map field-name="partyIdTypeEnumId" value="PtidSsn"/></entity-find-one><if condition="!employeeSsnPi?.idValue"><set field="curTaxFormId" value="UsaIrs1099Misc"/></if></if><if condition="curTaxFormId == 'UsaIrs1099Misc'"><then><service-call name="mantle.humanres.PayrollDocumentServices.get#UsaIrs1099MiscFormData" out-map="[timePeriod:formOut.timePeriod,employment:formOut.employment,employeeFirstName:formOut.employeeFirstName,employeeMiddleName:formOut.employeeMiddleName,employeeLastName:formOut.employeeLastName,employeeSuffix:formOut.employeeSuffix,employeeSsn:formOut.employeeSsn,employeeHomeContactInfo:formOut.employeeHomeContactInfo,employeeHomeStreetString:formOut.employeeHomeStreetString,employeeHomeCszString:formOut.employeeHomeCszString,employeeHomeString:formOut.employeeHomeString,employerName:formOut.employerName,employerEin:formOut.employerEin,employerContactInfo:formOut.employerContactInfo,employerAddressString:formOut.employerAddressString,employerPhoneString:formOut.employerPhoneString,taxablePayAmount:formOut.taxablePayAmount,socialTaxablePayAmount:formOut.socialTaxablePayAmount,medicalTaxablePayAmount:formOut.medicalTaxablePayAmount,currencyUomId:formOut.currencyUomId,hasAnyPay:formOut.hasAnyPay,wageAndTaxInfoByTaxAuthorityId:formOut.wageAndTaxInfoByTaxAuthorityId,federalTaxAuthorityIdList:formOut.federalTaxAuthorityIdList,stateTaxAuthorityIdList:formOut.stateTaxAuthorityIdList,localTaxAuthorityIdList:formOut.localTaxAuthorityIdList,federalTaxAuthorityId:formOut.federalTaxAuthorityId,formId:formOut.formId,formMap:formOut.formMap]" out-map-add-to-existing="false" in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/></then><else-if condition="curTaxFormId == 'UsaIrsW2'"><service-call name="mantle.humanres.PayrollDocumentServices.get#UsaIrsW2FormData" out-map="[timePeriod:formOut.timePeriod,employment:formOut.employment,employeeFirstName:formOut.employeeFirstName,employeeMiddleName:formOut.employeeMiddleName,employeeLastName:formOut.employeeLastName,employeeSuffix:formOut.employeeSuffix,employeeSsn:formOut.employeeSsn,employeeHomeContactInfo:formOut.employeeHomeContactInfo,employeeHomeStreetString:formOut.employeeHomeStreetString,employeeHomeCszString:formOut.employeeHomeCszString,employeeHomeString:formOut.employeeHomeString,employerName:formOut.employerName,employerEin:formOut.employerEin,employerContactInfo:formOut.employerContactInfo,employerAddressString:formOut.employerAddressString,employerPhoneString:formOut.employerPhoneString,taxablePayAmount:formOut.taxablePayAmount,socialTaxablePayAmount:formOut.socialTaxablePayAmount,medicalTaxablePayAmount:formOut.medicalTaxablePayAmount,currencyUomId:formOut.currencyUomId,hasAnyPay:formOut.hasAnyPay,wageAndTaxInfoByTaxAuthorityId:formOut.wageAndTaxInfoByTaxAuthorityId,federalTaxAuthorityIdList:formOut.federalTaxAuthorityIdList,stateTaxAuthorityIdList:formOut.stateTaxAuthorityIdList,localTaxAuthorityIdList:formOut.localTaxAuthorityIdList,federalTaxAuthorityId:formOut.federalTaxAuthorityId,formId:formOut.formId,formMap:formOut.formMap]" out-map-add-to-existing="false" in-map="[timePeriodId:timePeriodId, partyRelationshipId:employment.partyRelationshipId]"/></else-if><else><message><![CDATA[Not creating wage and tax statement for employee ${employment.fromPartyId} employment ${employment.partyRelationshipId}, no tax form set]]></message><continue/></else></if><if condition="!formOut.hasAnyPay"><message><![CDATA[Not creating wage and tax statement for employee ${employment.fromPartyId} employment ${employment.partyRelationshipId}, has no pay]]></message><continue/></if><service-call name="org.moqui.impl.ScreenServices.create#FormResponse" out-map="[formResponseId:responseOut.formResponseId]" out-map-add-to-existing="false" in-map="[formId:formOut.formId, responseMap:formOut.formMap]"/><service-call name="create#mantle.other.tax.TaxStatement" in-map="[timePeriodId:timePeriodId, partyId:employment.fromPartyId,                             partyRelationshipId:employment.partyRelationshipId, taxAuthorityId:formOut.federalTaxAuthorityId,                             formId:formOut.formId, formResponseId:responseOut.formResponseId]"/></iterate><set field="timePeriod.isClosed" value="Y"/><entity-update value-field="timePeriod"/></actions></service>