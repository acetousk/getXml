<!--Service Location mantle.shipment.ShipmentServices.pickMove#ProductToContainer--><service verb="pickMove" noun="ProductToContainer"><in-parameters><parameter name="scanProduct" required="true"><description><![CDATA[May be Product.productId, Product.pseudoId, Asset.assetId, ProductIdentification.idValue (for Product on Shipment)]]></description></parameter><parameter name="toContainerId" required="true"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="shipmentId"/><parameter name="locationSeqId"><description><![CDATA[Specify either location or container, if neither specified will look for assets with no location]]></description></parameter><parameter name="containerId"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="scanLocation"><description><![CDATA[May be locationSeqId within facility, containerId, or container serialNumber]]></description></parameter><parameter name="quantity" type="BigDecimal" default="1.0"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.product.asset.Container" value-field="toContainer"><field-map field-name="containerId" from="toContainerId"/></entity-find-one><if condition="toContainer == null"><entity-find-one entity-name="mantle.product.asset.Container" value-field="toContainer"><field-map field-name="serialNumber" from="toContainerId"/></entity-find-one><if condition="toContainer != null"><then><set field="toContainerId" from="toContainer.containerId"/></then><else><return error="true" message="Container not found with ID or Serial Number ${toContainerId}"/></else></if></if><if condition="shipmentId"><then><service-call name="mantle.shipment.ShipmentServices.pickMove#ShipmentProduct" in-map="context" out-map="[quantityPicked:context.quantityPicked]"/></then><else><entity-find entity-name="mantle.shipment.Shipment" list="containerShipmentList"><econdition field-name="pickContainerId" from="toContainerId"/><econdition field-name="statusId" operator="in" value="ShipInput,ShipScheduled"/><select-field field-name="shipmentId"/></entity-find><if condition="containerShipmentList.size() == 0"><then><return error="true" message="No unpicked Shipment (Input or Scheduled) found assigned to Container ${toContainerId}"/></then><else-if condition="containerShipmentList.size() == 1"><set field="shipmentId" from="containerShipmentList[0].shipmentId"/><service-call name="mantle.shipment.ShipmentServices.pickMove#ShipmentProduct" in-map="context" out-map="[quantityPicked:context.quantityPicked]"/></else-if><else><set field="quantityToPick" from="quantity"/><iterate list="containerShipmentList" entry="containerShipment"><if condition="quantityToPick == 0.0"><break/></if><service-call name="mantle.shipment.ShipmentServices.pickMove#ShipmentProduct" in-map="context + [shipmentId:containerShipment.shipmentId, quantity:quantityToPick, insufficientQtyWarn:false]" out-map="[quantityPicked:pickMoveOut.quantityPicked]" out-map-add-to-existing="false"/><set field="quantityToPick" from="quantityToPick - (pickMoveOut.quantityPicked ?: 0.0)"/></iterate><if condition="quantityToPick > 0.0"><message type="danger"><![CDATA[Only ${(quantity - quantityToPick).toPlainString()} found to pick out of the ${quantity.toPlainString()} requested, ${quantityToPick.toPlainString()} should be returned to the shelf]]></message></if></else></if></else></if></actions></service>