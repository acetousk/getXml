<!--Service Location mantle.product.AssetServices.move#Asset--><service verb="move" noun="Asset"><in-parameters><parameter name="assetId" required="true" entity-name="mantle.product.asset.Asset" field-name="assetId"/><parameter name="facilityId" entity-name="mantle.product.asset.Asset" field-name="facilityId"><description><![CDATA[Defaults to current facilityId]]></description></parameter><parameter name="locationSeqId" entity-name="mantle.product.asset.Asset" field-name="locationSeqId"/><parameter name="assetPoolId" entity-name="mantle.product.asset.Asset" field-name="assetPoolId"/><parameter name="containerId" entity-name="mantle.product.asset.Asset" field-name="containerId"><description><![CDATA[May be actual containerId or serialNumber]]></description></parameter><parameter name="scanLocation"><description><![CDATA[May be locationSeqId within facility, containerId, or container serialNumber]]></description></parameter><parameter name="quantity" type="BigDecimal"><description><![CDATA[Defaults to quantityOnHandTotal if hasQuantity, if not specified move entire Asset]]></description></parameter><parameter name="forceNewAsset" type="Boolean" default="false"><description><![CDATA[If true create a new Asset record for the move rather than updating the existing Asset record even if moving full quantity on hand to the same facility.]]></description></parameter><parameter name="moveAssetReservationId"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="mantle.product.asset.Asset" value-field="asset" for-update="true"/><if condition="asset == null"><message error="true"><![CDATA[No asset found for ID ${assetId}]]></message></if><if condition="!facilityId"><set field="facilityId" from="asset.facilityId"/></if><service-call name="mantle.product.AssetServices.check#ScanLocation" in-map="context" out-map="[facilityId:context.facilityId,locationSeqId:context.locationSeqId,checkFacLoc:context.checkFacLoc,containerId:context.containerId,container:context.container]"/><if condition="!containerId && asset.containerId"><set field="asset.containerId" from="null"/><entity-update value-field="asset"/></if><set field="facLoc" from="asset.location"/><if condition="!locationSeqId"><entity-find-one entity-name="mantle.facility.Facility" value-field="facility"><field-map field-name="facilityId"/></entity-find-one><if condition="facility?.assetInventoryLocRequire == 'Y' && asset.assetTypeEnumId == 'AstTpInventory'"><return error="true" message="No location specified, facility ${ec.resource.expand('FacilityNameTemplate', '', facility)} requires a location for inventory"/></if></if><if condition="checkFacLoc?.locationTypeEnumId"><entity-find-one entity-name="mantle.facility.FacilityLocationType" value-field="facLocType"><field-map field-name="facilityId"/><field-map field-name="locationTypeEnumId" from="checkFacLoc.locationTypeEnumId"/></entity-find-one><set field="autoStatusId" from="facLocType?.autoStatusId"/></if><if condition="!quantity"><set field="quantity" from="asset.quantityOnHandTotal"/></if><if condition="quantity > asset.quantityOnHandTotal"><return error="true" message="Move quantity ${quantity?.toPlainString()} is greater than on hand quantity ${asset.quantityOnHandTotal?.toPlainString()}"/></if><if condition="(quantity > asset.availableToPromiseTotal) && !moveAssetReservationId"><message type="warning"><![CDATA[Move quantity ${quantity?.toPlainString()} is greater than available quantity ${asset.availableToPromiseTotal?.toPlainString()}]]></message></if><if condition="forceNewAsset || (quantity && quantity < asset.quantityOnHandTotal) ||                     (facilityId && facilityId != asset.facilityId) || (assetPoolId != asset.assetPoolId)"><then><set field="newStatusId" from="autoStatusId ?: asset.statusId"/><if condition="!forceNewAsset"><entity-find entity-name="mantle.product.asset.Asset" list="existingAssetList"><econdition field-name="assetId" operator="not-equals" from="asset.assetId"/><econdition field-name="productId" from="asset.productId"/><econdition field-name="ownerPartyId" from="asset.ownerPartyId"/><econdition field-name="statusId" from="newStatusId"/><econdition field-name="assetPoolId"/><econdition field-name="facilityId"/><econdition field-name="locationSeqId"/><econdition field-name="containerId"/><econdition field-name="lotId" from="asset.lotId"/><econdition field-name="receivedDate" from="asset.receivedDate"/><econdition field-name="expectedEndOfLife" from="asset.expectedEndOfLife"/><order-by field-name="assetId"/></entity-find></if><if condition="existingAssetList"><then><set field="newAssetId" from="existingAssetList[0].assetId"/></then><else><service-call name="create#mantle.product.asset.Asset" out-map="[assetId:newAssetOut.assetId,parentAssetId:newAssetOut.parentAssetId,assetTypeEnumId:newAssetOut.assetTypeEnumId,classEnumId:newAssetOut.classEnumId,statusId:newAssetOut.statusId,ownerPartyId:newAssetOut.ownerPartyId,assetPoolId:newAssetOut.assetPoolId,productId:newAssetOut.productId,hasQuantity:newAssetOut.hasQuantity,quantityOnHandTotal:newAssetOut.quantityOnHandTotal,availableToPromiseTotal:newAssetOut.availableToPromiseTotal,originalQuantity:newAssetOut.originalQuantity,originalQuantityUomId:newAssetOut.originalQuantityUomId,assetName:newAssetOut.assetName,comments:newAssetOut.comments,serialNumber:newAssetOut.serialNumber,softIdentifier:newAssetOut.softIdentifier,activationNumber:newAssetOut.activationNumber,activationValidThru:newAssetOut.activationValidThru,receivedDate:newAssetOut.receivedDate,acquiredDate:newAssetOut.acquiredDate,manufacturedDate:newAssetOut.manufacturedDate,expectedEndOfLife:newAssetOut.expectedEndOfLife,actualEndOfLife:newAssetOut.actualEndOfLife,capacity:newAssetOut.capacity,capacityUomId:newAssetOut.capacityUomId,facilityId:newAssetOut.facilityId,locationSeqId:newAssetOut.locationSeqId,containerId:newAssetOut.containerId,shipmentBoxTypeId:newAssetOut.shipmentBoxTypeId,lotId:newAssetOut.lotId,geoPointId:newAssetOut.geoPointId,originId:newAssetOut.originId,originFacilityId:newAssetOut.originFacilityId,acquireOrderId:newAssetOut.acquireOrderId,acquireOrderItemSeqId:newAssetOut.acquireOrderItemSeqId,acquireWorkEffortId:newAssetOut.acquireWorkEffortId,acquireShipmentId:newAssetOut.acquireShipmentId,acquireCost:newAssetOut.acquireCost,acquireCostUomId:newAssetOut.acquireCostUomId,salvageValue:newAssetOut.salvageValue,depreciation:newAssetOut.depreciation,depreciationTypeEnumId:newAssetOut.depreciationTypeEnumId,yearBeginDepreciation:newAssetOut.yearBeginDepreciation,taxDepreciation:newAssetOut.taxDepreciation,taxDepreciationTypeEnumId:newAssetOut.taxDepreciationTypeEnumId,lastUpdatedStamp:newAssetOut.lastUpdatedStamp]" in-map="asset.getMap() + [assetId:null, facilityId:facilityId, locationSeqId:locationSeqId,                                 containerId:containerId, quantityOnHandTotal:0, availableToPromiseTotal:0,                                 statusId:newStatusId, assetPoolId:assetPoolId]"/><set field="newAssetId" from="newAssetOut.assetId"/></else></if><service-call name="create#mantle.product.asset.AssetDetail" out-map="[assetDetailId:context.assetDetailId,assetId:context.assetId,effectiveDate:context.effectiveDate,quantityOnHandDiff:context.quantityOnHandDiff,availableToPromiseDiff:context.availableToPromiseDiff,unitCost:context.unitCost,assetReservationId:context.assetReservationId,otherAssetId:context.otherAssetId,shipmentId:context.shipmentId,productId:context.productId,orderId:context.orderId,orderItemSeqId:context.orderItemSeqId,returnId:context.returnId,returnItemSeqId:context.returnItemSeqId,workEffortId:context.workEffortId,assetMaintenanceId:context.assetMaintenanceId,assetIssuanceId:context.assetIssuanceId,assetReceiptId:context.assetReceiptId,physicalInventoryId:context.physicalInventoryId,physicalInventoryCountId:context.physicalInventoryCountId,varianceReasonEnumId:context.varianceReasonEnumId,description:context.description,acctgTransResultEnumId:context.acctgTransResultEnumId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[assetId:newAssetId, effectiveDate:ec.user.nowTimestamp, quantityOnHandDiff:quantity,                                  availableToPromiseDiff:quantity, productId:productId, otherAssetId:assetId]"/><if condition="moveAssetReservationId"><then><service-call name="mantle.product.AssetServices.move#AssetReservation" out-map="[quantityMoved:moveArOut.quantityMoved]" in-map="[assetId:newAssetId, assetReservationId:moveAssetReservationId, quantity:quantity]"/></then><else><set field="atpToMoveTotal" from="null"/><if condition="quantity > asset.availableToPromiseTotal"><set field="atpToMoveTotal" from="quantity - asset.availableToPromiseTotal"/></if><if condition="checkFacLoc?.locationTypeEnumId == 'FltPick' && facLoc?.locationTypeEnumId != 'FltPick'"><set field="atpToMoveTotal" from="quantity"/></if><if condition="atpToMoveTotal"><set field="availableRemaining" from="atpToMoveTotal"/><entity-find entity-name="mantle.product.issuance.AssetReservation" list="resList"><econdition field-name="assetId"/><order-by field-name="reservedDate"/></entity-find><iterate list="resList" entry="res"><if condition="availableRemaining == 0"><break/></if><set field="quantityToMove" from="availableRemaining < res.quantity ? availableRemaining : res.quantity"/><if condition="quantityToMove == 0"><continue/></if><if condition="quantityToMove > res.quantityNotIssued"><set field="quantityToMove" from="res.quantityNotIssued"/></if><if condition="quantityToMove > 0"><service-call name="mantle.product.AssetServices.move#AssetReservation" out-map="[quantityMoved:moveArOut.quantityMoved]" out-map-add-to-existing="false" in-map="[assetId:newAssetId, assetReservationId:res.assetReservationId, quantity:quantityToMove]"/><set field="availableRemaining" from="availableRemaining - moveArOut.quantityMoved"/></if></iterate></if></else></if><service-call name="create#mantle.product.asset.AssetDetail" out-map="[assetDetailId:context.assetDetailId,assetId:context.assetId,effectiveDate:context.effectiveDate,quantityOnHandDiff:context.quantityOnHandDiff,availableToPromiseDiff:context.availableToPromiseDiff,unitCost:context.unitCost,assetReservationId:context.assetReservationId,otherAssetId:context.otherAssetId,shipmentId:context.shipmentId,productId:context.productId,orderId:context.orderId,orderItemSeqId:context.orderItemSeqId,returnId:context.returnId,returnItemSeqId:context.returnItemSeqId,workEffortId:context.workEffortId,assetMaintenanceId:context.assetMaintenanceId,assetIssuanceId:context.assetIssuanceId,assetReceiptId:context.assetReceiptId,physicalInventoryId:context.physicalInventoryId,physicalInventoryCountId:context.physicalInventoryCountId,varianceReasonEnumId:context.varianceReasonEnumId,description:context.description,acctgTransResultEnumId:context.acctgTransResultEnumId,lastUpdatedStamp:context.lastUpdatedStamp]" in-map="[assetId:assetId, effectiveDate:ec.user.nowTimestamp, quantityOnHandDiff:-quantity,                                  availableToPromiseDiff:-quantity, productId:productId, otherAssetId:newAssetId]"/></then><else><if condition="autoStatusId"><if condition="asset.statusId && asset.statusId != autoStatusId"><entity-find-count entity-name="moqui.basic.StatusFlowTransition" count-field="transitionCount"><econdition field-name="statusId" from="asset.statusId"/><econdition field-name="toStatusId" from="autoStatusId"/></entity-find-count><if condition="transitionCount == 0"><return error="true" message="Cannot move asset ${assetId} with status ${asset.statusId} to target location ${locationSeqId} of type ${checkFacLoc?.locationTypeEnumId} with auto status ${autoStatusId}"/></if></if><set field="statusId" from="autoStatusId"/></if><service-call name="update#mantle.product.asset.Asset" in-map="context"/><set field="newAssetId" from="assetId"/></else></if><entity-find-one entity-name="mantle.product.asset.Asset" value-field="newAsset"><field-map field-name="assetId" from="newAssetId"/></entity-find-one><if condition="asset.assetPoolId != newAsset.assetPoolId || asset.facilityId != newAsset.facilityId"><service-call name="mantle.product.AssetServices.check#AssetReservations" in-map="[assetId:newAsset.assetId]"/></if><if condition="checkFacLoc?.locationTypeEnumId == 'FltPick' && newAsset.availableToPromiseTotal > 0.0"><service-call name="mantle.product.AssetServices.move#ReservationsFromNonPickLocations" in-map="[assetId:newAsset.assetId]"/></if><set field="newFacLoc" from="newAsset.location"/><message><![CDATA[Moved ${quantity?.toPlainString()} from Asset ${ec.resource.expand('AssetNameTemplate', '', asset)} from ${ec.resource.expand('FacilityLocationNameTemplate', '', facLoc?:[:])} to Asset ${newAssetId ?: asset.assetId} ${ec.resource.expand('FacilityLocationNameTemplate', '', newFacLoc?:[:])}${container ? ' in container ' + (container.serialNumber ?: container.description ?: containerId) : ''}.]]></message></actions></service>