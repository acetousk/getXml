<!--Service Location mantle.ledger.LedgerServices.recalculate#GlAccountOrgSummaries--><service verb="recalculate" noun="GlAccountOrgSummaries"><in-parameters><parameter name="organizationPartyId"/><parameter name="lastRunTime" type="Timestamp"/><parameter name="recalculateClosed" type="Boolean" default="false"/><parameter name="deleteExisting" type="Boolean" default="false"/></in-parameters><out-parameters/><actions><set field="nowTimestamp" from="ec.user.nowTimestamp"/><set field="nowDate" from="new java.sql.Date(nowTimestamp.time)"/><set field="startTime" from="System.currentTimeMillis()"/><set field="gaoUpdated" from="0"/><set field="gaotpUpdated" from="0"/><entity-find entity-name="mantle.party.time.TimePeriodAndType" list="timePeriodList"><econdition field-name="fromDate" operator="less-equals" from="nowDate"/><econdition field-name="periodPurposeEnumId" value="Fiscal"/><econdition field-name="partyId" from="organizationPartyId" ignore-if-empty="true"/><econdition field-name="isClosed" value="N" or-null="true" ignore="recalculateClosed"/><order-by field-name="fromDate"/></entity-find><set field="organizationPartyIds" from="new HashSet(timePeriodList*.partyId)"/><set field="noTxOrgPartyIds" from="new HashSet()"/><set field="glAccountIsDebitMap" from="[:]"/><if condition="deleteExisting"><entity-find-count entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" count-field="glaotpCount"><econdition field-name="organizationPartyId" operator="in" from="organizationPartyIds"/></entity-find-count><log message="Before delete existing found ${glaotpCount} GlAccountOrgTimePeriod records for organizations ${organizationPartyIds}"/><entity-delete-by-condition entity-name="mantle.ledger.account.GlAccountOrgTimePeriod"><econdition field-name="organizationPartyId" operator="in" from="organizationPartyIds"/><econdition field-name="timePeriodId" operator="in" from="timePeriodList*.timePeriodId" ignore="recalculateClosed"/></entity-delete-by-condition><entity-find-count entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" count-field="glaotpCount"><econdition field-name="organizationPartyId" operator="in" from="organizationPartyIds"/></entity-find-count><log message="After delete existing found ${glaotpCount} GlAccountOrgTimePeriod records for organizations ${organizationPartyIds}"/></if><log message="[Recalculate GlAccountOrgSummaries] lastRunTime ${lastRunTime}, ${timePeriodList.size()} time periods, organizations: ${organizationPartyIds}"/><iterate list="organizationPartyIds" entry="organizationPartyId"><if condition="lastRunTime != null"><entity-find entity-name="mantle.ledger.transaction.AcctgTrans" list="latestTransList" limit="1"><econdition field-name="organizationPartyId"/><econdition field-name="isPosted" value="Y"/><econdition field-name="postedDate" operator="greater-equals" from="lastRunTime"/></entity-find><if condition="!latestTransList"><script><![CDATA[noTxOrgPartyIds.add(organizationPartyId)]]></script><continue/></if><log message="[Recalculate GlAccountOrgSummaries] org ${organizationPartyId} has tx posted ${latestTransList[0].postedDate} so recalculating summaries"/></if><entity-find entity-name="mantle.ledger.transaction.AcctgTransAndEntrySummary" list="transSummaryList"><econdition field-name="organizationPartyId"/><econdition field-name="isPosted" value="Y"/><select-field field-name="glAccountId,debitCreditFlag,amount"/><order-by field-name="glAccountId,debitCreditFlag"/></entity-find><script><![CDATA[transSummaryListSize = transSummaryList.size()
                    for (int i = 0; i < transSummaryListSize; i++) {
                        Map transSummary = transSummaryList.get(i)
                        String glAccountId = transSummary.glAccountId

                        String isDebit = (String) glAccountIsDebitMap.get(glAccountId)
                        if (!isDebit) {
                            Map glAccount = ec.entity.find("mantle.ledger.account.GlAccount").condition("glAccountId", glAccountId).useCache(true).one()
                            isDebit = glAccount.isDebit
                        }
                        boolean isDebitAccount = isDebit.equals('Y')

                        Map debitTransSummary = null
                        boolean isCredit = transSummary.debitCreditFlag == 'C'
                        if (isCredit && (i + 1) < transSummaryListSize) {
                            debitTransSummary = transSummaryList.get(i + 1)
                            if (debitTransSummary.debitCreditFlag == 'D' && debitTransSummary.glAccountId == glAccountId) {
                                i++
                            } else {
                                debitTransSummary = null
                            }
                        }

                        Map glAccountOrganization = ec.entity.find("mantle.ledger.account.GlAccountOrganization")
                                .condition("glAccountId", glAccountId).condition("organizationPartyId", organizationPartyId)
                                .forUpdate(true).one()
                        if (glAccountOrganization == null) {
                            glAccountOrganization = ec.entity.makeValue("mantle.ledger.account.GlAccountOrganization")
                            glAccountOrganization.put("glAccountId", glAccountId)
                            glAccountOrganization.put("organizationPartyId", organizationPartyId)
                            glAccountOrganization.create()
                        }

                        BigDecimal postedBalance = BigDecimal.ZERO
                        if (isCredit) {
                            // based on account type add/subtract credit
                            if (isDebitAccount) postedBalance -= transSummary.amount
                            else postedBalance += transSummary.amount
                            // if debitTransSummary != null based on account type subtract/add debit
                            if (debitTransSummary != null) {
                                if (isDebitAccount) postedBalance += debitTransSummary.amount
                                else postedBalance -= debitTransSummary.amount
                            }
                        } else {
                            // based on account type subtract/add debit
                            if (isDebitAccount) postedBalance += transSummary.amount
                            else postedBalance -= transSummary.amount
                        }

                        glAccountOrganization.put("postedBalance", postedBalance)
                        glAccountOrganization.put("balanceLastUpdated", nowTimestamp)
                        glAccountOrganization.update()
                        gaoUpdated++
                    }]]></script></iterate><iterate list="timePeriodList" entry="timePeriod"><if condition="noTxOrgPartyIds.contains(timePeriod.partyId)"><continue/></if><set field="timePeriodId" from="timePeriod.timePeriodId"/><set field="organizationPartyId" from="timePeriod.partyId"/><service-call name="mantle.party.TimeServices.get#TimePeriodInfo" in-map="[timePeriod:timePeriod]" out-map="[timePeriod:periodInfo.timePeriod,fromTimestamp:periodInfo.fromTimestamp,thruTimestamp:periodInfo.thruTimestamp,thruTimestampExclusive:periodInfo.thruTimestampExclusive,thruTimestampLate:periodInfo.thruTimestampLate]"/><set field="fromTimestamp" from="periodInfo.fromTimestamp"/><set field="thruTimestamp" from="periodInfo.thruTimestamp"/><service-call name="mantle.party.TimeServices.getOrCreate#NextTimePeriod" out-map="[nextTimePeriodId:context.nextTimePeriodId,nextTimePeriod:context.nextTimePeriod]" in-map="[timePeriodId:timePeriodId]"/><set field="subsequentPeriodIds" from="[nextTimePeriodId]"/><set field="curSubPeriodId" from="nextTimePeriodId"/><script><![CDATA[while (curSubPeriodId) {
                        Map subNextResult = ec.service.sync().name("mantle.party.TimeServices.get#NextTimePeriod")
                                .parameter("timePeriodId", curSubPeriodId).call()
                        curSubPeriodId = subNextResult.nextTimePeriodId
                        if (curSubPeriodId) subsequentPeriodIds.add(curSubPeriodId)
                    }]]></script><set field="glAccountIdsWithTrans" from="new HashSet()"/><entity-find entity-name="mantle.ledger.transaction.AcctgTransAndEntrySummary" list="transSummaryList"><econdition field-name="organizationPartyId"/><econdition field-name="transactionDate" operator="greater-equals" from="fromTimestamp"/><econdition field-name="transactionDate" operator="less-equals" from="thruTimestamp"/><econdition field-name="isPosted" value="Y"/><select-field field-name="glAccountId,acctgTransTypeEnumId,debitCreditFlag,amount"/><order-by field-name="glAccountId,acctgTransTypeEnumId,debitCreditFlag"/></entity-find><script><![CDATA[LinkedHashMap<String, ArrayList<Map>> transSummariesByGlAccountId = new LinkedHashMap<>()
                    transSummaryListSize = transSummaryList.size()
                    for (int i = 0; i < transSummaryListSize; i++) {
                        Map transSummary = (Map) transSummaryList.get(i)
                        org.moqui.util.CollectionUtilities.addToListInMap(transSummary.glAccountId, transSummary, transSummariesByGlAccountId)
                    }

                    for (Map.Entry<String, ArrayList<Map>> byIdEntry in transSummariesByGlAccountId) {
                        ArrayList<Map> transSummaryList = (ArrayList<Map>) byIdEntry.value
                        String glAccountId = (String) byIdEntry.key
                        glAccountIdsWithTrans.add(glAccountId)

                        String isDebit = (String) glAccountIsDebitMap.get(glAccountId)
                        if (!isDebit) {
                            Map glAccount = ec.entity.find("mantle.ledger.account.GlAccount").condition("glAccountId", glAccountId).useCache(true).one()
                            isDebit = glAccount.isDebit
                        }
                        boolean isDebitAccount = isDebit.equals('Y')

                        org.moqui.entity.EntityValue glAccountOrgTimePeriod = ec.entity.find("mantle.ledger.account.GlAccountOrgTimePeriod")
                                .condition("glAccountId", glAccountId).condition("organizationPartyId", organizationPartyId)
                                .condition("timePeriodId", timePeriodId).forUpdate(true).one()
                        boolean foundRecord = true
                        if (glAccountOrgTimePeriod == null) {
                            foundRecord = false
                            glAccountOrgTimePeriod = ec.entity.makeValue("mantle.ledger.account.GlAccountOrgTimePeriod")
                            glAccountOrgTimePeriod.put("glAccountId", glAccountId)
                            glAccountOrgTimePeriod.put("organizationPartyId", organizationPartyId)
                            glAccountOrgTimePeriod.put("timePeriodId", timePeriodId)
                            glAccountOrgTimePeriod.put("beginningBalance", BigDecimal.ZERO)
                            glAccountOrgTimePeriod.create()
                        }

                        BigDecimal postedDebits = BigDecimal.ZERO
                        BigDecimal postedCredits = BigDecimal.ZERO
                        BigDecimal postedDebitsNoClosing = BigDecimal.ZERO
                        BigDecimal postedCreditsNoClosing = BigDecimal.ZERO

                        int transSummaryListSize = transSummaryList.size()
                        for (int i = 0; i < transSummaryListSize; i++) {
                            Map transSummary = (Map) transSummaryList.get(i)
                            if ('C'.equals(transSummary.debitCreditFlag)) {
                                postedCredits += (BigDecimal) transSummary.amount
                                if (!'AttNetIncomeClosing'.equals(transSummary.acctgTransTypeEnumId)) postedCreditsNoClosing += (BigDecimal) transSummary.amount
                            } else {
                                postedDebits += (BigDecimal) transSummary.amount
                                if (!'AttNetIncomeClosing'.equals(transSummary.acctgTransTypeEnumId)) postedDebitsNoClosing += (BigDecimal) transSummary.amount
                            }
                        }

                        // calculate endingBalance from beginningBalance and posted debits/credits
                        BigDecimal beginningBalance = glAccountOrgTimePeriod.beginningBalance ?: BigDecimal.ZERO
                        BigDecimal endingBalance
                        if (isDebitAccount) endingBalance = beginningBalance + postedDebits - postedCredits
                        else endingBalance = beginningBalance - postedDebits + postedCredits

                        Map origGlAccountOrgTimePeriod = glAccountOrgTimePeriod.getMap()
                        glAccountOrgTimePeriod.put("postedDebits", postedDebits)
                        glAccountOrgTimePeriod.put("postedCredits", postedCredits)
                        glAccountOrgTimePeriod.put("postedDebitsNoClosing", postedDebitsNoClosing)
                        glAccountOrgTimePeriod.put("postedCreditsNoClosing", postedCreditsNoClosing)
                        glAccountOrgTimePeriod.put("endingBalance", endingBalance)
                        glAccountOrgTimePeriod.put("balanceLastUpdated", nowTimestamp)
                        glAccountOrgTimePeriod.update()
                        gaotpUpdated++

                        if (foundRecord && (origGlAccountOrgTimePeriod.postedDebits != postedDebits ||
                                origGlAccountOrgTimePeriod.postedCredits != postedCredits ||
                                origGlAccountOrgTimePeriod.postedDebitsNoClosing != postedDebitsNoClosing ||
                                origGlAccountOrgTimePeriod.postedCreditsNoClosing != postedCreditsNoClosing)) {
                            ec.logger.info("In recalculate GLAOS updated account ${glAccountId} period ${timePeriodId} debit? ${isDebit} with wrong posted amounts; beginningBalance=${glAccountOrgTimePeriod.beginningBalance}, postedDebits was ${origGlAccountOrgTimePeriod.postedDebits} is ${glAccountOrgTimePeriod.postedDebits}, postedCredits was ${origGlAccountOrgTimePeriod.postedCredits} is ${glAccountOrgTimePeriod.postedCredits}, postedDebitsNoClosing was ${origGlAccountOrgTimePeriod.postedDebitsNoClosing} is ${glAccountOrgTimePeriod.postedDebitsNoClosing}, postedCreditsNoClosing was ${origGlAccountOrgTimePeriod.postedCreditsNoClosing} is ${glAccountOrgTimePeriod.postedCreditsNoClosing}, endingBalance was ${origGlAccountOrgTimePeriod.endingBalance} is ${glAccountOrgTimePeriod.endingBalance}")
                        }

                        // update balances for all existing subsequent periods
                        Map lastGlAccountOrgTimePeriod = glAccountOrgTimePeriod
                        for (String subsequentPeriodId in subsequentPeriodIds) {
                            Map nextGlAccountOrgTimePeriod = ec.entity.find("mantle.ledger.account.GlAccountOrgTimePeriod")
                                    .condition("glAccountId", glAccountId).condition("organizationPartyId", organizationPartyId)
                                    .condition("timePeriodId", subsequentPeriodId).forUpdate(true).one()
                            if (nextGlAccountOrgTimePeriod == null) {
                                nextGlAccountOrgTimePeriod = ec.entity.makeValue("mantle.ledger.account.GlAccountOrgTimePeriod")
                                nextGlAccountOrgTimePeriod.put("glAccountId", glAccountId)
                                nextGlAccountOrgTimePeriod.put("organizationPartyId", organizationPartyId)
                                nextGlAccountOrgTimePeriod.put("timePeriodId", subsequentPeriodId)
                                nextGlAccountOrgTimePeriod.put("beginningBalance", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.put("postedDebits", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.put("postedCredits", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.put("postedDebitsNoClosing", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.put("postedCreditsNoClosing", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.put("endingBalance", BigDecimal.ZERO)
                                nextGlAccountOrgTimePeriod.create()
                            }

                            nextGlAccountOrgTimePeriod.put("endingBalance", ((nextGlAccountOrgTimePeriod.endingBalance ?: 0.0) -
                                    (nextGlAccountOrgTimePeriod.beginningBalance ?: 0.0)) + lastGlAccountOrgTimePeriod.endingBalance)
                            nextGlAccountOrgTimePeriod.put("beginningBalance", lastGlAccountOrgTimePeriod.endingBalance)
                            nextGlAccountOrgTimePeriod.put("balanceLastUpdated", nowTimestamp)
                            nextGlAccountOrgTimePeriod.update()

                            lastGlAccountOrgTimePeriod = nextGlAccountOrgTimePeriod
                        }
                    }]]></script><entity-find entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" list="glAccountOrgTimePeriodList" for-update="true"><econdition field-name="organizationPartyId" from="timePeriod.partyId"/><econdition field-name="timePeriodId"/></entity-find><iterate list="glAccountOrgTimePeriodList" entry="glAccountOrgTimePeriod"><if condition="glAccountIdsWithTrans.contains(glAccountOrgTimePeriod.glAccountId)"><continue/></if><set field="lastGlAccountOrgTimePeriod" from="glAccountOrgTimePeriod"/><iterate list="subsequentPeriodIds" entry="subsequentPeriodId"><entity-find-one entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="nextGlAccountOrgTimePeriod" for-update="true"><field-map field-name="glAccountId" from="glAccountOrgTimePeriod.glAccountId"/><field-map field-name="organizationPartyId" from="timePeriod.partyId"/><field-map field-name="timePeriodId" from="subsequentPeriodId"/></entity-find-one><if condition="nextGlAccountOrgTimePeriod == null"><entity-make-value entity-name="mantle.ledger.account.GlAccountOrgTimePeriod" value-field="nextGlAccountOrgTimePeriod" map="[glAccountId:glAccountOrgTimePeriod.glAccountId, organizationPartyId:timePeriod.partyId,                                         timePeriodId:subsequentPeriodId, beginningBalance:0.0, postedDebits:0.0, postedCredits:0.0,                                         postedDebitsNoClosing:0.0, postedCreditsNoClosing:0.0, endingBalance:0.0]"/></if><set field="nextGlAccountOrgTimePeriod.endingBalance" from="((nextGlAccountOrgTimePeriod.endingBalance ?: 0.0) -                                 (nextGlAccountOrgTimePeriod.beginningBalance ?: 0.0)) + lastGlAccountOrgTimePeriod.endingBalance"/><set field="nextGlAccountOrgTimePeriod.beginningBalance" from="lastGlAccountOrgTimePeriod.endingBalance"/><set field="nextGlAccountOrgTimePeriod.balanceLastUpdated" from="ec.user.nowTimestamp"/><entity-create value-field="nextGlAccountOrgTimePeriod" or-update="true"/><set field="lastGlAccountOrgTimePeriod" from="nextGlAccountOrgTimePeriod"/></iterate></iterate></iterate><message><![CDATA[Updated GL Account Org Summaries for orgs ${organizationPartyIds} in ${System.currentTimeMillis() - startTime}ms; updated ${gaoUpdated} Organization and ${gaotpUpdated} Period summary records]]></message></actions></service>