<!--Service Location XmlServices.train#OpenAiMessages--><service verb="train" noun="OpenAiMessages"><in-parameters><parameter name="modelToTrain" default-value="gpt-4o-mini-2024-07-18"/></in-parameters><out-parameters/><actions><set field="trainingList" from="[]"/><entity-find-one entity-name="Enumeration" value-field="systemRoleEnum" auto-field-map="[enumId:'MCMR_System']"/><if condition="!systemRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for systemRoleEnum ${systemRoleEnum?.enumId}"/></if><entity-find-one entity-name="Enumeration" value-field="userRoleEnum" auto-field-map="[enumId:'MCMR_User']"/><if condition="!userRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for userRoleEnum ${userRoleEnum?.enumId}"/></if><entity-find-one entity-name="Enumeration" value-field="assistantRoleEnum" auto-field-map="[enumId:'MCMR_Assistant']"/><if condition="!assistantRoleEnum?.optionValue"><log level="error" message="No role enum optionValue found for assistantRoleEnum ${assistantRoleEnum?.enumId}"/></if><entity-find entity-name="ai.ModelChat" list="modelChatList"><econdition field-name="chatTypeEnumId" value="MCT_Entity"/></entity-find><iterate list="modelChatList" entry="modelChat"><entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList"><econdition field-name="modelChatId" from="modelChat.modelChatId"/></entity-find><set field="messages" from="[]"/><set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/><set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/><set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/><if condition="!messageSystem || !messageUser || !messageAssistant"><log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/><continue/></if><set field="contentFirst" from="messageSystem.content.find(/What is (.+?)\?/, { match, term -> term })"/><set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' entity?']"/><set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant?.content+' '+messageUser?.content]"/><set field="trainingList" from="trainingList+[messages:messages]"/></iterate><entity-find entity-name="ai.ModelChat" list="modelChatList"><econdition field-name="chatTypeEnumId" value="MCT_Service"/></entity-find><iterate list="modelChatList" entry="modelChat"><entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList"><econdition field-name="modelChatId" from="modelChat.modelChatId"/></entity-find><set field="messages" from="[]"/><set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/><set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/><set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/><if condition="!messageSystem || !messageUser || !messageAssistant"><log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/><continue/></if><set field="contentFirst" from="messageSystem.content.find(/How can (.+?) be used\?/, { match, term -> term.replaceAll(' be used$', '') })"/><set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' service?']"/><set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant.content+' '+messageUser.content]"/><set field="trainingList" from="trainingList+[messages:messages]"/></iterate><entity-find entity-name="ai.ModelChat" list="modelChatList"><econdition field-name="chatTypeEnumId" value="MCT_Screen"/></entity-find><iterate list="modelChatList" entry="modelChat"><entity-find entity-name="ai.ModelChatMessage" list="modelChatMessageList"><econdition field-name="modelChatId" from="modelChat.modelChatId"/></entity-find><set field="messages" from="[]"/><set field="messageSystem" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_System' })"/><set field="messageUser" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_User' })"/><set field="messageAssistant" from="modelChatMessageList.find({ it.roleTypeEnumId == 'MCMR_Assistant' })"/><if condition="!messageSystem || !messageUser || !messageAssistant"><log level="warn" message="continuing on modelChat.chatTypeName ${modelChat.chatTypeName}"/><log level="warn" message="messageSystem ${messageSystem} messageUser ${messageUser} messageAssistant ${messageAssistant}"/><continue/></if><set field="contentFirst" from="messageSystem.content.minus('Given the Moqui screen xml included, answer the question: What does ').minus(' do through an expert summary')"/><set field="messages" from="messages+[role:userRoleEnum?.optionValue,content:'What is the '+contentFirst+' screen?']"/><set field="messages" from="messages+[role:assistantRoleEnum?.optionValue,content:messageAssistant.content+' '+messageUser.content+' '+modelChat.chatTypeName]"/><set field="trainingList" from="trainingList+[messages:messages]"/></iterate><set field="json" from="ec.elastic.objectToJsonl(trainingList)"/><service-call name="XmlServices.get#OpenAiTokenLength" in-map="[text:json]" out-map="[tokenCount:context.tokenCount]"/><log level="warn" message="tokenCount: ${tokenCount}"/><script><![CDATA[ec.resource.getLocationReference('component://getXml/dataset/output.jsonl').putText(json)]]></script></actions></service>