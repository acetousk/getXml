<!--Service Location mantle.product.AssetServices.get#AvailableInventoryMulti--><service verb="get" noun="AvailableInventoryMulti"><in-parameters><parameter name="productIds" type="Collection"><description><![CDATA[At least one product required, can get from category]]></description></parameter><parameter name="productCategoryIds" type="Collection"/><parameter name="expandVariants" type="Boolean" default="false"/><parameter name="productStoreId"><description><![CDATA[If specified get facilities and vendor from store, must specify products or categories separately]]></description></parameter><parameter name="facilityIds" type="Collection"><description><![CDATA[At least one facility required, can get from store]]></description></parameter><parameter name="vendorPartyId"><description><![CDATA[Defaults to ProductStore.organizationPartyId; used for ownerPartyId filter and AssetPool lookup by Vendor]]></description></parameter><parameter name="customerPartyId"><description><![CDATA[Used for AssetPool lookup by Customer]]></description></parameter></in-parameters><out-parameters><parameter name="availableByProductId" type="Map"><description><![CDATA[Key is productId, value is BigDecimal for available to promise total quantity]]></description></parameter></out-parameters><actions><set field="productIdSet" from="new HashSet()"/><if condition="productIds"><script><![CDATA[productIdSet.addAll(productIds)]]></script></if><if condition="productCategoryIds"><entity-find entity-name="mantle.product.category.ProductCategoryMember" list="pcmList" distinct="true"><date-filter/><econdition field-name="productCategoryId" operator="in" from="productCategoryIds"/><select-field field-name="productId"/></entity-find><if condition="pcmList"><script><![CDATA[productIdSet.addAll(pcmList*.productId)]]></script></if></if><if condition="expandVariants"><set field="newProductIdSet" from="new HashSet()"/><iterate list="productIdSet" entry="productId"><entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/><if condition="product.productTypeEnumId == 'PtVirtual'"><then><entity-find entity-name="mantle.product.ProductAssoc" list="variantAssocList" cache="true"><date-filter/><econdition field-name="productId"/><econdition field-name="productAssocTypeEnumId" value="PatVariant"/></entity-find><if condition="variantAssocList"><script><![CDATA[newProductIdSet.addAll(variantAssocList*.toProductId)]]></script></if></then><else><script><![CDATA[newProductIdSet.add(productId)]]></script></else></if></iterate><set field="productIdSet" from="newProductIdSet"/></if><set field="facilityIdSet" from="new HashSet()"/><if condition="facilityIds"><script><![CDATA[facilityIdSet.addAll(facilityIds)]]></script></if><if condition="productStoreId"><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/><if condition="!vendorPartyId"><set field="vendorPartyId" from="productStore?.organizationPartyId"/></if><if condition="facilityIdSet.size() == 0"><if condition="productStore.inventoryFacilityId"><script><![CDATA[facilityIdSet.add(productStore.inventoryFacilityId)]]></script></if><entity-find entity-name="mantle.product.store.ProductStoreFacility" list="productStoreFacilityList"><date-filter/><econdition field-name="productStoreId"/></entity-find><if condition="productStoreFacilityList"><script><![CDATA[facilityIdSet.addAll(productStoreFacilityList*.facilityId)]]></script></if></if></if><set field="ownerPartyIdSet" from="new HashSet()"/><if condition="vendorPartyId"><script><![CDATA[ownerPartyIdSet.add(vendorPartyId)]]></script><entity-find entity-name="mantle.party.PartyRelationship" list="parentRelList" cache="true"><date-filter/><econdition field-name="relationshipTypeEnumId" value="PrtOrgRollup"/><econdition field-name="fromPartyId" from="vendorPartyId"/><econdition field-name="toPartyId" operator="is-not-null"/></entity-find><script><![CDATA[if (parentRelList) ownerPartyIdSet.addAll(parentRelList*.toPartyId)]]></script></if><service-call name="mantle.product.AssetServices.get#AssetPools" out-map="[assetPoolIdSet:poolsOut.assetPoolIdSet]" in-map="[productStoreId:productStoreId, vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/><set field="assetPoolIdSet" from="poolsOut.assetPoolIdSet"/><set field="availableByProductId" from="[:]"/><iterate list="facilityIdSet" entry="facilityId"><entity-find-one entity-name="mantle.facility.Facility" value-field="facility" cache="true"/><entity-find entity-name="mantle.product.asset.AssetSummaryView" list="assetSummaryList"><econdition field-name="facilityId"/><econdition field-name="productId" operator="in" from="productIdSet"/><econdition field-name="ownerPartyId" operator="in" from="ownerPartyIdSet" ignore="facility?.assetAllowOtherOwner == 'Y' || !ownerPartyIdSet"/><econdition field-name="assetPoolId" operator="in" from="assetPoolIdSet" ignore="!assetPoolIdSet" or-null="true"/><econdition field-name="assetPoolId" operator="is-null" ignore="assetPoolIdSet"/><econdition field-name="statusId" value="AstAvailable"/><having-econditions><econdition field-name="availableToPromiseTotal" operator="not-equals" from="0.0"/></having-econditions><select-field field-name="productId,availableToPromiseTotal"/><order-by field-name="productId"/></entity-find><script><![CDATA[for (int i = 0; i < assetSummaryList.size(); i++) {
                        Map assetSummary = (Map) assetSummaryList.get(i)
                        addToBigDecimalInMap(assetSummary.productId, assetSummary.availableToPromiseTotal, availableByProductId)
                    }]]></script><iterate list="productIdSet" entry="productId"><entity-find-one entity-name="mantle.product.Product" value-field="product" cache="true"/><if condition="product.productTypeEnumId == 'PtPickAssembly'"><entity-find entity-name="mantle.product.ProductAssoc" list="assocList"><date-filter/><econdition field-name="productId" from="product.productId"/><econdition field-name="productAssocTypeEnumId" value="PatMfgBom"/></entity-find><set field="availableFromComponents" from="0.0"/><iterate list="assocList" entry="assoc"><service-call name="mantle.product.AssetServices.get#AvailableInventory" out-map="[availableToPromiseTotal:compAvailOut.availableToPromiseTotal]" out-map-add-to-existing="false" in-map="[productId:assoc.toProductId, facilityId:facilityId, productStoreId:productStoreId,                                     vendorPartyId:vendorPartyId, customerPartyId:customerPartyId]"/><set field="compScale" from="assoc.quantity != null ? assoc.quantity.scale() : 0"/><set field="componentAvailable" from="(compAvailOut.availableToPromiseTotal ?: 0.0).divide((assoc.quantity ?: 1.0), compScale, BigDecimal.ROUND_FLOOR)"/><if condition="availableFromComponents == 0.0 || availableFromComponents > componentAvailable"><set field="availableFromComponents" from="componentAvailable"/></if></iterate><script><![CDATA[addToBigDecimalInMap(product.productId, availableFromComponents, availableByProductId)]]></script></if></iterate></iterate></actions></service>