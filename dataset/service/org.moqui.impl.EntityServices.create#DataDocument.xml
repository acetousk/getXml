<!--Service Location org.moqui.impl.EntityServices.create#DataDocument--><service verb="create" noun="DataDocument"><in-parameters><parameter name="documentName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="documentName"/><parameter name="documentTitle" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="documentTitle"/><parameter name="indexName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="indexName"><matches regexp="[a-z][a-z0-9_]*" message="Must contain only lower case letters, digits, and underscore"/></parameter><parameter name="primaryEntityName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="primaryEntityName"/><parameter name="manualDataServiceName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="manualDataServiceName"/><parameter name="manualMappingServiceName" type="java.lang.String" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="manualMappingServiceName"/><parameter name="lastUpdatedStamp" type="java.sql.Timestamp" required="false" allow-html="none" entity-name="moqui.entity.document.DataDocument" field-name="lastUpdatedStamp"/><parameter name="dataDocumentId" required="true" entity-name="moqui.entity.document.DataDocument" field-name="dataDocumentId"><matches regexp="[A-Z]\w*" message="Must start with a upper case letter and contain only letters and digits"/></parameter><parameter name="userGroupId"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="existing"/><if condition="existing != null || ec.entity.isEntityDefined(dataDocumentId)"><return error="true" message="ID '${dataDocumentId}' already in use"/></if><service-call name="create#moqui.entity.document.DataDocument" in-map="context" out-map="[dataDocumentId:context.dataDocumentId,documentName:context.documentName,documentTitle:context.documentTitle,indexName:context.indexName,primaryEntityName:context.primaryEntityName,manualDataServiceName:context.manualDataServiceName,manualMappingServiceName:context.manualMappingServiceName,lastUpdatedStamp:context.lastUpdatedStamp]"/><if condition="userGroupId"><service-call name="create#moqui.entity.document.DataDocumentUserGroup" in-map="[dataDocumentId:dataDocumentId, userGroupId:userGroupId]"/></if></actions></service>