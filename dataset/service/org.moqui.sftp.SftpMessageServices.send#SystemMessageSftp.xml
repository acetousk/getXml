<!--Service Location org.moqui.sftp.SftpMessageServices.send#SystemMessageSftp--><service verb="send" noun="SystemMessageSftp"><in-parameters><parameter name="systemMessageId" required="true" entity-name="moqui.service.message.SystemMessage" field-name="systemMessageId"/></in-parameters><out-parameters><parameter name="remoteMessageId" entity-name="moqui.service.message.SystemMessage" field-name="remoteMessageId"/></out-parameters><actions><entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/><if condition="systemMessage == null"><return error="true" message="Could not find SystemMessage with ID ${systemMessageId}"/></if><set field="systemMessageType" from="systemMessage.'moqui.service.message.SystemMessageType'"/><if condition="systemMessageType == null"><return error="true" message="System message ${systemMessageId} has no SystemMessageType, not sending."/></if><set field="systemMessageRemote" from="systemMessage.'moqui.service.message.SystemMessageRemote'"/><if condition="systemMessageRemote == null"><return error="true" message="System message ${systemMessageId} has no SystemMessageRemote, not sending."/></if><if condition="!systemMessageRemote.sendUrl"><return error="true" message="No sendUrl on SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if><if condition="!systemMessageRemote.username"><return error="true" message="No username on SystemMessageRemote ${systemMessageRemote.systemMessageRemoteId}, not sending."/></if><script><![CDATA[import org.moqui.sftp.SftpClient
                import java.nio.charset.Charset
                import java.sql.Timestamp

                Timestamp msgDate = systemMessage.messageDate ?: systemMessage.initDate ?: ec.user.nowTimestamp
                String sendPath = ec.resource.expand(systemMessageType.sendPath, null,
                        [systemMessageId:systemMessage.systemMessageId, remoteMessageId:systemMessage.remoteMessageId,
                         systemMessageTypeId:systemMessage.systemMessageTypeId, systemMessageRemoteId:systemMessage.systemMessageRemoteId,
                         date:ec.l10n.format(msgDate, "yyyy-MM-dd"), dateTime:ec.l10n.format(msgDate, "yyyy-MM-dd-HH-mm-ss")], false)
                String filename = systemMessage.remoteMessageId ?: systemMessage.systemMessageId
                Charset charset = Charset.forName(systemMessageRemote.remoteCharset ?: "UTF-8")

                // use SftpClient to put the file
                SftpClient sftpClient = new SftpClient((String) systemMessageRemote.sendUrl, (String) systemMessageRemote.username)
                if (systemMessageRemote.privateKey) sftpClient.publicKeyPkcs8((String) systemMessageRemote.privateKey, (String) systemMessageRemote.publicKey)
                else sftpClient.password((String) systemMessageRemote.password)

                // if SFTP server doesn't support set file attributes after put/upload
                if (systemMessageRemote.remoteAttributes == 'N') sftpClient.preserveAttributes(false)

                ec.logger.info("SFTP put message ${systemMessageId} to path ${sendPath} file ${filename} charset ${charset}")
                sftpClient.connect()
                try {
                    sftpClient.put(sendPath, filename, (String) systemMessage.messageText, charset)
                } finally {
                    sftpClient.close()
                }]]></script><set field="remoteMessageId" from="filename"/></actions></service>