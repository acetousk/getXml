<!--Service Location org.moqui.impl.UserServices.reset#Password--><service verb="reset" noun="Password"><in-parameters><parameter name="userId"/><parameter name="username"><description><![CDATA[May be used instead of userId to identify user.]]></description></parameter><parameter name="bodyParameters" type="Map" default="[:]"/><parameter name="emailTemplateId" default-value="PASSWORD_RESET"/></in-parameters><out-parameters/><actions><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"/><if condition="userAccount == null"><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"><field-map field-name="username"/></entity-find-one></if><if condition="userAccount == null"><entity-find-one entity-name="moqui.security.UserAccount" value-field="userAccount" for-update="true"><field-map field-name="emailAddress" from="username"/></entity-find-one></if><if condition="userAccount == null"><message public="true" type="danger"><![CDATA[Could not find account with username or email address ${username}]]></message><return error="true" message="Account not found"/></if><if condition="!userAccount.emailAddress"><message public="true" type="danger"><![CDATA[Account with username ${username} does not have an email address]]></message><return error="true" message="Account has no email address"/></if><set field="resetPassword" from="getRandomString(12)"/><set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/><set field="userAccount.resetPassword" from="ec.ecfi.getSimpleHash(resetPassword, userAccount.passwordSalt, userAccount.passwordHashType, 'Y'.equals(userAccount.passwordBase64))"/><set field="userAccount.requirePasswordChange" from="(passwordNode.attribute('email-require-change') == 'true') ? 'Y' : 'N'"/><entity-update value-field="userAccount"/><service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true"><field-map field-name="emailTemplateId"/><field-map field-name="toAddresses" from="userAccount.emailAddress"/><field-map field-name="bodyParameters" from="bodyParameters + [userAccount:userAccount, resetPassword:resetPassword]"/></service-call><message public="true" type="success"><![CDATA[A reset password was sent to the email of username ${userAccount.username}. This password may only be used to change your password. Your current password is still valid.]]></message><if condition="userAccount.requirePasswordChange == 'Y'"><message public="true" type="info"><![CDATA[You must change your password before login.]]></message></if></actions></service>