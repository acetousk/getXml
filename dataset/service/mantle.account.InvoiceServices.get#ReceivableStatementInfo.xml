<!--Service Location mantle.account.InvoiceServices.get#ReceivableStatementInfo--><service verb="get" noun="ReceivableStatementInfo"><in-parameters><parameter name="toPartyId" required="true"/><parameter name="fromPartyId"/><parameter name="periodDays" type="Integer" default="30"/><parameter name="asOfDate" type="Date"/></in-parameters><out-parameters><parameter name="toParty" type="Map"/><parameter name="toContactInfo" type="Map"><description><![CDATA[From the mantle.party.ContactServices.get#PartyContactInfo service.]]></description></parameter><parameter name="toBillingRep" type="Map"/><parameter name="periodDays" type="Integer"/><parameter name="asOfTimestamp" type="Timestamp"/><parameter name="currencyUomId"/><parameter name="receivableInfoList" type="List"><parameter name="receivableInfo" type="Map"><parameter name="fromPartyId"/><parameter name="fromParty" type="Map"/><parameter name="fromContactInfo" type="Map"><description><![CDATA[From the mantle.party.ContactServices.get#PartyContactInfo service.]]></description></parameter><parameter name="logoImageLocation"/><parameter name="invoiceList"><parameter name="invoice" type="Map"/></parameter><parameter name="invoiceTotal" type="BigDecimal"/><parameter name="unpaidTotal" type="BigDecimal"/><parameter name="unappliedPaymentList" type="List"><parameter name="payment" type="Map"/></parameter><parameter name="paymentTotal" type="BigDecimal"/><parameter name="unappliedTotal" type="BigDecimal"/><parameter name="balanceDue" type="BigDecimal"/><parameter name="agingSummaryList"><parameter name="agingSummary" type="Map"/></parameter><parameter name="receivableAgingList"><parameter name="unpaidAmount" type="BigDecimal"/></parameter><parameter name="receivableDueAgingList"><parameter name="unpaidAmount" type="BigDecimal"/></parameter></parameter></parameter></out-parameters><actions><set field="periodDaysBd" from="new BigDecimal(periodDays)"/><set field="asOfTimestamp" from="asOfDate ? ec.l10n.parseTimestamp(ec.l10n.format(asOfDate, 'yyyy-MM-dd') + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS') : ec.user.nowTimestamp"/><entity-find-one entity-name="mantle.party.PartyDetail" value-field="toParty"><field-map field-name="partyId" from="toPartyId"/></entity-find-one><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="[postalContactMechId:toContactInfo.postalContactMechId,postalContactMech:toContactInfo.postalContactMech,postalContactMechPurposeId:toContactInfo.postalContactMechPurposeId,postalAddress:toContactInfo.postalAddress,postalAddressStateGeo:toContactInfo.postalAddressStateGeo,postalAddressCountryGeo:toContactInfo.postalAddressCountryGeo,postalAddressGeoPoint:toContactInfo.postalAddressGeoPoint,postalTrustLevelEnum:toContactInfo.postalTrustLevelEnum,telecomContactMechId:toContactInfo.telecomContactMechId,telecomContactMech:toContactInfo.telecomContactMech,telecomPartyContactMech:toContactInfo.telecomPartyContactMech,telecomContactMechPurposeId:toContactInfo.telecomContactMechPurposeId,telecomNumber:toContactInfo.telecomNumber,faxContactMechId:toContactInfo.faxContactMechId,faxContactMech:toContactInfo.faxContactMech,faxPartyContactMech:toContactInfo.faxPartyContactMech,faxContactMechPurposeId:toContactInfo.faxContactMechPurposeId,faxTelecomNumber:toContactInfo.faxTelecomNumber,emailContactMechId:toContactInfo.emailContactMechId,emailContactMech:toContactInfo.emailContactMech,emailPartyContactMech:toContactInfo.emailPartyContactMech,emailContactMechPurposeId:toContactInfo.emailContactMechPurposeId,emailAddress:toContactInfo.emailAddress,webContactMechId:toContactInfo.webContactMechId,webContactMech:toContactInfo.webContactMech,webPartyContactMech:toContactInfo.webPartyContactMech,webContactMechPurposeId:toContactInfo.webContactMechPurposeId,webAddress:toContactInfo.webAddress,otherContactMechId:toContactInfo.otherContactMechId,otherContactMech:toContactInfo.otherContactMech,otherContactMechPurposeId:toContactInfo.otherContactMechPurposeId,otherInfoString:toContactInfo.otherInfoString]" in-map="[partyId:toPartyId, postalContactMechPurposeId:'PostalBilling',                         telecomContactMechPurposeId:'PhoneBilling', emailContactMechPurposeId:'EmailBilling']"/><entity-find entity-name="mantle.party.PartyRelationship" list="toBillingRelList"><date-filter/><econdition field-name="toPartyId" from="toPartyId"/><econdition field-name="relationshipTypeEnumId" value="PrtRepresentative"/><econdition field-name="fromRoleTypeId" value="ClientBilling"/></entity-find><entity-find-one entity-name="mantle.party.PartyDetail" value-field="toBillingRep"><field-map field-name="partyId" from="toBillingRelList?.first?.fromPartyId"/></entity-find-one><entity-find entity-name="mantle.account.invoice.Invoice" list="allInvoiceList"><econdition field-name="statusId" operator="in" value="InvoiceFinalized,InvoiceSent,InvoiceAcked"/><econdition field-name="unpaidTotal" operator="not-equals" from="0.0"/><econdition field-name="toPartyId"/><econdition field-name="fromPartyId" ignore-if-empty="true"/><order-by field-name="invoiceDate"/></entity-find><entity-find entity-name="mantle.account.payment.Payment" list="allUnappliedPaymentList"><econdition field-name="fromPartyId" from="toPartyId"/><econdition field-name="toPartyId" from="fromPartyId" ignore-if-empty="true"/><econdition field-name="unappliedTotal" operator="not-equals" from="0.0"/><econdition field-name="statusId" operator="in" value="PmntDelivered,PmntConfirmed"/></entity-find><set field="fromPartyIds" from="new TreeSet(allInvoiceList*.fromPartyId + allUnappliedPaymentList*.toPartyId)"/><set field="receivableInfoList" from="[]"/><iterate list="fromPartyIds" entry="fromPartyId"><set field="invoiceList" from="[]"/><set field="invoiceTotal" from="0.0"/><set field="unpaidTotal" from="0.0"/><set field="receivableAgingList" from="new ArrayList([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])"/><set field="receivableDueAgingList" from="new ArrayList([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])"/><iterate list="allInvoiceList" entry="invoice"><if condition="invoice.fromPartyId != fromPartyId"><continue/></if><script><![CDATA[invoiceList.add(invoice)
                        invoiceTotal += invoice.invoiceTotal
                        unpaidTotal += invoice.unpaidTotal
                        if (invoice.currencyUomId) currencyUomId = invoice.currencyUomId

                        Integer invoiceDateDays = invoice.invoiceDate != null ? asOfTimestamp - invoice.invoiceDate : null
                        Integer invoiceDateIdx = invoiceDateDays != null ? (invoiceDateDays < 0 ? 0 :
                                ((invoiceDateDays as BigDecimal) / periodDaysBd).setScale(0, BigDecimal.ROUND_DOWN).intValue() + 1) : null
                        if (invoiceDateIdx != null && invoiceDateIdx > 5) invoiceDateIdx = 5
                        Integer dueDateDays = invoice.dueDate != null ? asOfTimestamp - invoice.dueDate : null
                        Integer dueDateIdx = dueDateDays != null ? (dueDateDays < 0 ? 0 :
                                ((dueDateDays as BigDecimal) / periodDaysBd).setScale(0, BigDecimal.ROUND_DOWN).intValue() + 1) : null
                        if (dueDateIdx != null && dueDateIdx > 5) dueDateIdx = 5

                        if (invoiceDateIdx != null) receivableAgingList[invoiceDateIdx] = receivableAgingList[invoiceDateIdx] + invoice.unpaidTotal
                        if (dueDateIdx != null) receivableDueAgingList[dueDateIdx] = receivableDueAgingList[dueDateIdx] + invoice.unpaidTotal]]></script></iterate><script><![CDATA[agingSummaryList = []
                    agingSummaryList.add([description:'By Due Date', current:receivableDueAgingList[0], period0:receivableDueAgingList[1],
                            period1:receivableDueAgingList[2], period2:receivableDueAgingList[3], period3:receivableDueAgingList[4],
                            periodRemaining:receivableDueAgingList[5], total:receivableDueAgingList.sum()])
                    agingSummaryList.add([description:'By Invoice Date', current:receivableAgingList[0], period0:receivableAgingList[1],
                            period1:receivableAgingList[2], period2:receivableAgingList[3], period3:receivableAgingList[4],
                            periodRemaining:receivableAgingList[5], total:receivableAgingList.sum()])]]></script><set field="unappliedPaymentList" from="[]"/><set field="paymentTotal" from="0.0"/><set field="unappliedTotal" from="0.0"/><iterate list="allUnappliedPaymentList" entry="payment"><if condition="payment.toPartyId != fromPartyId"><continue/></if><script><![CDATA[unappliedPaymentList.add(payment)]]></script><set field="paymentTotal" from="paymentTotal + (payment.amount ?: 0.0)"/><set field="unappliedTotal" from="unappliedTotal + payment.unappliedTotal"/></iterate><entity-find-one entity-name="mantle.party.PartyDetail" value-field="fromParty"><field-map field-name="partyId" from="fromPartyId"/></entity-find-one><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="[postalContactMechId:fromContactInfo.postalContactMechId,postalContactMech:fromContactInfo.postalContactMech,postalContactMechPurposeId:fromContactInfo.postalContactMechPurposeId,postalAddress:fromContactInfo.postalAddress,postalAddressStateGeo:fromContactInfo.postalAddressStateGeo,postalAddressCountryGeo:fromContactInfo.postalAddressCountryGeo,postalAddressGeoPoint:fromContactInfo.postalAddressGeoPoint,postalTrustLevelEnum:fromContactInfo.postalTrustLevelEnum,telecomContactMechId:fromContactInfo.telecomContactMechId,telecomContactMech:fromContactInfo.telecomContactMech,telecomPartyContactMech:fromContactInfo.telecomPartyContactMech,telecomContactMechPurposeId:fromContactInfo.telecomContactMechPurposeId,telecomNumber:fromContactInfo.telecomNumber,faxContactMechId:fromContactInfo.faxContactMechId,faxContactMech:fromContactInfo.faxContactMech,faxPartyContactMech:fromContactInfo.faxPartyContactMech,faxContactMechPurposeId:fromContactInfo.faxContactMechPurposeId,faxTelecomNumber:fromContactInfo.faxTelecomNumber,emailContactMechId:fromContactInfo.emailContactMechId,emailContactMech:fromContactInfo.emailContactMech,emailPartyContactMech:fromContactInfo.emailPartyContactMech,emailContactMechPurposeId:fromContactInfo.emailContactMechPurposeId,emailAddress:fromContactInfo.emailAddress,webContactMechId:fromContactInfo.webContactMechId,webContactMech:fromContactInfo.webContactMech,webPartyContactMech:fromContactInfo.webPartyContactMech,webContactMechPurposeId:fromContactInfo.webContactMechPurposeId,webAddress:fromContactInfo.webAddress,otherContactMechId:fromContactInfo.otherContactMechId,otherContactMech:fromContactInfo.otherContactMech,otherContactMechPurposeId:fromContactInfo.otherContactMechPurposeId,otherInfoString:fromContactInfo.otherInfoString]" in-map="[partyId:fromPartyId, postalContactMechPurposeId:'PostalPayment',                             telecomContactMechPurposeId:'PhonePayment', emailContactMechPurposeId:'EmailPayment']"/><service-call name="mantle.party.PartyServices.get#PartyContentLocation" out-map="[contentLocation:logoImageOut.contentLocation,partyContent:logoImageOut.partyContent,contentText:logoImageOut.contentText]" in-map="[partyId:fromPartyId, partyContentTypeEnumIdList:['PcntLogoImage', 'PcntPrimaryImage']]"/><set field="logoImageLocation" from="logoImageOut.contentLocation"/><script><![CDATA[receivableInfoList.add([fromPartyId:fromPartyId, fromParty:fromParty, fromContactInfo:fromContactInfo,
                        logoImageLocation:logoImageOut.contentLocation, invoiceList:invoiceList,
                        invoiceTotal:invoiceTotal, unpaidTotal:unpaidTotal, paymentTotal:paymentTotal, unappliedTotal:unappliedTotal,
                        balanceDue:(unpaidTotal - unappliedTotal), unappliedPaymentList:unappliedPaymentList,
                        agingSummaryList:agingSummaryList, receivableAgingList:receivableAgingList,
                        receivableDueAgingList:receivableDueAgingList])]]></script></iterate></actions></service>