<!--Service Location mantle.shippo.ShippoServices.validate#PostalAddress--><service verb="validate" noun="PostalAddress"><in-parameters><parameter name="contactMechId" required="true"/><parameter name="partyId"/><parameter name="facilityId"/><parameter name="shippingGatewayConfigId" required="true"/></in-parameters><out-parameters><parameter name="contactMechId"><description><![CDATA[Return original or if update#PartyPostalAddress is called then the new]]></description></parameter></out-parameters><actions><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/><if condition="postalAddress == null"><return/></if><if condition="!postalAddress.shipGatewayAddressId"><if condition="partyId"><then><entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="replacesPcmiList"><date-filter/><econdition field-name="partyId"/><econdition field-name="replacesContactMechId" from="contactMechId"/><select-field field-name="contactMechId"/><order-by field-name="contactMechId"/></entity-find><if condition="replacesPcmiList"><set field="contactMechId" from="replacesPcmiList[0].contactMechId"/><return/></if></then><else-if condition="facilityId"><entity-find entity-name="mantle.facility.FacilityContactMechInfo" list="replacesFcmiList"><date-filter/><econdition field-name="facilityId"/><econdition field-name="replacesContactMechId" from="contactMechId"/><select-field field-name="contactMechId"/><order-by field-name="contactMechId"/></entity-find><if condition="replacesFcmiList"><set field="contactMechId" from="replacesFcmiList[0].contactMechId"/><return/></if></else-if></if></if><entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt"><field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one><set field="apiToken" from="apiTokenOpt?.optionValue"/><if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not validating address"/><return/></if><service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="[addressMap:addrOut.addressMap]" in-map="[postalAddress:postalAddress, partyId:partyId]"/><set field="addressMap" from="addrOut.addressMap"/><set field="addressMap.validate" from="true"/><set field="addressMap.async" from="false"/><script><![CDATA[org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Authorization", "ShippoToken ${apiToken}")
                        .addHeader("Shippo-API-Version", "2018-02-08")
                        .addHeader("Content-Type", "application/json").jsonObject(addressMap)
                        .retry(1.0F,2)
                restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("addresses").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    // based on code in Shippo Java client will return error message in plain text body
                    String errMsg = restResponse.text()
                    ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addError(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()]]></script><set field="is_complete" from="responseMap.is_complete"/><set field="is_valid" from="responseMap.validation_results ? responseMap.validation_results?.is_valid : true"/><set field="trustLevelEnumId" from="(is_valid && is_complete) ? 'CmtlValid' : (is_complete ? 'CmtlInvalid' : 'CmtlIncomplete')"/><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="origContactMech"/><set field="origContactMech.trustLevelEnumId" from="trustLevelEnumId"/><entity-update value-field="origContactMech"/><if condition="is_complete && (partyId || facilityId)"><set field="stateProvinceGeoId" from="postalAddress.stateProvinceGeoId"/><if condition="postalAddress.countryGeoId && responseMap.state"><entity-find entity-name="moqui.basic.GeoAssocAndToDetail" list="stateGeoList"><econdition field-name="geoId" from="postalAddress.countryGeoId"/><econdition field-name="geoCodeAlpha2" from="responseMap.state"/></entity-find><if condition="stateGeoList"><set field="stateProvinceGeoId" from="stateGeoList[0].toGeoId"/></if></if><set field="paInMap" from="[contactMechId:contactMechId,                         toName:(responseMap.company ? responseMap.company : responseMap.name), attnName:(responseMap.company ? responseMap.name : null),                         address1:((responseMap.street_no ? responseMap.street_no + ' ' : '') + responseMap.street1),                         address2:responseMap.street2, unitNumber:null, city:responseMap.city, stateProvinceGeoId:stateProvinceGeoId,                         postalCode:(responseMap.zip.contains('-') ? responseMap.zip.substring(0, responseMap.zip.indexOf('-')) : responseMap.zip),                         postalCodeExt:(responseMap.zip.contains('-') ? responseMap.zip.substring(responseMap.zip.indexOf('-') + 1) : ''),                         commercial:(responseMap.is_residential != null && !responseMap.is_residential ? 'Y' : 'N')]"/><if condition="facilityId"><entity-find entity-name="mantle.facility.FacilityContactMech" list="origFcmList"><date-filter/><econdition field-name="facilityId"/><econdition field-name="contactMechId" from="contactMechId"/></entity-find><if condition="origFcmList"><service-call name="mantle.facility.ContactServices.update#FacilityPostalAddress" out-map="[contactMechId:paOut.contactMechId]" in-map="paInMap + [facilityId:facilityId, expireCurrent:true]"/><set field="contactMechId" from="paOut.contactMechId"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/></if></if><if condition="partyId"><entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList"><econdition field-name="partyId"/><econdition field-name="contactMechId"/></entity-find><if condition="origPcmList"><service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="[contactMechId:paOut.contactMechId]" in-map="paInMap + [partyId:partyId, expireCurrent:false, contactMechPurposeId:'PostalShippingDest']"/><set field="contactMechId" from="paOut.contactMechId"/><entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/></if></if></if><log message="Shippo validate address ${contactMechId} complete? ${is_complete} valid? ${is_valid} trust ${trustLevelEnumId} commercial ${(responseMap.is_residential != null && !responseMap.is_residential ? 'Y' : 'N')}"/><entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="contactMech"/><set field="contactMech.trustLevelEnumId" from="trustLevelEnumId"/><if condition="responseMap.validation_results?.messages"><set field="validateMessage" value=""/><iterate list="responseMap.validation_results.messages" entry="messageObj"><set field="validateMessage" value="${validateMessage}(${messageObj.source}:${messageObj.code}) ${messageObj.text} "/></iterate><if condition="validateMessage.length() > 255"><set field="validateMessage" from="validateMessage.substring(0,255)"/></if><set field="contactMech.validateMessage" from="validateMessage"/></if><entity-update value-field="contactMech"/><set field="postalAddress.shipGatewayAddressId" from="responseMap.object_id"/><entity-update value-field="postalAddress"/></actions></service>