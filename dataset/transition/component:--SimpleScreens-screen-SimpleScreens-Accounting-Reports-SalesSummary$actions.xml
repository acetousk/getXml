<!--Transition Screen Location component://SimpleScreens/screen/SimpleScreens/Accounting/Reports/SalesSummary.xml Transition Name actions--><transition name="actions"><parameter name="term"/><parameter name="productFeatureIds"/><parameter name="productTypeEnumId"/><parameter name="productClassEnumId"/><parameter name="productCategoryIds"/><parameter name="assetTypeEnumId"/><parameter name="assetClassEnumId"/><parameter name="indexName"/><parameter name="documentType"/><parameter name="pageIndex"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://PopCommerce/screen/PopCommerceAdmin.xml--><set field="appRoot" value="PopcAdmin"/><set field="searchIndexName" value="mantle"/><set field="searchLinkSets" value="PopcAdmin"/><set field="searchProductDocType" value="MantleProduct"/><set field="searchPartyDocType" value="MantleParty"/><set field="appUserGroupTypeEnumId" value="UgtPopcAdmin"/><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--actions--><set field="interval" from="interval ?: 'w'"/><set field="maPeriods" from="(maPeriods ?: '0') as Integer"/><service-call name="mantle.sales.SalesReportServices.get#SalesOrderSummary" out-map="context" in-map="[interval:(interval?:'w'), intervalCount:intervalCount, thruDate:thruDate, maPeriods:maPeriods,                     vendorPartyIds:vendorPartyIds, customerPartyIds:customerPartyIds, productStoreIds:productStoreIds,                     customerClassificationIds:customerClassificationIds, productIds:productIds]"/><if condition="salesOrderSummaryList == null"><return error="true" message="ElasticSearch not available"/></if><service-call name="mantle.sales.SalesReportServices.get#SalesInvoiceSummary" out-map="context" in-map="[interval:(interval?:'w'), intervalCount:intervalCount, thruDate:thruDate, maPeriods:maPeriods,                     fromPartyIds:vendorPartyIds, toPartyIds:customerPartyIds, productStoreIds:productStoreIds,                     customerClassificationIds:customerClassificationIds, productIds:productIds]"/><service-call name="mantle.sales.SalesReportServices.get#SalesTopProduct" out-map="context" transaction="force-new" ignore-error="true" in-map="[interval:(interval?:'w'), intervalCount:intervalCount, thruDate:thruDate, topLimit:(topLimit?:15)]"/><service-call name="mantle.sales.SalesReportServices.get#InvoicesByCustomerClass" out-map="context" transaction="force-new" ignore-error="true" in-map="[interval:(interval?:'w'), intervalCount:intervalCount, thruDate:thruDate]"/><script><![CDATA[import java.math.RoundingMode

            defaultColors = ['rgba(92, 184, 92, 1.0)', 'rgba(91, 192, 222, 1.0)', 'rgba(240, 173, 78, 1.0)', 'rgba(217, 83, 79, 1.0)',
                    'rgba(60, 118, 61, 1.0)', 'rgba(49, 112, 143, 1.0)', 'rgba(138, 109, 59, 1.0)', 'rgba(169, 68, 66, 1.0)',
                    'rgba(223, 240, 216, 1.0)', 'rgba(217, 237, 247, 1.0)', 'rgba(252, 248, 227, 1.0)', 'rgba(242, 222, 222, 1.0)']

            orderSummaryNoTotals = salesOrderSummaryList.subList(0, salesOrderSummaryList.size() - 2)
            invoiceSummaryNoTotals = salesInvoiceSummaryList.subList(0, salesInvoiceSummaryList.size() - 2)
            orderLabelList = orderSummaryNoTotals*.dateKey
            invoiceLabelList = invoiceSummaryNoTotals*.dateKey

            newCustomerPercentList = orderSummaryNoTotals*.newCustomerPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            newCustomerPercentMaList = orderSummaryNoTotals*.newCustomerPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            orderProductSaleTotalList = orderSummaryNoTotals*.productSaleTotal.collect({ it.setScale(2, RoundingMode.HALF_UP) })
            orderNetSalesList = orderSummaryNoTotals*.netSales.collect({ it.setScale(2, RoundingMode.HALF_UP) })
            orderDiscountPercentList = orderSummaryNoTotals*.discountPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            orderDiscountPercentMaList = orderSummaryNoTotals*.discountPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })

            invoiceTotalList = invoiceSummaryNoTotals*.invoiceTotal.collect({ it.setScale(2, RoundingMode.HALF_UP) })
            invoiceTotalMaList = invoiceSummaryNoTotals*.invoiceTotalMa.collect({ it.setScale(2, RoundingMode.HALF_UP) })
            invoicePaidPercentList = invoiceSummaryNoTotals*.paidPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoicePaidPercentMaList = invoiceSummaryNoTotals*.paidPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoicePrePaidPercentList = invoiceSummaryNoTotals*.prePaidPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoicePrePaidPercentMaList = invoiceSummaryNoTotals*.prePaidPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoiceCostPercentList = invoiceSummaryNoTotals*.costPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoiceCostPercentMaList = invoiceSummaryNoTotals*.costPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoiceDiscountPercentList = invoiceSummaryNoTotals*.discountPercent.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })
            invoiceDiscountPercentMaList = invoiceSummaryNoTotals*.discountPercentMa.collect({ (it * 100.0).setScale(1, RoundingMode.HALF_UP) })

            countSummaryDatasets = [
                    [label: 'Orders', backgroundColor: defaultColors[0], borderColor: defaultColors[0], fill: false,
                            data: orderSummaryNoTotals*.orderCount],
                    [label: 'New Customers', backgroundColor: defaultColors[1], borderColor: defaultColors[1], fill: false,
                            data: orderSummaryNoTotals*.newCustomerOrderCount],
                    [label: 'New Customer %', backgroundColor: defaultColors[3].replace('1.0', '0.5'), borderColor: defaultColors[3].replace('1.0', '0.5'), fill: false,
                            yAxisID:'rightSide', data:newCustomerPercentList],
                    [label: 'Invoices', backgroundColor: defaultColors[2], borderColor: defaultColors[2], fill: false,
                            data: invoiceSummaryNoTotals*.invoiceCount],
            ]
            orderAmountsDatasets = [
                    [label: 'Product Ordered', backgroundColor: defaultColors[0], borderColor: defaultColors[0], fill: false,
                            data: orderProductSaleTotalList],
                    [label: 'Order Discounts', backgroundColor: defaultColors[1], borderColor: defaultColors[1], fill: false,
                            data: orderSummaryNoTotals*.discountTotal.collect({ -it.setScale(2, RoundingMode.HALF_UP) })],
                    [label: 'Discount %', backgroundColor: defaultColors[3].replace('1.0', '0.5'), borderColor: defaultColors[3].replace('1.0', '0.5'), fill: false,
                            yAxisID: 'rightSide', data: orderDiscountPercentList ],
            ]
            invoiceMarginDatasets = [
                    [label: 'Product Invoiced', backgroundColor: defaultColors[0], borderColor: defaultColors[0], fill: false, type:'line',
                            data: invoiceSummaryNoTotals*.productSaleTotal.collect({ it.setScale(2, RoundingMode.HALF_UP) })],
                    [label: 'Invoice Discounts', backgroundColor: defaultColors[1].replace('1.0', '0.4'), borderColor: defaultColors[1], stack:'DiscCost',
                            data: invoiceSummaryNoTotals*.discountTotal.collect({ -it.setScale(2, RoundingMode.HALF_UP) })],
                    [label: 'Product Cost', backgroundColor: defaultColors[4].replace('1.0', '0.4'), borderColor: defaultColors[4], stack:'DiscCost',
                            data: invoiceSummaryNoTotals*.productCostTotal.collect({ it.setScale(2, RoundingMode.HALF_UP) })],
            ]
            discountCostDatasets = [
                    [label: 'Order Discount %', backgroundColor: defaultColors[0], borderColor: defaultColors[0], fill: false,
                            data: orderDiscountPercentList],
                    [label: 'Invoice Discount %', backgroundColor: defaultColors[1], borderColor: defaultColors[1], fill: false,
                            data: invoiceDiscountPercentList],
                    [label: 'Invoice Cost %', backgroundColor: defaultColors[2], borderColor: defaultColors[2], fill: false,
                            data: invoiceCostPercentList],
            ]]]></script><set field="statsPanelColStyle" value="col-lg-3 col-md-4 col-sm-4 col-xs-6"/><set field="statsChartColStyle" value="col-md-6 col-sm-6"/><if condition="vendorPartyIds"><set field="vendorPartyIdList" from="vendorPartyIds instanceof List ? vendorPartyIds : (vendorPartyIds.split(',') as List)"/><entity-find entity-name="mantle.party.PartyDetail" list="selectedVendorPartyList"><econdition field-name="partyId" operator="in" from="vendorPartyIdList"/><order-by field-name="pseudoId"/></entity-find></if><if condition="productStoreIds"><set field="productStoreIdList" from="productStoreIds instanceof List ? productStoreIds : (productStoreIds.split(',') as List)"/><entity-find entity-name="mantle.product.store.ProductStore" list="selectedProductStoreList"><econdition field-name="productStoreId" operator="in" from="productStoreIdList"/><order-by field-name="storeName"/></entity-find></if><if condition="customerClassificationIds"><set field="customerClassificationIdList" from="customerClassificationIds instanceof List ? customerClassificationIds : (customerClassificationIds.split(',') as List)"/><entity-find entity-name="mantle.party.PartyClassification" list="selectedClassificationList"><econdition field-name="partyClassificationId" operator="in" from="customerClassificationIdList"/><order-by field-name="description"/></entity-find></if><if condition="customerPartyIds"><set field="customerPartyIdList" from="customerPartyIds instanceof List ? customerPartyIds : (customerPartyIds.split(',') as List)"/><entity-find entity-name="mantle.party.PartyDetail" list="selectedCustomerPartyList"><econdition field-name="partyId" operator="in" from="customerPartyIdList"/><order-by field-name="pseudoId"/></entity-find></if><if condition="productIds"><set field="productIdList" from="productIds instanceof List ? productIds : (productIds.split(',') as List)"/><entity-find entity-name="mantle.product.Product" list="selectedProductList"><econdition field-name="productId" operator="in" from="productIdList"/><order-by field-name="pseudoId"/></entity-find></if></actions></transition>