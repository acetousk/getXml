<!--Transition Screen Location component://SimpleScreens/screen/SimpleScreens/Shipping/PackShipment/PackSummary.xml Transition Name actions--><transition name="actions"><parameter name="shipmentId" required="true"/><parameter name="shipmentId"/><parameter name="shipmentPackageSeqId"/><parameter name="shipmentRouteSegmentSeqId"/><parameter name="retLabel"/><parameter name="intlInvoiceLabel"/><parameter name="shipmentId" required="true"/><parameter name="shipmentPackageSeqId" required="true"/><parameter name="shipmentBoxTypeId"/><parameter name="weightUomId"/><parameter name="weightFormat"/><parameter name="term"/><parameter name="productId"/><parameter name="facilityId"/><parameter name="ownerPartyId"/><parameter name="assetTypeEnumId"/><parameter name="classEnumId"/><parameter name="assetOrderBy"/><parameter name="excludeZeroQoh"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://SimpleScreens/screen/BasicHandheld/Warehouse.xml--><set field="appRoot" value="hhwh"/><set field="searchIndexName" value="mantle"/><set field="searchProductDocType" value="MantleProduct"/><set field="searchPartyDocType" value="MantleParty"/><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--actions--><service-call name="mantle.shipment.ShipmentInfoServices.get#ShipmentDisplayInfo" in-map="[shipmentId:shipmentId]" out-map="context"/><if condition="!isOutgoing && !isTransfer"><return error="true" message="Shipment ${shipmentId} is not an outgoing or transfer shipment"/></if><set field="statusPrePacked" from="shipment.statusId in ['ShipInput', 'ShipScheduled', 'ShipPicked']"/><entity-find entity-name="mantle.facility.FacilityBoxTypeDetail" list="boxTypeList"><econdition field-name="facilityId" from="firstRouteSegment.originFacilityId"/><order-by field-name="description"/></entity-find><if condition="!boxTypeList"><entity-find entity-name="mantle.shipment.ShipmentBoxType" list="boxTypeList"><order-by field-name="description"/></entity-find></if><set field="shippingPostalAddressList" from="[]"/><if condition="isOutgoing && toPartyId"><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="toPartyShippingInfo" in-map="[partyId:toPartyId, postalContactMechPurposeId:'PostalShippingDest']"/><set field="shippingPostalAddressList" from="toPartyShippingInfo.postalAddressList ?: []"/><if condition="lastRouteSegment.destPostalContactMechId"><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="curDestPaInfo" in-map="[partyId:toPartyId, postalContactMechId:lastRouteSegment.destPostalContactMechId]"/><if condition="!(lastRouteSegment.destPostalContactMechId in shippingPostalAddressList*.postalContactMechId)"><script><![CDATA[shippingPostalAddressList.add(0, curDestPaInfo)]]></script></if></if></if><set field="activePackage" from="shipmentPackageList?.find({ it.weight == null || it.shipmentBoxTypeId == null })"/><set field="activePackageSeqId" from="activePackage?.shipmentPackageSeqId"/><if condition="activePackage != null"><set field="activePackageRouteSeg" from="packageRouteSegList.find({ it.shipmentPackageSeqId == activePackage.shipmentPackageSeqId && it.shipmentRouteSegmentSeqId == firstRouteSegment.shipmentRouteSegmentSeqId })"/><script><![CDATA[activePackageAndRouteSeg = new HashMap(activePackage); activePackageAndRouteSeg.putAll(activePackageRouteSeg)]]></script></if><entity-find entity-name="mantle.shipment.ShipmentOrderPayment" list="shipmentPaymentList" distinct="true"><econdition field-name="shipmentId"/><econdition field-name="statusId" operator="not-in" value="PmntCancelled,PmntVoid"/><select-field field-name="paymentId,paymentInstrumentEnumId,statusId"/></entity-find><set field="packagesComplete" from="shipmentPackageList" type="Boolean"/><iterate list="shipmentPackageList" entry="shipmentPackage"><set field="shipmentPackageContentList" from="allShipmentPackageContentList.findAll({ it.shipmentPackageSeqId == shipmentPackage.shipmentPackageSeqId })"/><if condition="shipmentPackageContentList && (!shipmentPackage.shipmentBoxTypeId || !shipmentPackage.weight)"><set field="packagesComplete" from="false"/><break/></if></iterate><set field="localPrintAllLabels" from="false"/><if condition="ec.web.sessionAttributes.get('qzPackShipment' + shipmentId)"><set field="localPrintAllLabels" from="true"/><script><![CDATA[ec.web.sessionAttributes.put('qzPackShipment' + shipmentId, false)]]></script></if><set field="getShipmentLabelPath" from="sri.buildUrl('getShipmentLabel').path"/><set field="defaultNetworkPrinterId" from="ec.user.getPreference('Shipment.networkPrinterId.default')"/><entity-find entity-name="moqui.basic.print.NetworkPrinter" list="networkPrinterList"><order-by field-name="description,printerName"/></entity-find></actions></transition>