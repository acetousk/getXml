<!--Transition Screen Location component://SimpleScreens/screen/SimpleScreens/Asset/Asset/FindAsset.xml Transition Name getProductList--><transition name="getProductList"><parameter name="term"/><parameter name="mfgPartyId"/><parameter name="term"/><parameter name="ownerPartyId"/><parameter name="partyId"/><parameter name="productStoreId"/><parameter name="term"/><parameter name="roleTypeId"/><parameter name="indexName"/><parameter name="documentType"/><parameter name="partyTypeEnumId"/><parameter name="includeDisabled"/><parameter name="restrictActiveOrg"/><parameter name="pageIndex"/><parameter name="term"/><parameter name="facilityTypeEnumId"/><parameter name="parentFacilityId"/><parameter name="ownerPartyId"/><parameter name="term"/><parameter name="facilityId"/><parameter name="locationSeqId"/><parameter name="term"/><parameter name="facilityId"/><parameter name="locationTypeEnumId"/><parameter name="term"/><parameter name="productFeatureIds"/><parameter name="productTypeEnumId"/><parameter name="productClassEnumId"/><parameter name="productCategoryIds"/><parameter name="assetTypeEnumId"/><parameter name="assetClassEnumId"/><parameter name="indexName"/><parameter name="documentType"/><parameter name="pageIndex"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://PopCommerce/screen/PopCommerceAdmin.xml--><set field="appRoot" value="PopcAdmin"/><set field="searchIndexName" value="mantle"/><set field="searchLinkSets" value="PopcAdmin"/><set field="searchProductDocType" value="MantleProduct"/><set field="searchPartyDocType" value="MantleParty"/><set field="appUserGroupTypeEnumId" value="UgtPopcAdmin"/><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--transition actions--><set field="indexName" from="indexName ?: searchIndexName ?: 'mantle'"/><set field="documentType" from="documentType ?: searchProductDocType ?: 'MantleProduct'"/><set field="outList" from="[]"/><entity-find-one entity-name="mantle.product.Product" value-field="product"><field-map field-name="productId" from="term"/></entity-find-one><if condition="product != null"><then><script><![CDATA[outList.add([value:product.productId, label:ec.resource.expand("ProductNameTemplate", "", product)])]]></script></then><else><entity-find-one entity-name="mantle.product.Product" value-field="pseudoProduct"><field-map field-name="pseudoId" from="term"/></entity-find-one><if condition="pseudoProduct != null"><script><![CDATA[outList.add([value:pseudoProduct.productId, label:ec.resource.expand("ProductNameTemplate", "", pseudoProduct)])]]></script></if></else></if><set field="activeOrgId" from="ec.user.context?.activeOrgId"/><set field="filterOrgIds" from="ec.user.context?.filterOrgIds"/><set field="findFilters" from="ec.artifactExecution.getFindFiltersForUser('mantle.product.Product')"/><if condition="findFilters"><set field="entityFilterSetId" from="findFilters[0].entityFilterSetId"/></if><script><![CDATA[StringBuilder termSb = new StringBuilder('(')
                termSb.append(elasticQueryAutoWildcard(term, false)).append(')')
                if (productFeatureIds) {
                    List productFeatureIdList = productFeatureIds.split(',')
                    // NOTE: using features.productFeatureId instead of plain productFeatureId as newer ElasticSearch doesn't search in nested fields
                    termSb.append(' AND features.productFeatureId:')
                    if (productFeatureIdList.size() > 1) termSb.append('(')
                    for (int i = 0; i < productFeatureIdList.size(); i++) {
                        termSb.append(productFeatureIdList.get(i))
                        if (i < (productFeatureIdList.size() - 1)) termSb.append(' OR ')
                    }
                    if (productFeatureIdList.size() > 1) termSb.append(')')
                }
                if (productCategoryIds) {
                    List productCategoryIdList = productCategoryIds.split(',')
                    termSb.append(' AND categories.productCategoryId:')
                    if (productCategoryIdList.size() > 1) termSb.append('(')
                    for (int i = 0; i < productCategoryIdList.size(); i++) {
                        termSb.append(productCategoryIdList.get(i))
                        if (i < (productCategoryIdList.size() - 1)) termSb.append(' OR ')
                    }
                    if (productCategoryIdList.size() > 1) termSb.append(')')
                }
                if (productTypeEnumId) termSb.append(' AND productTypeEnumId:').append(productTypeEnumId)
                if (productClassEnumId) termSb.append(' AND productClassEnumId:').append(productClassEnumId)
                if (assetTypeEnumId) termSb.append(' AND assetTypeEnumId:').append(assetTypeEnumId)
                if (assetClassEnumId) termSb.append(' AND assetClassEnumId:').append(assetClassEnumId)

                if ('MANTLE_USER_ORG'.equals(entityFilterSetId)) {
                    termSb.append(' AND ownerPartyId:(' + filterOrgIds.join(' OR ') + ')')
                } else if ('MANTLE_ACTIVE_ORG'.equals(entityFilterSetId) && activeOrgId) {
                    termSb.append(' AND ownerPartyId:(' + activeOrgId + ' OR _NA_)')
                }]]></script><service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context" ignore-error="true" in-map="[queryString:termSb.toString(), indexName:indexName, documentType:documentType,                         orderByFields:orderByFields, pageIndex:pageIndex, pageSize:(pageSize?:20)]"/><script><![CDATA[for (document in documentList) outList.add([value:document._id, label:ec.resource.expand("ProductNameTemplate", "", [productName:document.name,productId:document._id,pseudoId:document.pseudoId])])
                if (pageIndex) ec.web.sendJsonResponse([options:outList, pageSize:documentListPageSize, count:documentListCount])
                else ec.web.sendJsonResponse(outList)]]></script></actions></transition>