<!--Transition Screen Location component://tools/screen/System/LogViewer.xml Transition Name actions--><transition name="actions"><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--actions--><set field="indexName" from="indexName ?: 'moqui_logs'"/><set field="pageIndex" from="(pageIndex?:'0') as int"/><set field="pageSize" from="(pageSize?:'100') as int"/><if condition="!tsPeriod_period && !tsPeriod_from && !tsPeriod_thru"><set field="tsPeriod_period" from="tsPeriod_period ?: '7d'"/><set field="tsPeriod_poffset" from="tsPeriod_poffset ?: '-1'"/></if><set field="tsList" from="ec.user.getPeriodRange('tsPeriod', context)"/><script><![CDATA[/* useful docs for query API: https://www.elastic.co/guide/reference/api/search/uri-request/ */

            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec

            def elasticClient = ec.factory.elastic.getClient("logger") ?: ec.factory.elastic.getClient("default")
            if (elasticClient == null) {
                ec.message.addError("Could not find ElasticClient for cluster name logger or default")
                return
            }

            int fromOffset = pageIndex * pageSize
            int sizeLimit = pageSize

            // build query string
            if (tsList != null && (tsList.get(0) != null || tsList.get(1) != null)) {
                actualQuery = '@timestamp:[' + (tsList.get(0) != null ? tsList.get(0).time : '*') + ' TO ' + (tsList.get(1) != null ? tsList.get(1).time : '*') + ']'
                if (queryString) actualQuery = actualQuery + ' AND (' + queryString + ')'
            } else {
                actualQuery = queryString ?: '*'
            }

            // query string: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html
            // had time_zone but shouldn't matter using epoch_millis format and causes issues sometimes: time_zone:TimeZone.default.getID()
            Map queryMap = [query_string:[query:actualQuery, lenient:true]]
            Map searchMap = [query:queryMap, from:fromOffset, size:sizeLimit, track_total_hits:true, sort:[['@timestamp':'desc']]]

            // validate the query
            // TODO: consider pulling error message from ElasticSearch, but they are pretty ugly
            Map validateRespMap = elasticClient.validateQuery((String) indexName, queryMap, true)
            if (validateRespMap != null) {
                ec.message.addMessage("Invalid search: ${queryString}", "danger")
                List explanations = (List) validateRespMap.explanations
                if (explanations) for (Map explanation in explanations) ec.message.addMessage(explanation.error, "danger")
                return
            }

            // get the search hits
            Map resultMap = elasticClient.search((String) indexName, searchMap)
            Map hitsMap = (Map) resultMap.hits

            List<Map> hitsList = (List<Map>) hitsMap.hits
            documentList = []
            for (Map hit in hitsList) {
                Map document = (Map) hit._source
                document._id = hit._id
                documentList.add(document)
            }

            // get the total search count
            documentListCount = hitsMap.total.value

            // calculate the pagination values
            documentListPageIndex = pageIndex
            documentListPageSize = pageSize
            documentListPageMaxIndex = ((BigDecimal) documentListCount - 1).divide(documentListPageSize, 0, BigDecimal.ROUND_DOWN) as int
            documentListPageRangeLow = documentListPageIndex * documentListPageSize + 1
            documentListPageRangeHigh = (documentListPageIndex * documentListPageSize) + documentListPageSize
            if (documentListPageRangeHigh > documentListCount) documentListPageRangeHigh = documentListCount

            // show in reverse order, but still higher pages going back in time
            documentList = documentList.reverse()]]></script></actions></transition>