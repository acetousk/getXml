<!--Transition Screen Location component://HiveMind/screen/HiveMindRoot/dashboard/QuickSearch.xml Transition Name getSearchOptions--><transition name="getSearchOptions"><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://HiveMind/screen/HiveMindRoot.xml--><set field="appRoot" value="hm"/><set field="searchIndexName" value="mantle"/><set field="searchLinkSets" value="hm"/><set field="searchTaskDocType" value="MantleTask"/><set field="searchPartyDocType" value="MantleParty"/><!--transition actions--><script><![CDATA[queryString = (term.split(' ') as List).collect({ it.matches(/\w*/) ? (it + '*') : it }).join(' ')]]></script><service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context" in-map="[queryString:queryString, indexName:'mantle', documentType:'MantleWikiPage,MantleProject,MantleTask,MantleRequest']"/><set field="outList" from="[]"/><iterate list="documentList" entry="document"><entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="dataDocument" cache="true"><field-map field-name="dataDocumentId" from="document._type"/></entity-find-one><if condition="!dataDocument"><log message="DataDocument not found for document:\n${document}"/><continue/></if><entity-find entity-name="moqui.entity.document.DataDocumentLink" list="ddLinkList" cache="true"><econdition field-name="dataDocumentId" from="document._type"/><econdition field-name="linkSet" value="hm"/><econdition field-name="linkCondition" operator="is-null"/></entity-find><set field="dataDocumentLink" from="ddLinkList ? ddLinkList[0] : null"/><set field="linkUrl" from="ec.resource.expand(dataDocumentLink?.linkUrl, '', document)"/><if condition="dataDocumentLink?.urlType == 'transition' || dataDocumentLink?.urlType == 'screen'"><then><set field="linkUrlInstance" from="org.moqui.impl.screen.ScreenUrlInfo.getScreenUrlInfo(sri, null, null, linkUrl, 0).getInstance(sri, true)"/><set field="urlToOpen" from="linkUrlInstance.pathWithParams"/></then><else><set field="urlToOpen" from="ec.web.getWebappRootUrl(false, null) + ec.resource.expand(dataDocumentLink?.linkUrl, '', document)"/></else></if><set field="documentTitle" from="ec.resource.expand(dataDocument.documentTitle, '', document)"/><script><![CDATA[outList.add([value:document._id, urlToOpen:urlToOpen, label:"${dataDocument.documentName} - ${document._id}: ${documentTitle}".toString()])]]></script></iterate><script><![CDATA[ec.web.sendJsonResponse(outList)]]></script></actions></transition>