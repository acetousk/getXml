<!--Transition Screen Location component://SimpleScreens/screen/SimpleScreens/Accounting/Reports/ArAgingSummary.xml Transition Name actions--><transition name="actions"><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://PopCommerce/screen/PopCommerceAdmin.xml--><set field="appRoot" value="PopcAdmin"/><set field="searchIndexName" value="mantle"/><set field="searchLinkSets" value="PopcAdmin"/><set field="searchProductDocType" value="MantleProduct"/><set field="searchPartyDocType" value="MantleParty"/><set field="appUserGroupTypeEnumId" value="UgtPopcAdmin"/><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--actions--><set field="pageNoLimit" value="true"/><set field="periodDays" from="(periodDays ?: '30') as int"/><set field="periodDaysBd" from="new BigDecimal(periodDays)"/><set field="dateField" from="dateField ?: 'invoiceDate'"/><set field="asOfDate" from="asOfDate ? ec.l10n.parseTimestamp(asOfDate + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS', null, TimeZone.getDefault()) : ec.user.nowTimestamp"/><set field="orderBySave" from="orderByField ?: 'toName'"/><set field="orderByField" from="null"/><entity-find entity-name="mantle.account.invoice.InvoicePaymentApplicationSummary" list="invoiceAgingList" use-clone="true"><search-form-inputs/><econditions combine="or"><econditions><econdition field-name="isAdjustment" operator="not-equals" value="Y" or-null="true"/><econdition field-name="itemInvoiceDate" operator="less-equals" from="asOfDate"/></econditions><econditions><econdition field-name="isAdjustment" value="Y"/><econdition field-name="itemDate" operator="less-equals" from="asOfDate"/></econditions></econditions><econdition field-name="appliedDate" operator="less-equals" from="asOfDate"/><econdition field-name="toAppliedDate" operator="less-equals" from="asOfDate"/><econdition field-name="fromRoleTypeId" ignore-if-empty="true"/><econdition field-name="toRoleTypeId" ignore-if-empty="true"/><econditions combine="or"><econdition field-name="itemsTotal" operator="not-equals" to-field-name="totalAmountApplied"/><econditions><econdition field-name="itemsTotal" operator="not-equals" from="0.0"/><econdition field-name="amountApplied" operator="is-null"/><econdition field-name="toAmountApplied" operator="is-null"/></econditions></econditions><econdition field-name="statusId" operator="in" value="InvoiceFinalized,InvoiceSent,InvoiceAcked,InvoicePmtRecvd,InvoiceWriteOff"/><select-field field-name="fromPartyId,toPartyId,toPseudoId,toName,invoiceId,invoiceDate,dueDate"/><select-field field-name="itemsTotal,amountApplied,toAmountApplied"/></entity-find><entity-find entity-name="mantle.account.payment.PaymentAndApplicationSummary" list="paymentAndAppList" use-clone="true"><econdition field-name="fromPartyId" from="toPartyId" ignore-if-empty="true"/><econdition field-name="toPartyId" from="fromPartyId" ignore-if-empty="true"/><econdition field-name="paymentTypeEnumId" operator="in" value="PtInvoicePayment,PtPrePayment,PtPrePaymentInventory"/><econdition field-name="statusId" operator="in" value="PmntDelivered,PmntConfirmed"/><econdition field-name="amount" operator="greater" from="0.0"/><econdition field-name="effectiveDate" operator="less-equals" from="asOfDate"/><econdition field-name="appliedDate" operator="less-equals" from="asOfDate"/><econdition field-name="toAppliedDate" operator="less-equals" from="asOfDate"/><econditions combine="or"><econdition field-name="amount" operator="not-equals" to-field-name="amountApplied"/><econditions combine="and"><econdition field-name="amountApplied" operator="is-null"/><econdition field-name="toAmountApplied" operator="is-null"/></econditions></econditions><select-field field-name="fromPartyId,toPartyId,paymentId,amount,amountApplied,toAmountApplied"/></entity-find><set field="orderByField" from="orderBySave"/><set field="agingInfoByToPartyId" from="[:]"/><set field="totalsRow" from="[toName:'Totals']"/><script><![CDATA[for (invoice in invoiceAgingList) {
                BigDecimal unpaidAmount = invoice.itemsTotal - (invoice.amountApplied ?: 0.0) - (invoice.toAmountApplied ?: 0.0)
                if (unpaidAmount == 0.0) continue

                String toPartyId = invoice.toPartyId
                Map toPartyInfo = agingInfoByToPartyId.get(toPartyId)
                if (toPartyInfo == null) {
                    toPartyInfo = invoice.getMap()
                    agingInfoByToPartyId.put(toPartyId, toPartyInfo)
                    toPartyInfo.count = 1
                } else {
                    toPartyInfo.count++
                }

                Timestamp dateTs = invoice.get(dateField)
                Integer dateDays = dateTs != null ? asOfDate - dateTs : null
                Integer dateIdx = dateDays != null ? (dateDays < 0 ? 0 :
                        ((dateDays as BigDecimal) / periodDaysBd).setScale(0, BigDecimal.ROUND_DOWN).intValue() + 1) : null
                if (dateIdx != null && dateIdx > 4) dateIdx = 4
                if (dateIdx != null) {
                    addToBigDecimalInMap("period" + dateIdx, unpaidAmount, toPartyInfo)
                    addToBigDecimalInMap("period" + dateIdx, unpaidAmount, totalsRow)
                }
                addToBigDecimalInMap("unpaidAmount", unpaidAmount, toPartyInfo)
                addToBigDecimalInMap("unpaidAmount", unpaidAmount, totalsRow)
                addToBigDecimalInMap("balanceDue", unpaidAmount, toPartyInfo)
                addToBigDecimalInMap("balanceDue", unpaidAmount, totalsRow)
                addToListInMap("invoiceIds", invoice.invoiceId, toPartyInfo)
            }]]></script><script><![CDATA[for (payment in paymentAndAppList) {
                BigDecimal unappliedAmount = payment.amount - (payment.amountApplied ?: 0.0) - (payment.toAmountApplied ?: 0.0)
                if (unappliedAmount == 0.0) continue

                String toPartyId = payment.fromPartyId // yes, fromPartyId; invoice.toPartyId = payment.fromPartyId
                Map toPartyInfo = agingInfoByToPartyId.get(toPartyId)
                if (toPartyInfo == null) {
                    Map party = ec.entity.find("mantle.party.PartyDetail").condition("partyId", toPartyId).one()
                    toPartyInfo = [toPartyId:toPartyId, toPseudoId:party.pseudoId,
                            toName:"${party.firstName ? party.firstName + ' ' : ''}${party.lastName?:''}${party.organizationName?:''}".toString()]
                    agingInfoByToPartyId.put(toPartyId, toPartyInfo)
                }

                addToBigDecimalInMap("unappliedTotal", unappliedAmount, toPartyInfo)
                addToBigDecimalInMap("unappliedTotal", unappliedAmount, totalsRow)
                addToBigDecimalInMap("balanceDue", -unappliedAmount, toPartyInfo)
                addToBigDecimalInMap("balanceDue", -unappliedAmount, totalsRow)
                addToListInMap("paymentIds", payment.paymentId, toPartyInfo)
            }]]></script><set field="agingInfoList" from="new ArrayList(agingInfoByToPartyId.values())"/><script><![CDATA[orderMapList(agingInfoList, orderByField.split(',') as List)]]></script><script><![CDATA[agingInfoList.add(totalsRow)
            BigDecimal unpaidAmount = totalsRow.unpaidAmount
            if (unpaidAmount) agingInfoList.add([toName:'Percent', period0:((totalsRow.period0 ?: 0.0)/unpaidAmount)*100.0,
                    period1:((totalsRow.period1 ?: 0.0)/unpaidAmount)*100.0, period2:((totalsRow.period2 ?: 0.0)/unpaidAmount)*100.0,
                    period3:((totalsRow.period3 ?: 0.0)/unpaidAmount)*100.0, period4:((totalsRow.period4 ?: 0.0)/unpaidAmount)*100.0])]]></script></actions></transition>