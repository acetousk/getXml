<!--Transition Screen Location component://tools/screen/Tools/DataView/EditDbView.xml Transition Name setMasterFields--><transition name="setMasterFields"><parameter name="dbViewEntityName" required="true" from="dbViewEntityName ?: dbViewEntityName_0"/><parameter name="dbViewEntityName_0"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--transition actions--><set field="dbViewEntityName" from="dbViewEntityName_0"/><entity-find-one entity-name="moqui.entity.view.DbViewEntity" value-field="dbViewEntity"/><entity-find-one entity-name="moqui.entity.view.DbViewEntityMember" value-field="masterDbViewEntityMember"><field-map field-name="dbViewEntityName" from="dbViewEntityName"/><field-map field-name="entityAlias" value="MASTER"/></entity-find-one><set field="masterEntityName" from="masterDbViewEntityMember.entityName"/><entity-delete-related value-field="dbViewEntity" relationship-name="moqui.entity.view.DbViewEntityAlias"/><entity-delete-related value-field="dbViewEntity" relationship-name="moqui.entity.view.DbViewEntityKeyMap"/><entity-delete-by-condition entity-name="moqui.entity.view.DbViewEntityMember"><econdition field-name="dbViewEntityName" from="dbViewEntityName"/><econdition field-name="entityAlias" operator="not-equals" value="MASTER"/></entity-delete-by-condition><script><![CDATA[import org.moqui.impl.entity.EntityDefinition
                import org.moqui.impl.entity.EntityJavaUtil
                // make sure reverse-one many relationships exist
                ec.entity.createAllAutoReverseManyRelationships()

                EntityDefinition masterEd = ec.entity.getEntityDefinition(masterEntityName)

                Map members = [:]
                int memberIndex = 1
                Map aliasIndexes = [:]
                int parameterIndex = 0
                while (ec.web.parameters.get("dbViewEntityName_" + parameterIndex)) {
                    String field = ec.web.parameters.get("field_" + parameterIndex)
                    String functionName = ec.web.parameters.get("functionName_" + parameterIndex)
                    // ec.logger.log(ec.logger.WARN_INT, "Field field_${parameterIndex}, value: ${field}", null)
                    parameterIndex++

                    if (!field) continue

                    String entityName
                    String fieldName

                    String relationshipName = field.substring(0, field.lastIndexOf('.'))
                    EntityJavaUtil.RelationshipInfo relInfo = masterEd.getRelationshipInfo(relationshipName)
                    if (relInfo != null) {
                        entityName = relInfo.relatedEntityName
                        fieldName = field.substring(field.lastIndexOf('.') + 1)
                    } else if (relationshipName == masterEntityName) {
                        entityName = masterEntityName
                        fieldName = field.substring(field.lastIndexOf('.') + 1)
                    } else {
                        ec.message.addError(ec.resource.expand('No relationship definition found for name ${relationshipName}',''))
                        continue
                    }

                    // ec.logger.log(ec.logger.WARN_INT, "relationshipName: ${relationshipName}, entityName: ${entityName}, fieldName: ${fieldName}", null)
                    def memberValue = (relationshipName == masterDbViewEntityMember.entityName) ?
                            masterDbViewEntityMember : members.get(entityName)
                    if (!memberValue) {
                        memberValue = ec.entity.makeValue("moqui.entity.view.DbViewEntityMember")
                        memberValue.dbViewEntityName = dbViewEntityName
                        memberValue.entityName = entityName
                        memberValue.entityAlias = "MEMBER${memberIndex}"
                        memberValue.joinFromAlias = "MASTER"
                        memberValue.joinOptional = "Y"
                        memberIndex++
                        memberValue.create()
                        members.put(entityName, memberValue)

                        // added a member, add KeyMap(s)
                        Map relExpKeyMap = relInfo.keyMap
                        for (Map.Entry keyMapEntry in relExpKeyMap) {
                            def keyMapValue = ec.entity.makeValue("moqui.entity.view.DbViewEntityKeyMap")
                            keyMapValue.dbViewEntityName = dbViewEntityName
                            keyMapValue.joinFromAlias = memberValue.joinFromAlias
                            keyMapValue.entityAlias = memberValue.entityAlias
                            keyMapValue.fieldName = keyMapEntry.getKey()
                            keyMapValue.relatedFieldName = keyMapEntry.getValue()
                            keyMapValue.create()
                        }
                    }

                    int fieldAliasIndex = aliasIndexes.get(fieldName) ?: 0
                    fieldAliasIndex++
                    aliasIndexes.put(fieldName, fieldAliasIndex)

                    def aliasValue = ec.entity.makeValue("moqui.entity.view.DbViewEntityAlias")
                    aliasValue.dbViewEntityName = dbViewEntityName
                    aliasValue.fieldAlias = fieldName + (fieldAliasIndex > 1 ? fieldAliasIndex : '')
                    aliasValue.entityAlias = memberValue.entityAlias
                    aliasValue.fieldName = fieldName
                    if (functionName) aliasValue.functionName = functionName
                    aliasValue.create()
                }

                // clear the entity definition cache for dbViewEntityName
                ec.entity.clearEntityDefinitionFromCache(dbViewEntityName)]]></script></actions></transition>