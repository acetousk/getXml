<!--Transition Screen Location component://coarchy/screen/coarchy/cointernal/Products/EvalReports.xml Transition Name generateEvaluationReport--><transition name="generateEvaluationReport"><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://coarchy/screen/coarchy/cointernal.xml--><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--transition actions--><entity-find-one entity-name="mantle.party.Organization" value-field="activeOrg"><field-map field-name="partyId" from="activeOrgId"/></entity-find-one><service-call name="coarchy.ReportServices.prepare#EvaluationStatementReport" in-map="context+[organizationId:activeOrgId]" out-map="statementsOut"/><service-call name="coarchy.ReportServices.prepare#EvaluationStoryReport" in-map="context+[organizationId:activeOrgId]" out-map="storyOut"/><service-call name="coarchy.ReportServices.prepare#EvaluationSummary" in-map="context+[organizationId:activeOrgId]" out-map="summaryOut"/><script><![CDATA[import java.io.OutputStream;

                import org.apache.poi.ss.usermodel.*;
                import org.apache.poi.xssf.usermodel.XSSFSheet;
                import org.apache.poi.xssf.usermodel.XSSFWorkbook;

                import org.moqui.context.ExecutionContext
                ExecutionContext ec = context.ec

                def response = ec.web.response
                def filename = "EvaluationReport_${activeOrg?.organizationName}_${ec.l10n.format(ec.user.nowTimestamp, 'yyyyMMdd_HHmm')}"

                response.setCharacterEncoding("UTF-8")
                response.setContentType('application/vnd.ms-excel')
                response.setHeader("Cache-Control", "no-cache, must-revalidate, private")
                response.setHeader("Content-Disposition", "attachment; filename=\"${filename}.xlsx\";")

                CellStyle makeHeaderStyle(Workbook wb) {
                    Font headerFont = wb.createFont()
                    headerFont.setBold(true)
                    headerFont.setFontHeight(9);
            
                    CellStyle style = createNoBorderStyle(wb)
                    style.setAlignment(HorizontalAlignment.LEFT)
                    style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex())
                    style.setFillPattern(FillPatternType.SOLID_FOREGROUND)
                    style.setFont(headerFont)
            
                    return style
                }        
                CellStyle makeRowDefaultStyle(Workbook wb) {
                    Font rowFont = wb.createFont()
                    rowFont.setBold(false)
                    rowFont.setFontHeight(9);

                    CellStyle style = createNoBorderStyle(wb)
                    style.setAlignment(HorizontalAlignment.LEFT)
                    style.setFont(rowFont)
                    style.setWrapText(true)
            
                    return style
                }
                CellStyle createBorderedStyle(Workbook wb){
                    BorderStyle thin = BorderStyle.THIN
                    short black = IndexedColors.BLACK.getIndex()
            
                    CellStyle style = wb.createCellStyle()
                    style.setBorderRight(thin)
                    style.setRightBorderColor(black)
                    style.setBorderBottom(thin)
                    style.setBottomBorderColor(black)
                    style.setBorderLeft(thin)
                    style.setLeftBorderColor(black)
                    style.setBorderTop(thin)
                    style.setTopBorderColor(black)
                    return style
                }
                CellStyle createNoBorderStyle(Workbook wb) {
                    BorderStyle noBorder = BorderStyle.NONE
                    CellStyle style = wb.createCellStyle()
                    style.setBorderRight(noBorder)
                    style.setBorderBottom(noBorder)
                    style.setBorderLeft(noBorder)
                    style.setBorderTop(noBorder)
                    style.setVerticalAlignment(VerticalAlignment.TOP)
                    // logger.warn("created no border style ${style.properties}")
                    return style
                }
                
                XSSFWorkbook workbook = new XSSFWorkbook();
                CellStyle headerStyle = makeHeaderStyle(workbook)
                CellStyle rowDefaultStyle = makeRowDefaultStyle(workbook)
        
                // Prepare summary sheet
                XSSFSheet summary = workbook.createSheet("Summary");
                def summaryFieldMapList = [
                    [key:'productName', 'label':'Product', sequenceNum:1],
                    [key:'evalCount', 'label':'Evaluations (ct.)', sequenceNum:2],
                    [key:'avgInternalRating', 'label':'Internal Rating (avg)', sequenceNum:3],
                    [key:'avgVendorRating', 'label':'Vendor Rating (avg)', sequenceNum:4],
                    [key:'internalFullGapCount', 'label':'Internal Full Gap (ct.)', sequenceNum:5],
                    [key:'vendorFullGapCount', 'label':'Vendor Full Gap (ct.)', sequenceNum:6],
                    [key:'internalPartialOverlapCount', 'label':'Internal Partial Overlap (ct.)', sequenceNum:7],
                    [key:'vendorPartialOverlapCount', 'label':'Vendor Partial Overlap (ct.)', sequenceNum:8],
                    [key:'internalFullOverlapCount', 'label':'Internal Full Overlap (ct.)', sequenceNum:9],
                    [key:'vendorFullOverlapCount', 'label':'Vendor Full Overlap (ct.)', sequenceNum:10],
                ];

                int rowIndex = 0;
                int columnIndex = 0;
                Row row = summary.createRow(rowIndex++);

                // Create headers
                for (def fieldMap : summaryFieldMapList) {
                    Cell cell = row.createCell(columnIndex++);
                    cell.setCellStyle(headerStyle)                    
                    cell.setCellValue(fieldMap.label);
                }

                // Create data
                for (Map dataRow : summaryOut.outList) {
                    row = summary.createRow(rowIndex++);
                    columnIndex = 0;
                    
                    for (Map fieldMap : summaryFieldMapList) {
                        Cell cell = row.createCell(columnIndex++);
                        cell.setCellStyle(rowDefaultStyle)
                        def val = dataRow[fieldMap.key];     
                        if (val instanceof String) {
                            cell.setCellValue((String) val);
                        } else if (val instanceof Integer) {
                            cell.setCellValue((Integer) val);
                        } else if (val instanceof ArrayList) {
                            cell.setCellValue(val.join(', '));
                        } else {
                            cell.setCellValue((String) val);
                        }
                    }                        
                }

                for (int c = 0; c <= columnIndex; c++) summary.autoSizeColumn(c)
                for (int r = 0; r <= rowIndex; r++) if (r!=1) row.setHeight((short)-1);

                // Prepare statements sheet
                XSSFSheet statements = workbook.createSheet("Statements");                
                def statementsFieldMapList = [
                    [key:'_index_', 'label':'Seq', sequenceNum:1],
                    [key:'statementValue', 'label':'Statement', sequenceNum:2],
                    [key:'typeEnumId', 'label':'Type', sequenceNum:3],
                    [key:'tags', 'label':'Tags', sequenceNum:4],
                    [key:'evaluationName', 'label':'Evaluation Name', sequenceNum:5],
                    [key:'productName', 'label':'Product', sequenceNum:6],
                    [key:'evaluationByEnumId', 'label':'Response Type', sequenceNum:7],
                    [key:'rating', 'label':'Rating', sequenceNum:8],
                    [key:'implementationStatusEnumId', 'label':'Status', sequenceNum:9],
                    [key:'comments', 'label':'Comments', sequenceNum:10]
                ];

                rowIndex = 0;
                columnIndex = 0;
                row = statements.createRow(rowIndex++);
                
                // Create header
                for (def fieldMap : statementsFieldMapList) {
                    Cell cell = row.createCell(columnIndex++);
                    cell.setCellStyle(headerStyle)
                    cell.setCellValue(fieldMap.label);
                }

                // Create data
                for (Map dataRow : statementsOut.outList) {
                    row = statements.createRow(rowIndex++);                        
                    columnIndex = 0;
                    
                    for (Map fieldMap : statementsFieldMapList) {
                        Cell cell = row.createCell(columnIndex++);
                        cell.setCellStyle(rowDefaultStyle)
                        def val = dataRow[fieldMap.key];
                        if (fieldMap.key == '_index_'){
                            cell.setCellValue(rowIndex-1);
                            continue
                        }
                        if (val instanceof String) {
                            cell.setCellValue((String) val);
                        } else if (val instanceof Integer) {
                            cell.setCellValue((Integer) val);
                        } else if (val instanceof ArrayList) {
                            cell.setCellValue(val.join(', '));
                        } else {
                            cell.setCellValue((String) val);
                        }
                    }
                }

                for (int c = 0; c <= columnIndex; c++) if (c!=1) statements.autoSizeColumn(c) else statements.setColumnWidth(c, 80 * 256);
                for (int r = 0; r <= rowIndex; r++) if (r!=1) row.setHeight((short)-1);

                // Prepare prcess story sheets
                ArrayList<XSSFSheet> processStorySheets = new ArrayList<XSSFSheet>();
                def storyFieldMapList = [
                    [key:'sequence', 'label':'Sequence', sequenceNum:1],
                    [key:'activityText', 'label':'Activity', sequenceNum:1],
                    [key:'evaluationName', 'label':'Evaluation Name', sequenceNum:4],
                    [key:'productName', 'label':'Product', sequenceNum:5],
                    [key:'evaluationByEnumId', 'label':'Response Type', sequenceNum:6],
                    [key:'rating', 'label':'Rating', sequenceNum:7],
                    [key:'implementationStatusEnumId', 'label':'Status', sequenceNum:8],
                    [key:'comments', 'label':'Comments', sequenceNum:9]
                ];
                
                for (Map story: storyOut.outList) {
                    XSSFSheet curSheet = workbook.createSheet('Process Story - ' + story.processStoryName)
                    processStorySheets.add(curSheet);
                 
                    rowIndex = 0;
                    columnIndex = 0;
                    row = curSheet.createRow(rowIndex++);
                    
                    // Create header
                    for (def fieldMap : storyFieldMapList) {
                        Cell cell = row.createCell(columnIndex++);
                        cell.setCellStyle(headerStyle)
                        cell.setCellValue(fieldMap.label);
                    }

                    // Create data
                    for (Map activity : story.activityList) {
                        if (!activity.activityResponses){
                            columnIndex = 0;
                            row = curSheet.createRow(rowIndex++);
                            row.setHeight((short)-1);

                            for (int c = 0; c <= 3; c++) {
                                Cell cell = row.createCell(columnIndex++);
                                cell.setCellStyle(rowDefaultStyle)
                                cell.setCellValue(activity[storyFieldMapList[c].key]);
                            }
                            for (int c = 4; c <= 7; c++) {
                                cell = row.createCell(columnIndex++);
                                cell.setCellStyle(rowDefaultStyle)
                                cell.setCellValue('');
                            }                                                    

                            continue;
                        }

                        for (Map activityResponse : activity.activityResponses) {
                            row = curSheet.createRow(rowIndex++);
                                
                            columnIndex = 0;
                            
                            for (Map field : storyFieldMapList) {
                                Cell cell = row.createCell(columnIndex++);
                                cell.setCellStyle(rowDefaultStyle);
                                def val = activity[field.key]?:activityResponse[field.key];

                                if (val instanceof String) {
                                    cell.setCellValue((String) val);
                                } else if (val instanceof Integer) {
                                    cell.setCellValue((Integer) val);
                                } else if (val instanceof ArrayList) {
                                    cell.setCellValue(val.join(', '));
                                } else {
                                    cell.setCellValue((String) val);
                                }
                            }     
                        }
                    }
                    for (int c = 0; c <= columnIndex; c++) if (c!=1) curSheet.autoSizeColumn(c) else curSheet.setColumnWidth(c, 80 * 256);
                }

                OutputStream os = response.outputStream
                workbook.write(os);
                os.close();]]></script></actions></transition>