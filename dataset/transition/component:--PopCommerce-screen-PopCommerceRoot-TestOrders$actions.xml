<!--Transition Screen Location component://PopCommerce/screen/PopCommerceRoot/TestOrders.xml Transition Name actions--><transition name="actions"><parameter name="numOrders"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://PopCommerce/screen/PopCommerceRoot.xml--><set field="productStoreId" value="POPC_DEFAULT"/><entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/><set field="currencyUomId" from="productStore?.defaultCurrencyUomId"/><set field="priceUomId" from="productStore?.defaultCurrencyUomId"/><set field="defaultLocale" from="productStore?.defaultLocale"/><set field="organizationPartyId" from="productStore?.organizationPartyId"/><set field="vendorPartyId" from="productStore?.organizationPartyId"/><set field="wikiSpaceId" from="productStore?.wikiSpaceId"/><set field="cartOrderId" from="ec.web.sessionAttributes.cartOrderId" set-if-empty="false"/><set field="customerPartyId" from="ec.user.userAccount?.partyId"/><set field="defaultOrderParameters" from="[orderId:cartOrderId, customerPartyId:customerPartyId, currencyUomId:currencyUomId,                 productStoreId:productStoreId, salesChannelEnumId:'ScWeb']"/><!--actions--><script><![CDATA[import org.moqui.context.ExecutionContext
            import org.moqui.context.TransactionFacade
            import org.moqui.impl.context.ArtifactExecutionInfoImpl
            import org.moqui.impl.context.TransactionCache
            ExecutionContext ec = context.ec
            TransactionFacade tf = ec.getTransaction()

            resultMessages = []

            numOrders = (numOrders ?: 10) as int

            ec.user.loginUser("joe@public.com", "moqui")

            long startTime = System.currentTimeMillis()
            for (int i = 0; i < numOrders; i++) {
                if (ec.message.hasError()) break
                boolean beganTransaction = false

                // boolean beganTransaction = tf.begin()
                // ec.transaction.initTransactionCache()
                try {
                    // ec.user.loginUser("joe@public.com", "moqui")

                    Map addOut1 = ec.service.sync().name("mantle.order.OrderServices.add#OrderProductQuantity")
                            .parameters([productId:'DEMO_1_1', quantity:1, customerPartyId:customerPartyId,
                            currencyUomId:currencyUomId, productStoreId:productStoreId]).call()

                    cartOrderId = addOut1.orderId
                    orderPartSeqId = addOut1.orderPartSeqId

                    ec.service.sync().name("mantle.order.OrderServices.add#OrderProductQuantity")
                            .parameters([orderId:cartOrderId, orderPartSeqId:orderPartSeqId, productId:'DEMO_3_1',
                                quantity:1, customerPartyId:customerPartyId, currencyUomId:currencyUomId,
                                productStoreId:productStoreId]).call()
                    ec.service.sync().name("mantle.order.OrderServices.add#OrderProductQuantity")
                            .parameters([orderId:cartOrderId, orderPartSeqId:orderPartSeqId, productId:'DEMO_2_1',
                                quantity:1, customerPartyId:customerPartyId, currencyUomId:currencyUomId,
                                productStoreId:productStoreId]).call()

                    ec.service.sync().name("mantle.order.OrderServices.set#OrderBillingShippingInfo")
                            .parameters([orderId:cartOrderId, paymentMethodId:'CustJqpCc', shippingPostalContactMechId:'CustJqpAddr',
                                shippingTelecomContactMechId:'CustJqpTeln', shipmentMethodEnumId:'ShMthNoShipping',
                                carrierPartyId:'_NA_']).call()

                    ec.service.sync().name("mantle.order.OrderServices.place#Order").parameters([orderId:cartOrderId]).call()

                    // ec.user.logoutUser()
                    // ec.user.loginUser("john.doe", "moqui")

                    ec.service.sync().name("mantle.shipment.ShipmentServices.ship#OrderPart")
                            .parameters([orderId:cartOrderId, orderPartSeqId:orderPartSeqId]).call()

                    // ec.user.logoutUser()

                    resultMessages.add("[${i+1}/${numOrders} - ${System.currentTimeMillis() - startTime}] Created order ${cartOrderId}")
                    ec.logger.info("[${i+1}/${numOrders} - ${System.currentTimeMillis() - startTime}] Created order ${cartOrderId}")
                } catch (Throwable t) {
                    tf.rollback(beganTransaction, "Error running test", t)
                    ec.logger.warn("Error running test" + t.toString())
                } finally {
                    if (beganTransaction && tf.isTransactionInPlace()) {
                        tf.commit()
                    }
                }
            }
            long endTime = System.currentTimeMillis()
            double seconds = (endTime - startTime)/1000
            resultMessages.add("Created and placed ${numOrders} in ${seconds} seconds, ${numOrders/seconds} orders per second")

            def artifactHistory = ec.artifactExecution.history
            ownHotSpotList = ArtifactExecutionInfoImpl.hotSpotByTime(artifactHistory, true, "-time")
            totalHotSpotList = ArtifactExecutionInfoImpl.hotSpotByTime(artifactHistory, false, "-time")

            List<Map> consolidatedList = ArtifactExecutionInfoImpl.consolidateArtifactInfo(artifactHistory)
            printedArtifactInfo = ArtifactExecutionInfoImpl.printArtifactInfoList(consolidatedList)]]></script></actions></transition>