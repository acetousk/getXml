<!--Transition Screen Location component://SimpleScreens/screen/SimpleScreens/Shipment/ShipmentDetail.xml Transition Name actions--><transition name="actions"><parameter name="shipmentId" required="true"/><parameter name="term"/><parameter name="facilityId"/><parameter name="locationSeqId"/><parameter name="shipmentId" required="true"/><parameter name="shipmentPackageSeqId" required="true"/><parameter name="shipmentBoxTypeId"/><parameter name="weightUomId"/><parameter name="weightFormat"/><parameter name="shipmentContentId"/><parameter name="term"/><parameter name="productFeatureIds"/><parameter name="productTypeEnumId"/><parameter name="productClassEnumId"/><parameter name="productCategoryIds"/><parameter name="assetTypeEnumId"/><parameter name="assetClassEnumId"/><parameter name="indexName"/><parameter name="documentType"/><parameter name="pageIndex"/><parameter name="emailMessageId"/><parameter name="term"/><parameter name="productId"/><parameter name="facilityId"/><parameter name="ownerPartyId"/><parameter name="assetTypeEnumId"/><parameter name="classEnumId"/><parameter name="assetOrderBy"/><parameter name="excludeZeroQoh"/><actions><!--always-actions at component://webroot/screen/webroot.xml--><set field="html_scripts" from="new LinkedHashSet()"/><set field="footer_scripts" from="new LinkedHashSet()"/><set field="html_stylesheets" from="new LinkedHashSet()"/><!--always-actions at component://PopCommerce/screen/PopCommerceAdmin.xml--><set field="appRoot" value="PopcAdmin"/><set field="searchIndexName" value="mantle"/><set field="searchLinkSets" value="PopcAdmin"/><set field="searchProductDocType" value="MantleProduct"/><set field="searchPartyDocType" value="MantleParty"/><set field="appUserGroupTypeEnumId" value="UgtPopcAdmin"/><service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" out-map="context"/><!--actions--><set field="defaultItemLimit" from="ec.user.getPreference('shipment.detail.item.limit') ?: '10'"/><set field="pageSize" from="pageSize ?: defaultItemLimit"/><service-call name="mantle.shipment.ShipmentInfoServices.get#ShipmentDisplayInfo" in-map="[shipmentId:shipmentId]" out-map="context"/><set field="activePackage" from="shipmentPackageList?.find({ it.weight == null || it.shipmentBoxTypeId == null })"/><set field="activePackageSeqId" from="activePackage?.shipmentPackageSeqId"/><set field="filteredShipmentPackageList" from="shipmentPackageList"/><if condition="filterProductId"><filter-map-list list="allShipmentPackageContentList" to-list="filteredShipmentPackageContentList"><field-map field-name="productId" from="filterProductId"/></filter-map-list><set field="shipmentPackageSeqIdSet" from="new HashSet(filteredShipmentPackageContentList*.shipmentPackageSeqId)"/><set field="filteredShipmentPackageList" from="shipmentPackageList.findAll({ shipmentPackageSeqIdSet.contains(it.shipmentPackageSeqId) })"/></if><entity-find entity-name="mantle.facility.Facility" list="facilityList"><econdition field-name="facilityTypeEnumId" value="FcTpWarehouse"/><order-by field-name="facilityName"/></entity-find><entity-find entity-name="mantle.order.OrderNote" list="orderNoteList"><econdition field-name="orderId" operator="in" from="orderIdSet"/><order-by field-name="-noteDate"/></entity-find><set field="shippingPostalAddressList" from="[]"/><if condition="(isOutgoing || isTransfer) && toPartyId"><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="toPartyShippingInfo" in-map="[partyId:toPartyId, postalContactMechPurposeId:'PostalShippingDest']"/><set field="shippingPostalAddressList" from="toPartyShippingInfo.postalAddressList ?: []"/><if condition="isTransfer && lastRouteSegment.destinationFacilityId"><service-call name="mantle.facility.ContactServices.get#FacilityContactInfo" out-map="destFacShippingInfo" in-map="[facilityId:lastRouteSegment.destinationFacilityId, postalContactMechPurposeId:'PostalShippingDest']"/><if condition="destFacShippingInfo.postalAddress"><script><![CDATA[shippingPostalAddressList.add(0, destFacShippingInfo)]]></script></if></if><if condition="lastRouteSegment.destPostalContactMechId"><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="curDestPaInfo" in-map="[partyId:toPartyId, postalContactMechId:lastRouteSegment.destPostalContactMechId]"/><if condition="!(lastRouteSegment.destPostalContactMechId in shippingPostalAddressList*.postalContactMechId)"><script><![CDATA[shippingPostalAddressList.add(0, curDestPaInfo)]]></script></if></if></if><if condition="isIncoming && fromPartyId"><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="fromPartyShippingDestInfo" in-map="[partyId:fromPartyId, postalContactMechPurposeId:'PostalShippingDest']"/><service-call name="mantle.party.ContactServices.get#PartyContactInfoList" out-map="fromPartyShippingOriginInfo" in-map="[partyId:fromPartyId, postalContactMechPurposeId:'PostalShippingOrigin']"/><set field="shippingPostalAddressList" from="(fromPartyShippingDestInfo.postalAddressList ?: []) + (fromPartyShippingOriginInfo.postalAddressList ?: [])"/><if condition="firstRouteSegment.originPostalContactMechId"><service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="curOriginPaInfo" in-map="[partyId:fromPartyId, postalContactMechId:firstRouteSegment.originPostalContactMechId]"/><if condition="!(firstRouteSegment.originPostalContactMechId in shippingPostalAddressList*.postalContactMechId)"><script><![CDATA[shippingPostalAddressList.add(0, curOriginPaInfo)]]></script></if></if></if><script><![CDATA[Set replacedPostalIdSet = new HashSet()
            for (int i=0; i < shippingPostalAddressList.size(); i++) {
                String replAddressId = shippingPostalAddressList.get(i).postalContactMech?.replacesContactMechId
                if (replAddressId && !(replAddressId.equals(firstRouteSegment.originPostalContactMechId) || replAddressId.equals(lastRouteSegment.destPostalContactMechId)))
                    replacedPostalIdSet.add(replAddressId)
            }
            Set shippingPostalIdSet = new HashSet()
            for (int i=0; i < shippingPostalAddressList.size(); ) {
                String curAddressId = shippingPostalAddressList.get(i).postalContactMechId
                if (shippingPostalIdSet.contains(curAddressId) || replacedPostalIdSet.contains(curAddressId)) { shippingPostalAddressList.remove(i) }
                else { shippingPostalIdSet.add(curAddressId); i++ }
            }]]></script><if condition="isOutgoing || isTransfer"><service-call name="mantle.shipment.ShipmentInfoServices.get#ShipmentShippingOptions" out-map="context" in-map="[shipmentId:shipmentId, getRates:false]"/></if><entity-find-count entity-name="mantle.shipment.ShipmentEmailMessage" count-field="emailMessageCount"><econdition field-name="shipmentId"/></entity-find-count><entity-find entity-name="mantle.facility.FacilityBoxTypeDetail" list="boxTypeList"><econdition field-name="facilityId" from="firstRouteSegment.originFacilityId"/><order-by field-name="description"/></entity-find><if condition="!boxTypeList"><entity-find entity-name="mantle.shipment.ShipmentBoxType" list="boxTypeList"><order-by field-name="description"/></entity-find></if><set field="localPrintAllLabels" from="false"/><if condition="ec.web.sessionAttributes.get('qzPackShipment' + shipmentId)"><set field="localPrintAllLabels" from="true"/><script><![CDATA[ec.web.sessionAttributes.put('qzPackShipment' + shipmentId, false)]]></script></if><set field="getShipmentLabelPath" from="sri.buildUrl('getShipmentLabel').path"/><set field="defaultNetworkPrinterId" from="ec.user.getPreference('Shipment.networkPrinterId.default')"/><entity-find entity-name="moqui.basic.print.NetworkPrinter" list="networkPrinterList"><order-by field-name="description,printerName"/></entity-find></actions></transition>